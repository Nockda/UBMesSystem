#PROPAGATION_REQUIRED(0),
#PROPAGATION_SUPPORTS(1),
#PROPAGATION_MANDATORY(2),
#PROPAGATION_REQUIRES_NEW(3), => Default
#PROPAGATION_NOT_SUPPORTED(4),
#PROPAGATION_NEVER(5),
#PROPAGATION_NESTED(6);

#ISOLATION_DEFAULT(-1),
#ISOLATION_READ_UNCOMMITED(1),
#ISOLATION_READ_COMMITED(2), => Default
#ISOLATION_REPEATABLE_READ(4),
#ISOLATION_SERIALIZABLE(8);
#ISOLATION_READ_COMMITED_SNAPSHOT(4096); => MsSQL Only (현재 JDBC 지원 불가)
#	- ALTER DATABASE {Table Name} SET allow_snapshot_isolation ON				=> 필수
#	- ALTER DATABASE {Table Name} SET read_committed_snapshot ON				=> 필수
#	- ALTER DATABASE {Table Name} SET SINGLE_USER WITH ROLLBACK IMMEDIATE		=> 선택
#	- ALTER DATABASE {Table Name} SET MULTI_USER								=> 선택
#
monitor.database.tableName=sf_log
#
sql.query.except.name=
sql.query.except.value=
sql.query.toDay=SELECT NOW() AS "DATE"
#
sql.query.timeout=60
#
sql.connection.readOnly=false
#
sql.history.field.name=saveHistory
#
sql.transaction.timeout=60
sql.transaction.propagationBehavior=3
sql.transaction.isolationLevel=2
#
sql.transaction.field.usable=true
sql.transaction.field.function.now=NOW()
sql.transaction.field.key=createDate,createUserId,lastUpdateDate,lastUpdateUserId
sql.transaction.field.key.createDate=CreatedTime:INSERT:$DATE_GETFUNCTION
sql.transaction.field.key.createUserId=Creator:INSERT:$USER_ID
sql.transaction.field.key.lastUpdateDate=ModifiedTime:UPDATE:$DATE_GETFUNCTION
sql.transaction.field.key.lastUpdateUserId=Modifier:UPDATE:$USER_ID
#
sql.transaction.field.txn.usable=true
sql.transaction.field.txn.exclude=
sql.transaction.field.txn.prifx.label=Last
#sql.transaction.field.txn.cancel=LASTHISTKEY,PREVHISTKEY,HISTKEY
#sql.transaction.field.txn.key=group,histKey,prevhistKey,id,user,time,comment
sql.transaction.field.txn.cancel=LASTTXNHISTKEY,TXNHISTKEY
sql.transaction.field.txn.key=group,histKey,id,user,time,comment,reasoncode,reasoncodeclass
sql.transaction.field.txn.key.group=TxnGroupHistKey:ALL:$TXN_ID
#sql.transaction.field.txn.key.histKey=TxnHistKey:ALL:$DATE_GETEVENT_STRING
sql.transaction.field.txn.key.histKey=TxnHistKey:ALL:$DATE_GETEVENT_MS_STRING
#sql.transaction.field.txn.key.prevhistKey=PrevHistKey:ALL:
##sql.transaction.field.txn.key.prevhistKey=PrevHistKey:ALL:#HISTKEY
sql.transaction.field.txn.key.id=TxnID:ALL:$RULE_ID
sql.transaction.field.txn.key.user=TxnUser:ALL:$USER_ID
sql.transaction.field.txn.key.time=TxnTime:ALL:$DATE_GETFUNCTION
sql.transaction.field.txn.key.comment=TxnComment:ALL:$TXNINFO.comment
sql.transaction.field.txn.key.reasoncode=TxnReasonCode:ALL:$TXNINFO.reasonCode
sql.transaction.field.txn.key.reasoncodeclass=TxnReasonCodeClass:ALL:$TXNINFO.reasonCodeClass
#
#기본키 설정 (COLUMN_KEY = "PRI")
#sql.factory.object.info.query=SELECT * from (select CASE WHEN SUBSTRING (T . TABLE_NAME, 1, 6) = 'SF_CM_' THEN	'BASIC_' || SUBSTRING (T . TABLE_NAME, 7)	ELSE T . TABLE_NAME	END TABLE_NAME,	T . COLUMN_NAME,	REPLACE (	REPLACE (T .data_type, ' ', ''),'"','') AS DATA_TYPE,	CASE	WHEN cc.COLUMN_NAME != '' THEN	'PRI'	ELSE ''	END AS COLUMN_KEY FROM	INFORMATION_SCHEMA. COLUMNS T LEFT JOIN INFORMATION_SCHEMA.constraint_column_usage AS cc ON T . TABLE_NAME = cc. TABLE_NAME AND T .table_catalog = cc.table_catalog and t.COLUMN_NAME = cc. COLUMN_NAME AND T .table_schema = cc.table_schema WHERE T .table_schema = 'public' AND SUBSTRING (T . TABLE_NAME, 1, 1) <> '_' ORDER BY t.TABLE_NAME , t.COLUMN_NAME )as tt UNION all SELECT 'test' as TABLE_NAME, ' 'as COLUMN_NAME, ' ' as data_type, 'PRI' as COLUMN_KEY
sql.factory.object.info.query=select T . TABLE_NAME,	T . COLUMN_NAME,	REPLACE (	REPLACE (T .data_type, ' ', ''),'"','') AS DATA_TYPE,	CASE	WHEN cc.COLUMN_NAME != '' THEN	'PRI'	ELSE ''	END AS COLUMN_KEY FROM	INFORMATION_SCHEMA. COLUMNS T LEFT JOIN INFORMATION_SCHEMA.constraint_column_usage AS cc ON T . TABLE_NAME = cc. TABLE_NAME AND T .table_catalog = cc.table_catalog and t.COLUMN_NAME = cc. COLUMN_NAME AND T .table_schema = cc.table_schema WHERE T .table_schema = '${OWNER}' ORDER BY t.TABLE_NAME , t.COLUMN_NAME 
#
sql.repository.except.name=
sql.repository.except.value=
#
#sql.dynamic.object.name=COM_M_OBJECT
#sql.dynamic.object.attribute.name=COM_M_OBJECTATTRIBUTE
sql.dynamic.object.name=SF_OBJECT
sql.dynamic.object.attribute.name=SF_OBJECTATTRIBUTE
sql.dynamic.history.usable=true
sql.dynamic.query.table.text.type=lower
sql.dynamic.query.field.text.type=lower
sql.dynamic.query.table.ansi=false
sql.dynamic.query.field.ansi=false
sql.dynamic.query.table.text.ltrim=true
sql.dynamic.query.table.text.rtrim=true
sql.dynamic.query.field.text.ltrim=true
sql.dynamic.query.field.text.rtrim=true
sql.dynamic.query.select.all.locked=SELECT $COLUMNS FROM $TABLE $ORDER_BY $GROUP_BY FOR UPDATE
sql.dynamic.query.select.all=SELECT $COLUMNS FROM $TABLE $ORDER_BY $GROUP_BY
sql.dynamic.query.select.locked=SELECT $COLUMNS FROM $TABLE WHERE $WHERE $ORDER_BY $GROUP_BY FOR UPDATE
sql.dynamic.query.count.all=SELECT COUNT(*) CNT FROM $TABLE
sql.dynamic.query.select=SELECT $COLUMNS FROM $TABLE WHERE $WHERE $ORDER_BY $GROUP_BY
sql.dynamic.query.insert=INSERT INTO $TABLE($COLUMNS) VALUES($VALUES)
sql.dynamic.query.update=UPDATE $TABLE SET $VALUES_FOR_COLUMN WHERE $WHERE
sql.dynamic.query.delete=DELETE FROM $TABLE WHERE $WHERE
#sql.dynamic.query.merge.alais.valuesForColumn=true
#sql.dynamic.query.merge=MERGE INTO $TABLE T USING(SELECT $MSELECT FROM DUAL) S ON ($MWHERE) WHEN MATCHED UPDATE SET $VALUES_FOR_COLUMN WHEN NOT MATCHED INSERT ($COLUMNS) VALUES($VALUES)
sql.dynamic.query.count=SELECT COUNT(*) CNT FROM $TABLE WHERE $WHERE
sql.dynamic.storeprocedure.call.format={ call ${NAME}(${PARAMETER}) }
sql.dynamic.storeprocedure.call.format.text.type=lower
