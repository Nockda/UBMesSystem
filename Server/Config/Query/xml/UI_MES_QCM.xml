<?xml version="1.0" encoding="UTF-8"?>
<list>
	<!--
	프 로 그 램 명	: 품질관리 > 클레임관리 > 시정예방조치서 발행대장
	설		명	: 시정예방조치서 발행대장의 메인그리드를 조회한다.
	생	성	자	: 유태근
	생	성	일	: 2020-04-22
	수  정   이  력	:  ★ 쿼리 변경시 "SelectClaimManagerStatus" 수정필요
				   ★ version = "00002" 쿼리 사용중
	-->
	<query id="SelectClaimManager" version="00001" dbms="MSSQL">
		<statement>
			<![CDATA[
				--
				-- Id : SelectClaimManager
				-- Version : 00001
				SELECT 
						CA.DOCID													-- 발행번호
					,	CA.CLAIMNUMBER												-- Claim No
					,	CASE WHEN DF.DEFECTNOTICECOUNT IS NULL 
							 THEN 0 
							 ELSE DF.DEFECTNOTICECOUNT END	AS	DEFECTNOTICECOUNT	-- 불량통지건수
					,	CONVERT(DATE, CA.PUBLISHDATE)		AS	PUBLISHDATE			-- 발행일자
					,	CA.DEFECTDOCID 									   		 	-- 불량통지서 발행번호
					,	CA.PROGRESSSTATE											-- 진행상태(코드)
					,	CDD.DICTIONARYNAME					AS 	PROGRESSSTATENAME	-- 진행상태(명)
					,	CA.CUSTOMERID												-- 고객사 ID
					,	CU.CUSTNAME							AS 	CUSTOMERNAME		-- 고객사명					 
					,	XM.MODELID													-- 기종
					,	ISNULL(MCD.DICTIONARYNAME, MC.CODENAME)	AS MODELNAME		-- 기종명
					,	ISNULL(TRD.DICTIONARYNAME, TRC.CODENAME) AS TROUBLETYPE		-- 문제유형
					,	CA.CLAIMTYPE												-- Claim 구분
					,	CA.REQDEPARTMENTID											-- 요청부서
					,	ISNULL(DPD.DICTIONARYNAME, DP.CODENAME)	AS	REQDEPARTMENTNAME	-- 요청부서명
					,	CA.REQUSER													-- 요청자ID
					,	U.USERNAME							AS	REQUSERNAME			-- 요청자명
					,	CA.PUBLISHTYPE												-- 발행구분
					,	CONVERT(DATETIME, CA.REQCONFDATE) 	AS 	REQCONFDATE			-- 회담희망일
					,	CA.RECIEPTDATE												-- Claim 접수일
					,	CA.COMPLETEDATE												-- 발행완료일
					,	CA.COMPLETEDAY												-- 발행소요일
					,	CA.ACTIONDATE												-- 조치완료일
					,	CA.ACTIONDAY												-- 조치소요일
					,	CONVERT(DATETIME, CA.INDATE) 			AS 	INDATE			-- 제품입고일자
					,	CA.CONFIRMUSER												-- 입고확인자	
					,	CA.RESPONSEDATE												-- 현장대응소요일
					,	CA.DESCRIPTION												-- 비고사항	
					,	XM.VARIABLECOST												-- 변동비	
					,	XM.FIXEDCOST												-- 고정비	
					,	CA.XNUMBER													-- X번호
					,	XM.MANUFACTURENUMBER										-- 제조번호(S/N)
					,	XM.ETMHOUR													-- 사용시간(ETM)
					,   CA.CLAIMDATE												-- Claim 발생일
					,	CA.CLAIMDESC												-- Claim 내용
					,	CA.PROGRESSDESC												-- 진행사항						
					,	NULL 								AS	ISMODIFIEDFILE 		-- 파일수정여부
					,	PTD.DICTIONARYNAME					AS	PUBLISHTYPENAME		-- 발행구분명
					,	RU.USERNAME							AS	REQUSERNAME			-- 요청자명
					,	CTD.DICTIONARYNAME					AS	CLAIMTYPENAME		-- Claim 구분명
					,	STRING_AGG(ISNULL(TCD.DICTIONARYNAME, TC.CODENAME), ',')	AS	TEAMS 	-- 조치팀
					,	XM.STATEDESC												-- 현상
					,	XM.RESPONSEDESC												-- 대응
					,	DF.PROGRESSSTATE						AS	DEFECTPROGRESSSTATE		-- 불량통지서 진행상태 코드
					,	ISNULL(DCD.DICTIONARYNAME, DC.CODENAME)	AS	DEFECTPROGRESSSTATENAME	-- 불량통지서 진행상태 코드명
				FROM	UL_CAPA						CA	
				LEFT OUTER JOIN	UL_XMANAGE			XM	ON	XM.XNUMBER = CA.XNUMBER	
				LEFT OUTER JOIN
								(
									SELECT 
											CLAIMNUMBER
										,	PROGRESSSTATE
										,	COUNT(DOCID)		AS DEFECTNOTICECOUNT
									FROM	UL_DEFECT
									WHERE	ISNULL(CLAIMNUMBER, '') <> ''
									GROUP BY 
											CLAIMNUMBER	
										,	PROGRESSSTATE								
								)					DF	ON	DF.CLAIMNUMBER = CA.CLAIMNUMBER	
				LEFT OUTER JOIN (
									SELECT	 *
									--FROM	[UCKERP].[UCK200312].[dbo].[uck_VIEW_Cust]
									FROM	[UCKERP].[$!{DBLINKNAME}].[dbo].[uck_VIEW_Cust]
									WHERE	1 = 1
								)					CU	ON	CONVERT(VARCHAR(50), CU.CUSTSEQ) = CA.CUSTOMERID
				LEFT OUTER JOIN SF_CODE 			CD 	ON 	CD.CODEID = CA.PROGRESSSTATE
														AND CD.CODECLASSID = 'ProgressState'
				LEFT OUTER JOIN SF_DICTIONARY 		CDD ON 	CDD.DICTIONARYID = CD.DICTIONARYID
														AND CDD.LANGUAGETYPE = '$!{LANGUAGETYPE}'
				LEFT OUTER JOIN SF_CODE				DC	ON	DC.CODEID = DF.PROGRESSSTATE
														AND DC.CODECLASSID = 'DefectProcessState'
				LEFT OUTER JOIN SF_DICTIONARY		DCD	ON	DCD.DICTIONARYID = DC.DICTIONARYID
														AND DCD.LANGUAGETYPE = '$!{LANGUAGETYPE}'
				LEFT OUTER JOIN SF_CODE				PTC	ON	PTC.CODEID = CA.PUBLISHTYPE
														AND PTC.CODECLASSID = 'PublishType'
				LEFT OUTER JOIN SF_DICTIONARY		PTD ON	PTD.DICTIONARYID = PTC.DICTIONARYID
														AND PTD.LANGUAGETYPE = '$!{LANGUAGETYPE}'
				LEFT OUTER JOIN SF_USER				RU	ON	RU.USERID = CA.REQUSER
				LEFT OUTER JOIN SF_CODE				CTC	ON	CTC.CODEID = CA.CLAIMTYPE
														AND CTC.CODECLASSID = 'ClaimType'
				LEFT OUTER JOIN SF_DICTIONARY		CTD ON	CTD.DICTIONARYID = CTC.DICTIONARYID
														AND CTD.LANGUAGETYPE = '$!{LANGUAGETYPE}'
				LEFT OUTER JOIN UL_CAPADTL			CAD ON	CAD.DOCID = CA.DOCID
				LEFT OUTER JOIN SF_CODE				TC	ON	TC.CODEID = CAD.TEAMID
														AND	TC.CODECLASSID = 'TeamCodeQc'
				LEFT OUTER JOIN SF_DICTIONARY		TCD ON	TCD.DICTIONARYID = TC.DICTIONARYID
														AND TCD.LANGUAGETYPE = '$!{LANGUAGETYPE}'
				LEFT OUTER JOIN SF_CODE				DP	ON	DP.CODEID = CA.REQDEPARTMENTID
														AND DP.CODECLASSID = 'TeamCodeQc'
				LEFT OUTER JOIN SF_DICTIONARY		DPD ON	DPD.DICTIONARYID = DP.DICTIONARYID
														AND DPD.LANGUAGETYPE = '$!{LANGUAGETYPE}'
				LEFT OUTER JOIN SF_CODE				MC	ON	MC.CODEID = XM.MODELID
														AND MC.CODECLASSID = 'ModelCode'
				LEFT OUTER JOIN SF_DICTIONARY		MCD	ON	MCD.DICTIONARYID = MC.DICTIONARYID
														AND MCD.LANGUAGETYPE = '$!{LANGUAGETYPE}'
				LEFT OUTER JOIN SF_CODE				TRC	ON	TRC.CODEID = XM.TROUBLETYPE
														AND TRC.CODECLASSID  = 'TrobleType'
				LEFT OUTER JOIN SF_DICTIONARY		TRD	ON	TRD.DICTIONARYID = TRC.DICTIONARYID
														AND TRD.LANGUAGETYPE = '$!{LANGUAGETYPE}'
				LEFT OUTER JOIN SF_USER				U	ON	U.USERID = CA.REQUSER
				WHERE	1 = 1
				
				-- 발행일자 조회조건
				AND		CA.PUBLISHDATE BETWEEN CONVERT(DATE, '$!{P_DATEPERIOD_PERIODFR}')
									   AND	   CONVERT(DATE, '$!{P_DATEPERIOD_PERIODTO}')
									  
				--AND		CA.PUBLISHDATE >= (SELECT VALUE FROM ufn_selectStringToSplit('$!{P_DATEPERIOD}', ',') WHERE SEQUENCE = '1')
				--AND		CA.PUBLISHDATE <= (SELECT VALUE FROM ufn_selectStringToSplit('$!{P_DATEPERIOD}', ',') WHERE SEQUENCE = '2')
				
				-- Claim 구분 조회조건
				#if ("$!{P_CLAIMTYPE}" != "*")
					AND 	CA.CLAIMTYPE = '$!{P_CLAIMTYPE}'
				#end
				
				-- 진행상태 조회조건
				#if ("$!{P_PROCESSSTATECODE}" != "*")
					AND 	CA.PROGRESSSTATE = '$!{P_PROCESSSTATECODE}'
				#end
				
				GROUP BY
						CA.DOCID											
					,	CA.CLAIMNUMBER												
					,	DF.DEFECTNOTICECOUNT
					,	CONVERT(DATE, CA.PUBLISHDATE)	
					,	CA.DEFECTDOCID 									   		 	
					,	CA.PROGRESSSTATE											
					,	CDD.DICTIONARYNAME	
					,	CA.CUSTOMERID												
					,	CU.CUSTNAME												 
					,	XM.MODELID	
					,	MCD.DICTIONARYNAME
					,	MC.CODENAME		
					,	TRD.DICTIONARYNAME
					,	TRC.CODENAME									
					,	CA.CLAIMTYPE												
					,	CA.REQDEPARTMENTID
					,	DPD.DICTIONARYNAME
					,	DP.CODENAME										
					,	CA.REQUSER	
					,	U.USERNAME												
					,	CA.PUBLISHTYPE												
					,	CONVERT(DATETIME, CA.REQCONFDATE) 	
					,	CA.RECIEPTDATE												
					,	CA.COMPLETEDATE												
					,	CA.COMPLETEDAY												
					,	CA.ACTIONDATE											
					,	CA.ACTIONDAY												
					,	CONVERT(DATETIME, CA.INDATE) 
					,	CA.CONFIRMUSER													
					,	CA.RESPONSEDATE												
					,	CA.DESCRIPTION													
					,	XM.VARIABLECOST												
					,	XM.FIXEDCOST												
					,	CA.XNUMBER													
					,	XM.MANUFACTURENUMBER										
					,	XM.ETMHOUR													
					,   CA.CLAIMDATE												
					,	CA.CLAIMDESC												
					,	CA.PROGRESSDESC																							
					,	PTD.DICTIONARYNAME					
					,	RU.USERNAME							
					,	CTD.DICTIONARYNAME		
					,	XM.STATEDESC												
					,	XM.RESPONSEDESC		
					,	DF.PROGRESSSTATE		
					,	DCD.DICTIONARYNAME
					,	DC.CODENAME												
				ORDER BY 
						CA.DOCID
					,	CAST (CA.PUBLISHDATE AS DATE);
			]]>
		</statement>
	</query>
		<!--
	프 로 그 램 명	: 품질관리 > 클레임관리 > 시정예방조치서 발행대장
	설		명	: 시정예방조치서 발행대장의 메인그리드를 조회한다.
	생	성	자	: 이준용
	생	성	일	: 2020-10-13
	수  정   이  력	:  ★ 쿼리 변경시 "SelectClaimManagerStatus" 수정필요
				: UCK라이브 DB에서 조회오류 발생 Helpdesk[0000260]
				  version 00001 쿼리 내용중 GROUP BY => MAX로 변경
				  2021-05-07 정송은 회담희망일 발행완료일자 +15일로 수정
	-->
		<query id="SelectClaimManager" version="00002" dbms="MSSQL">
		<statement>
			<![CDATA[
				--
				-- Id : SelectClaimManager
				-- Version : 00002
				SELECT 
						MAX(CA.DOCID)												AS	DOCID					-- 발행번호
					,	MAX(CA.CLAIMNUMBER)											AS	CLAIMNUMBER				-- Claim No
					,	CASE WHEN DF.DEFECTNOTICECOUNT IS NULL 
							 THEN 0 
							 ELSE DF.DEFECTNOTICECOUNT END							AS	DEFECTNOTICECOUNT		-- 불량통지건수
					,	MAX(CONVERT(DATE, CA.PUBLISHDATE))							AS	PUBLISHDATE				-- 발행일자
					,	MAX(CA.DEFECTDOCID) 										AS	DEFECTDOCID				-- 불량통지서 발행번호
					,	MAX(CA.PROGRESSSTATE)										AS	PROGRESSSTATE			-- 진행상태(코드)
					,	MAX(CDD.DICTIONARYNAME)										AS 	PROGRESSSTATENAME		-- 진행상태(명)
					,	MAX(CA.CUSTOMERID)											AS	CUSTOMERID				-- 고객사 ID
					,	MAX(CU.CUSTNAME)											AS 	CUSTOMERNAME			-- 고객사명					 
					,	MAX(XM.MODELID)												AS	MODELID					-- 기종
					,	MAX(ISNULL(MCD.DICTIONARYNAME, MC.CODENAME))				AS	MODELNAME				-- 기종명
					,	MAX(ISNULL(TRD.DICTIONARYNAME, TRC.CODENAME))				AS	TROUBLETYPE				-- 문제유형
					,	MAX(CA.CLAIMTYPE)											AS	CLAIMTYPE				-- Claim 구분
					,	MAX(CA.REQDEPARTMENTID)										AS	REQDEPARTMENTID			-- 요청부서
					,	MAX(ISNULL(DPD.DICTIONARYNAME, DP.CODENAME))				AS	REQDEPARTMENTNAME		-- 요청부서명
					,	MAX(CA.REQUSER)												AS	REQUSER					-- 요청자ID
					,	MAX(U.USERNAME)												AS	REQUSERNAME				-- 요청자명
					,	MAX(CA.PUBLISHTYPE)											AS	PUBLISHTYPE				-- 발행구분
					--,	MAX(CONVERT(DATETIME, CA.REQCONFDATE))						AS 	REQCONFDATE				-- 회담희망일
					,   MAX(DATEADD(dd, 15, CONVERT(DATE, CA.COMPLETEDATE)))        AS  REQCONFDATE             -- 회담희망일
					,	MAX(CA.RECIEPTDATE)											AS	RECIEPTDATE				-- Claim 접수일
					,	MAX(CA.COMPLETEDATE)										AS	COMPLETEDATE			-- 발행완료일
					,	MAX(CA.COMPLETEDAY)											AS	COMPLETEDAY				-- 발행소요일
					,	MAX(CA.ACTIONDATE)											AS	ACTIONDATE				-- 조치완료일
					,	MAX(CA.ACTIONDAY)											AS	ACTIONDAY				-- 조치소요일
					,	MAX(CONVERT(DATETIME, CA.INDATE)) 							AS 	INDATE					-- 제품입고일자
					,	MAX(CA.CONFIRMUSER)											AS	CONFIRMUSER				-- 입고확인자	
					,	MAX(CA.RESPONSEDATE)										AS	RESPONSEDATE			-- 현장대응소요일
					,	MAX(CA.DESCRIPTION)											AS	DESCRIPTION				-- 비고사항	
					,	XM.VARIABLECOST												AS	VARIABLECOST			-- 변동비	
					,	XM.FIXEDCOST												AS	FIXEDCOST				-- 고정비	
					,	MAX(CA.XNUMBER)												AS	XNUMBER					-- X번호
					,	MAX(XM.MANUFACTURENUMBER)									AS	MANUFACTURENUMBER		-- 제조번호(S/N)
					,	XM.ETMHOUR													AS	ETMHOUR					-- 사용시간(ETM)
					,   MAX(CA.CLAIMDATE)											AS	CLAIMDATE				-- Claim 발생일
					,	MAX(CA.CLAIMDESC)											AS	CLAIMDESC				-- Claim 내용
					,	MAX(CA.PROGRESSDESC)										AS	PROGRESSDESC			-- 진행사항						
					,	NULL 														AS	ISMODIFIEDFILE 			-- 파일수정여부
					,	MAX(PTD.DICTIONARYNAME)										AS	PUBLISHTYPENAME			-- 발행구분명
					,	MAX(RU.USERNAME)											AS	REQUSERNAME				-- 요청자명
					,	MAX(CTD.DICTIONARYNAME)										AS	CLAIMTYPENAME			-- Claim 구분명
					,	STRING_AGG(ISNULL(TCD.DICTIONARYNAME, TC.CODENAME), ',')	AS	TEAMS 					-- 조치팀
					,	MAX(XM.STATEDESC)											AS	STATEDESC				-- 현상
					,	MAX(XM.RESPONSEDESC)										AS	RESPONSEDESC			-- 대응
					,	MAX(DF.PROGRESSSTATE)										AS	DEFECTPROGRESSSTATE		-- 불량통지서 진행상태 코드
					,	MAX(ISNULL(DCD.DICTIONARYNAME, DC.CODENAME))				AS	DEFECTPROGRESSSTATENAME	-- 불량통지서 진행상태 코드명
				FROM	UL_CAPA						CA	
				LEFT OUTER JOIN	UL_XMANAGE			XM	ON	XM.XNUMBER = CA.XNUMBER	
				LEFT OUTER JOIN
								(
									SELECT 
											CLAIMNUMBER
										,	PROGRESSSTATE
										,	COUNT(DOCID)		AS DEFECTNOTICECOUNT
									FROM	UL_DEFECT
									WHERE	ISNULL(CLAIMNUMBER, '') <> ''
									GROUP BY 
											CLAIMNUMBER	
										,	PROGRESSSTATE								
								)					DF	ON	DF.CLAIMNUMBER = CA.CLAIMNUMBER	
				LEFT OUTER JOIN (
									SELECT	 *
									--FROM	[UCKERP].[UCK200312].[dbo].[uck_VIEW_Cust]
									FROM	[UCKERP].[$!{DBLINKNAME}].[dbo].[uck_VIEW_Cust]
									WHERE	1 = 1
								)					CU	ON	CONVERT(VARCHAR(50), CU.CUSTSEQ) = CA.CUSTOMERID
				LEFT OUTER JOIN SF_CODE 			CD 	ON 	CD.CODEID = CA.PROGRESSSTATE
														AND CD.CODECLASSID = 'ProgressState'
				LEFT OUTER JOIN SF_DICTIONARY 		CDD ON 	CDD.DICTIONARYID = CD.DICTIONARYID
														AND CDD.LANGUAGETYPE = '$!{LANGUAGETYPE}'
				LEFT OUTER JOIN SF_CODE				DC	ON	DC.CODEID = DF.PROGRESSSTATE
														AND DC.CODECLASSID = 'DefectProcessState'
				LEFT OUTER JOIN SF_DICTIONARY		DCD	ON	DCD.DICTIONARYID = DC.DICTIONARYID
														AND DCD.LANGUAGETYPE = '$!{LANGUAGETYPE}'
				LEFT OUTER JOIN SF_CODE				PTC	ON	PTC.CODEID = CA.PUBLISHTYPE
														AND PTC.CODECLASSID = 'PublishType'
				LEFT OUTER JOIN SF_DICTIONARY		PTD ON	PTD.DICTIONARYID = PTC.DICTIONARYID
														AND PTD.LANGUAGETYPE = '$!{LANGUAGETYPE}'
				LEFT OUTER JOIN SF_USER				RU	ON	RU.USERID = CA.REQUSER
				LEFT OUTER JOIN SF_CODE				CTC	ON	CTC.CODEID = CA.CLAIMTYPE
														AND CTC.CODECLASSID = 'ClaimType'
				LEFT OUTER JOIN SF_DICTIONARY		CTD ON	CTD.DICTIONARYID = CTC.DICTIONARYID
														AND CTD.LANGUAGETYPE = '$!{LANGUAGETYPE}'
				LEFT OUTER JOIN UL_CAPADTL			CAD ON	CAD.DOCID = CA.DOCID
				LEFT OUTER JOIN SF_CODE				TC	ON	TC.CODEID = CAD.TEAMID
														AND	TC.CODECLASSID = 'TeamCodeQc'
				LEFT OUTER JOIN SF_DICTIONARY		TCD ON	TCD.DICTIONARYID = TC.DICTIONARYID
														AND TCD.LANGUAGETYPE = '$!{LANGUAGETYPE}'
				LEFT OUTER JOIN SF_CODE				DP	ON	DP.CODEID = CA.REQDEPARTMENTID
														AND DP.CODECLASSID = 'TeamCodeQc'
				LEFT OUTER JOIN SF_DICTIONARY		DPD ON	DPD.DICTIONARYID = DP.DICTIONARYID
														AND DPD.LANGUAGETYPE = '$!{LANGUAGETYPE}'
				LEFT OUTER JOIN SF_CODE				MC	ON	MC.CODEID = XM.MODELID
														AND MC.CODECLASSID = 'ModelCode'
				LEFT OUTER JOIN SF_DICTIONARY		MCD	ON	MCD.DICTIONARYID = MC.DICTIONARYID
														AND MCD.LANGUAGETYPE = '$!{LANGUAGETYPE}'
				LEFT OUTER JOIN SF_CODE				TRC	ON	TRC.CODEID = XM.TROUBLETYPE
														AND TRC.CODECLASSID  = 'TrobleType'
				LEFT OUTER JOIN SF_DICTIONARY		TRD	ON	TRD.DICTIONARYID = TRC.DICTIONARYID
														AND TRD.LANGUAGETYPE = '$!{LANGUAGETYPE}'
				LEFT OUTER JOIN SF_USER				U	ON	U.USERID = CA.REQUSER
				WHERE	1 = 1
				
				-- 발행일자 조회조건
				AND		CA.PUBLISHDATE BETWEEN CONVERT(DATE, '$!{P_DATEPERIOD_PERIODFR}')
									   AND	   CONVERT(DATE, '$!{P_DATEPERIOD_PERIODTO}')
									  
				--AND		CA.PUBLISHDATE >= (SELECT VALUE FROM ufn_selectStringToSplit('$!{P_DATEPERIOD}', ',') WHERE SEQUENCE = '1')
				--AND		CA.PUBLISHDATE <= (SELECT VALUE FROM ufn_selectStringToSplit('$!{P_DATEPERIOD}', ',') WHERE SEQUENCE = '2')
				
				-- Claim 구분 조회조건
				#if ("$!{P_CLAIMTYPE}" != "*")
					AND 	CA.CLAIMTYPE = '$!{P_CLAIMTYPE}'
				#end
				
				-- 진행상태 조회조건
				#if ("$!{P_PROCESSSTATECODE}" != "*")
					AND 	CA.PROGRESSSTATE = '$!{P_PROCESSSTATECODE}'
				#end
				
				GROUP BY
						CA.DOCID											
					--,	CA.CLAIMNUMBER												
						,	DF.DEFECTNOTICECOUNT
						,	CONVERT(DATE, CA.PUBLISHDATE)	
					--,	CA.DEFECTDOCID 									   		 	
					--,	CA.PROGRESSSTATE											
					--,	CDD.DICTIONARYNAME	
					--,	CA.CUSTOMERID												
					--,	CU.CUSTNAME												 
					--,	XM.MODELID	
					--,	MCD.DICTIONARYNAME
					--,	MC.CODENAME		
					--,	TRD.DICTIONARYNAME
					--,	TRC.CODENAME									
					--,	CA.CLAIMTYPE												
					--,	CA.REQDEPARTMENTID
					--,	DPD.DICTIONARYNAME
					--,	DP.CODENAME										
					--,	CA.REQUSER	
					--,	U.USERNAME												
					--,	CA.PUBLISHTYPE												
					--,	CONVERT(DATETIME, CA.REQCONFDATE) 	
					--,	CA.RECIEPTDATE												
					--,	CA.COMPLETEDATE												
					--,	CA.COMPLETEDAY												
					--,	CA.ACTIONDATE											
					--,	CA.ACTIONDAY												
					--,	CONVERT(DATETIME, CA.INDATE) 
					--,	CA.CONFIRMUSER													
					--,	CA.RESPONSEDATE												
					--,	CA.DESCRIPTION													
						,	XM.VARIABLECOST												
						,	XM.FIXEDCOST												
					--,	CA.XNUMBER													
					--,	XM.MANUFACTURENUMBER										
						,	XM.ETMHOUR													
					--,   CA.CLAIMDATE												
					--,	CA.CLAIMDESC												
					--,	CA.PROGRESSDESC																							
					--,	PTD.DICTIONARYNAME					
					--,	RU.USERNAME							
					--,	CTD.DICTIONARYNAME		
					--,	XM.STATEDESC												
					--,	XM.RESPONSEDESC		
					--,	DF.PROGRESSSTATE		
					--,	DCD.DICTIONARYNAME
					--,	DC.CODENAME	
				ORDER BY 
						CA.DOCID
					,	CAST (CA.PUBLISHDATE AS DATE);
			]]>
		</statement>
	</query>
	
	
	<!--
	프 로 그 램 명	: 품질관리 > 클레임관리 > 시정예방조치서 발행대장 - 현황조회
	설		명	: 시정예방조치서 발행대장 현황을 조회한다.(시정예방조치서 - 진행현황 동시 출력)
	생	성	자	: 이준용
	생	성	일	: 2020-07-28
	수  정   이  력	: ★ 쿼리 변경시 "SelectClaimManager" 확인필요
				: ★ version = "00002" 쿼리 사용중
	-->
	<query id="SelectClaimManagerStatus" version="00001">
		<statement>
			<![CDATA[
				--
				-- Id : SelectClaimManagerStatus
				-- Version : 00001
				SELECT 
						CA.DOCID													-- 발행번호
					,	CA.CLAIMNUMBER												-- Claim No
					,	CASE WHEN DF.DEFECTNOTICECOUNT IS NULL 
							 THEN 0 
							 ELSE DF.DEFECTNOTICECOUNT END	AS	DEFECTNOTICECOUNT	-- 불량통지건수
					,	CONVERT(DATE, CA.PUBLISHDATE)		AS	PUBLISHDATE			-- 발행일자
					,	CA.DEFECTDOCID 									   		 	-- 불량통지서 발행번호
					,	CA.PROGRESSSTATE											-- 진행상태(코드)
					,	CDD.DICTIONARYNAME					AS 	PROGRESSSTATENAME	-- 진행상태(명)
					,	CA.CUSTOMERID												-- 고객사 ID
					,	CU.CUSTNAME							AS 	CUSTOMERNAME		-- 고객사명					 
					,	XM.MODELID													-- 기종
					,	ISNULL(MCD.DICTIONARYNAME, MC.CODENAME)	AS MODELNAME		-- 기종명
					,	ISNULL(TRD.DICTIONARYNAME, TRC.CODENAME) AS TROUBLETYPE		-- 문제유형
					,	CA.CLAIMTYPE												-- Claim 구분
					,	CA.REQDEPARTMENTID											-- 요청부서
					,	ISNULL(DPD.DICTIONARYNAME, DP.CODENAME)	AS	REQDEPARTMENTNAME	-- 요청부서명
					,	CA.REQUSER													-- 요청자ID
					,	U.USERNAME							AS	REQUSERNAME			-- 요청자명
					,	CA.PUBLISHTYPE												-- 발행구분
					,	CONVERT(DATETIME, CA.REQCONFDATE) 	AS 	REQCONFDATE			-- 회담희망일
					,	CA.RECIEPTDATE												-- Claim 접수일
					,	CA.COMPLETEDATE												-- 발행완료일
					,	CA.COMPLETEDAY												-- 발행소요일
					,	CA.ACTIONDATE												-- 조치완료일
					,	CA.ACTIONDAY												-- 조치소요일
					,	CONVERT(DATETIME, CA.INDATE) 			AS 	INDATE			-- 제품입고일자
					,	CA.CONFIRMUSER												-- 입고확인자	
					,	CA.RESPONSEDATE												-- 현장대응소요일
					,	CA.DESCRIPTION												-- 비고사항	
					,	XM.VARIABLECOST												-- 변동비	
					,	XM.FIXEDCOST												-- 고정비	
					,	CA.XNUMBER													-- X번호
					,	XM.MANUFACTURENUMBER										-- 제조번호(S/N)
					,	XM.ETMHOUR													-- 사용시간(ETM)
					,   CA.CLAIMDATE												-- Claim 발생일
					,	CA.CLAIMDESC												-- Claim 내용
					,	CA.PROGRESSDESC												-- 진행사항						
					,	NULL 								AS	ISMODIFIEDFILE 		-- 파일수정여부
					,	PTD.DICTIONARYNAME					AS	PUBLISHTYPENAME		-- 발행구분명
					,	RU.USERNAME							AS	REQUSERNAME			-- 요청자명
					,	CTD.DICTIONARYNAME					AS	CLAIMTYPENAME		-- Claim 구분명
					,	STRING_AGG(ISNULL(TCD.DICTIONARYNAME, TC.CODENAME), ',')	AS	TEAMS 	-- 조치팀
					,	XM.STATEDESC												-- 현상
					,	XM.RESPONSEDESC												-- 대응
					,	DF.PROGRESSSTATE						AS	DEFECTPROGRESSSTATE		-- 불량통지서 진행상태 코드
					,	ISNULL(DCD.DICTIONARYNAME, DC.CODENAME)	AS	DEFECTPROGRESSSTATENAME	-- 불량통지서 진행상태 코드명
					,	CAP.TEAMID
					,	CAP.DEFECTTYPE
					,	CAP.REASONTEAMID
					,	CAP.REASONTYPE
					,	CAP.DESCRIPTION 					AS PROGRESSDESC
					,	CAP.REASONDESC
					,	CAP.ACTIONDESC
					,	CAP.DOCSEQUENCE
					,	CAP.ACTIONDATE
				FROM	UL_CAPA						CA
				LEFT OUTER JOIN UL_CAPADTL			CAP ON CAP.DOCID = CA.DOCID
				LEFT OUTER JOIN	UL_XMANAGE			XM	ON	XM.XNUMBER = CA.XNUMBER	
				LEFT OUTER JOIN
								(
									SELECT 
											CLAIMNUMBER
										,	PROGRESSSTATE
										,	COUNT(DOCID)		AS DEFECTNOTICECOUNT
									FROM	UL_DEFECT
									WHERE	ISNULL(CLAIMNUMBER, '') <> ''
									GROUP BY 
											CLAIMNUMBER	
										,	PROGRESSSTATE								
								)					DF	ON	DF.CLAIMNUMBER = CA.CLAIMNUMBER	
				LEFT OUTER JOIN (
									SELECT	 *
									--FROM	[UCKERP].[UCK200312].[dbo].[uck_VIEW_Cust]
									FROM	[UCKERP].[$!{DBLINKNAME}].[dbo].[uck_VIEW_Cust]
									WHERE	1 = 1
								)					CU	ON	CONVERT(VARCHAR(50), CU.CUSTSEQ) = CA.CUSTOMERID
				LEFT OUTER JOIN SF_CODE 			CD 	ON 	CD.CODEID = CA.PROGRESSSTATE
														AND CD.CODECLASSID = 'ProgressState'
				LEFT OUTER JOIN SF_DICTIONARY 		CDD ON 	CDD.DICTIONARYID = CD.DICTIONARYID
														AND CDD.LANGUAGETYPE = '$!{LANGUAGETYPE}'
				LEFT OUTER JOIN SF_CODE				DC	ON	DC.CODEID = DF.PROGRESSSTATE
														AND DC.CODECLASSID = 'DefectProcessState'
				LEFT OUTER JOIN SF_DICTIONARY		DCD	ON	DCD.DICTIONARYID = DC.DICTIONARYID
														AND DCD.LANGUAGETYPE = '$!{LANGUAGETYPE}'
				LEFT OUTER JOIN SF_CODE				PTC	ON	PTC.CODEID = CA.PUBLISHTYPE
														AND PTC.CODECLASSID = 'PublishType'
				LEFT OUTER JOIN SF_DICTIONARY		PTD ON	PTD.DICTIONARYID = PTC.DICTIONARYID
														AND PTD.LANGUAGETYPE = '$!{LANGUAGETYPE}'
				LEFT OUTER JOIN SF_USER				RU	ON	RU.USERID = CA.REQUSER
				LEFT OUTER JOIN SF_CODE				CTC	ON	CTC.CODEID = CA.CLAIMTYPE
														AND CTC.CODECLASSID = 'ClaimType'
				LEFT OUTER JOIN SF_DICTIONARY		CTD ON	CTD.DICTIONARYID = CTC.DICTIONARYID
														AND CTD.LANGUAGETYPE = '$!{LANGUAGETYPE}'
				LEFT OUTER JOIN UL_CAPADTL			CAD ON	CAD.DOCID = CA.DOCID
				LEFT OUTER JOIN SF_CODE				TC	ON	TC.CODEID = CAD.TEAMID
														AND	TC.CODECLASSID = 'TeamCodeQc'
				LEFT OUTER JOIN SF_DICTIONARY		TCD ON	TCD.DICTIONARYID = TC.DICTIONARYID
														AND TCD.LANGUAGETYPE = '$!{LANGUAGETYPE}'
				LEFT OUTER JOIN SF_CODE				DP	ON	DP.CODEID = CA.REQDEPARTMENTID
														AND DP.CODECLASSID = 'TeamCodeQc'
				LEFT OUTER JOIN SF_DICTIONARY		DPD ON	DPD.DICTIONARYID = DP.DICTIONARYID
														AND DPD.LANGUAGETYPE = '$!{LANGUAGETYPE}'
				LEFT OUTER JOIN SF_CODE				MC	ON	MC.CODEID = XM.MODELID
														AND MC.CODECLASSID = 'ModelCode'
				LEFT OUTER JOIN SF_DICTIONARY		MCD	ON	MCD.DICTIONARYID = MC.DICTIONARYID
														AND MCD.LANGUAGETYPE = '$!{LANGUAGETYPE}'
				LEFT OUTER JOIN SF_CODE				TRC	ON	TRC.CODEID = XM.TROUBLETYPE
														AND TRC.CODECLASSID  = 'TrobleType'
				LEFT OUTER JOIN SF_DICTIONARY		TRD	ON	TRD.DICTIONARYID = TRC.DICTIONARYID
														AND TRD.LANGUAGETYPE = '$!{LANGUAGETYPE}'
				LEFT OUTER JOIN SF_USER				U	ON	U.USERID = CA.REQUSER
				WHERE	1 = 1
				
				-- 발행일자 조회조건
				AND		CA.PUBLISHDATE BETWEEN CONVERT(DATE, '$!{P_DATEPERIOD_PERIODFR}')
									   AND	   CONVERT(DATE, '$!{P_DATEPERIOD_PERIODTO}')
									  
				--AND		CA.PUBLISHDATE >= (SELECT VALUE FROM ufn_selectStringToSplit('$!{P_DATEPERIOD}', ',') WHERE SEQUENCE = '1')
				--AND		CA.PUBLISHDATE <= (SELECT VALUE FROM ufn_selectStringToSplit('$!{P_DATEPERIOD}', ',') WHERE SEQUENCE = '2')
				
				-- Claim 구분 조회조건
				#if ("$!{P_CLAIMTYPE}" != "*")
					AND 	CA.CLAIMTYPE = '$!{P_CLAIMTYPE}'
				#end
				
				-- 진행상태 조회조건
				#if ("$!{P_PROCESSSTATECODE}" != "*")
					AND 	CA.PROGRESSSTATE = '$!{P_PROCESSSTATECODE}'
				#end
				
				GROUP BY
						CA.DOCID											
					,	CA.CLAIMNUMBER												
					,	DF.DEFECTNOTICECOUNT
					,	CONVERT(DATE, CA.PUBLISHDATE)	
					,	CA.DEFECTDOCID 									   		 	
					,	CA.PROGRESSSTATE											
					,	CDD.DICTIONARYNAME	
					,	CA.CUSTOMERID												
					,	CU.CUSTNAME												 
					,	XM.MODELID	
					,	MCD.DICTIONARYNAME
					,	MC.CODENAME		
					,	TRD.DICTIONARYNAME
					,	TRC.CODENAME									
					,	CA.CLAIMTYPE												
					,	CA.REQDEPARTMENTID
					,	DPD.DICTIONARYNAME
					,	DP.CODENAME										
					,	CA.REQUSER	
					,	U.USERNAME												
					,	CA.PUBLISHTYPE												
					,	CONVERT(DATETIME, CA.REQCONFDATE) 	
					,	CA.RECIEPTDATE												
					,	CA.COMPLETEDATE												
					,	CA.COMPLETEDAY												
					,	CA.ACTIONDATE											
					,	CA.ACTIONDAY												
					,	CONVERT(DATETIME, CA.INDATE) 
					,	CA.CONFIRMUSER													
					,	CA.RESPONSEDATE												
					,	CA.DESCRIPTION													
					,	XM.VARIABLECOST												
					,	XM.FIXEDCOST												
					,	CA.XNUMBER													
					,	XM.MANUFACTURENUMBER										
					,	XM.ETMHOUR													
					,   CA.CLAIMDATE												
					,	CA.CLAIMDESC												
					,	CA.PROGRESSDESC																							
					,	PTD.DICTIONARYNAME					
					,	RU.USERNAME							
					,	CTD.DICTIONARYNAME		
					,	XM.STATEDESC												
					,	XM.RESPONSEDESC		
					,	DF.PROGRESSSTATE		
					,	DCD.DICTIONARYNAME
					,	DC.CODENAME
					,	CAP.TEAMID
					,	CAP.DEFECTTYPE
					,	CAP.REASONTEAMID
					,	CAP.REASONTYPE
					,	CAP.DESCRIPTION
					,	CAP.REASONDESC
					,	CAP.ACTIONDESC
					,	CAP.DOCSEQUENCE
					,	CAP.ACTIONDATE										
				ORDER BY 
						CA.DOCID
					,	CAST (CA.PUBLISHDATE AS DATE);
			]]>
		</statement>
	</query>
	<!--
	프 로 그 램 명	: 품질관리 > 클레임관리 > 시정예방조치서 발행대장 - 현황조회
	설		명	: 시정예방조치서 발행대장 현황을 조회한다.(시정예방조치서 - 진행현황 동시 출력)
	생	성	자	: 이준용
	생	성	일	: 2020-10-13
	수  정   이  력	: ★ 쿼리 변경시 "SelectClaimManager" 확인필요
				: UCK라이브 DB에서 조회오류 발생 Helpdesk[0000260]
				  version 00001 쿼리 내용중 GROUP BY => MAX로 변경
				  2021-05-07 정송은 회담희망일 발행완료일자 +15일로 수정
	-->
		<query id="SelectClaimManagerStatus" version="00002">
		<statement>
			<![CDATA[
				--
				-- Id : SelectClaimManagerStatus
				-- Version : 00002
				SELECT 
						MAX(CA.DOCID)												AS	DOCID						-- 발행번호
					,	MAX(CA.CLAIMNUMBER)											AS	CLAIMNUMBER					-- Claim No
					,	CASE WHEN DF.DEFECTNOTICECOUNT IS NULL 
							 THEN 0 
							 ELSE DF.DEFECTNOTICECOUNT END							AS	DEFECTNOTICECOUNT		-- 불량통지건수
					,	MAX(CONVERT(DATE, CA.PUBLISHDATE))							AS	PUBLISHDATE				-- 발행일자
					,	MAX(CA.DEFECTDOCID) 										AS	DEFECTDOCID				-- 불량통지서 발행번호
					,	MAX(CA.PROGRESSSTATE)										AS	PROGRESSSTATE			-- 진행상태(코드)
					,	MAX(CDD.DICTIONARYNAME)										AS 	PROGRESSSTATENAME		-- 진행상태(명)
					,	MAX(CA.CUSTOMERID)											AS	CUSTOMERID				-- 고객사 ID
					,	MAX(CU.CUSTNAME)											AS 	CUSTOMERNAME			-- 고객사명					 
					,	MAX(XM.MODELID)												AS	MODELID					-- 기종
					,	MAX(ISNULL(MCD.DICTIONARYNAME, MC.CODENAME))				AS	MODELNAME				-- 기종명
					,	MAX(ISNULL(TRD.DICTIONARYNAME, TRC.CODENAME))				AS	TROUBLETYPE				-- 문제유형
					,	MAX(CA.CLAIMTYPE)											AS	CLAIMTYPE				-- Claim 구분
					,	MAX(CA.REQDEPARTMENTID)										AS	REQDEPARTMENTID			-- 요청부서
					,	MAX(ISNULL(DPD.DICTIONARYNAME, DP.CODENAME))				AS	REQDEPARTMENTNAME		-- 요청부서명
					,	MAX(CA.REQUSER)												AS	REQUSER					-- 요청자ID
					,	MAX(U.USERNAME)												AS	REQUSERNAME				-- 요청자명
					,	MAX(CA.PUBLISHTYPE)											AS	PUBLISHTYPE				-- 발행구분
				--	,	MAX(CONVERT(DATETIME, CA.REQCONFDATE)) 						AS 	REQCONFDATE				-- 회담희망일
					,	MAX(DATEADD(dd, 15, CONVERT(DATE, CA.COMPLETEDATE)))     AS  REQCONFDATE             -- 회담희망일
					,	MAX(CA.RECIEPTDATE)											AS	RECIEPTDATE				-- Claim 접수일
					,	MAX(CA.COMPLETEDATE)										AS	COMPLETEDATE			-- 발행완료일
					,	MAX(CA.COMPLETEDAY)											AS	COMPLETEDAY				-- 발행소요일
					,	MAX(CA.ACTIONDATE)											AS	ACTIONDATE				-- 조치완료일
					,	MAX(CA.ACTIONDAY)											AS	ACTIONDAY				-- 조치소요일
					,	MAX(CONVERT(DATETIME, CA.INDATE)) 							AS 	INDATE					-- 제품입고일자
					,	MAX(CA.CONFIRMUSER)											AS	CONFIRMUSER				-- 입고확인자	
					,	MAX(CA.RESPONSEDATE)										AS	RESPONSEDATE			-- 현장대응소요일
					,	MAX(CA.DESCRIPTION)											AS	DESCRIPTION				-- 비고사항	
					,	XM.VARIABLECOST												AS	VARIABLECOST			-- 변동비	
					,	XM.FIXEDCOST												AS	FIXEDCOST				-- 고정비	
					,	MAX(CA.XNUMBER)												AS	XNUMBER					-- X번호
					,	MAX(XM.MANUFACTURENUMBER)									AS	MANUFACTURENUMBER		-- 제조번호(S/N)
					,	XM.ETMHOUR													AS	ETMHOUR					-- 사용시간(ETM)
					,   MAX(CA.CLAIMDATE)											AS	CLAIMDATE				-- Claim 발생일
					,	MAX(CA.CLAIMDESC)											AS	CLAIMDESC				-- Claim 내용
					,	MAX(CA.PROGRESSDESC)										AS	PROGRESSDESC			-- 진행사항						
					,	NULL 														AS	ISMODIFIEDFILE 			-- 파일수정여부
					,	MAX(PTD.DICTIONARYNAME)										AS	PUBLISHTYPENAME			-- 발행구분명
					,	MAX(RU.USERNAME)											AS	REQUSERNAME				-- 요청자명
					,	MAX(CTD.DICTIONARYNAME)										AS	CLAIMTYPENAME			-- Claim 구분명
					,	STRING_AGG(ISNULL(TCD.DICTIONARYNAME, TC.CODENAME), ',')	AS	TEAMS 					-- 조치팀
					,	MAX(XM.STATEDESC)											AS	STATEDESC				-- 현상
					,	MAX(XM.RESPONSEDESC)										AS	RESPONSEDESC			-- 대응
					,	MAX(DF.PROGRESSSTATE)										AS	DEFECTPROGRESSSTATE		-- 불량통지서 진행상태 코드
					,	MAX(ISNULL(DCD.DICTIONARYNAME, DC.CODENAME))				AS	DEFECTPROGRESSSTATENAME	-- 불량통지서 진행상태 코드명
					,	CAP.TEAMID													AS	TEAMID
					,	CAP.DEFECTTYPE												AS	DEFECTTYPE		
					,	CAP.REASONTEAMID											AS	REASONTEAMID
					,	CAP.REASONTYPE												AS	REASONTYPE
					,	CAP.DESCRIPTION 											AS	PROGRESSDESC
					,	CAP.REASONDESC												AS	REASONDESC
					,	CAP.ACTIONDESC												AS	ACTIONDESC
					,	CAP.DOCSEQUENCE												AS	DOCSEQUENCE
					,	CAP.ACTIONDATE												AS	ACTIONDATE
				FROM	UL_CAPA						CA
				LEFT OUTER JOIN UL_CAPADTL			CAP ON CAP.DOCID = CA.DOCID
				LEFT OUTER JOIN	UL_XMANAGE			XM	ON	XM.XNUMBER = CA.XNUMBER	
				LEFT OUTER JOIN
								(
									SELECT 
											CLAIMNUMBER
										,	PROGRESSSTATE
										,	COUNT(DOCID)		AS DEFECTNOTICECOUNT
									FROM	UL_DEFECT
									WHERE	ISNULL(CLAIMNUMBER, '') <> ''
									GROUP BY 
											CLAIMNUMBER	
										,	PROGRESSSTATE								
								)					DF	ON	DF.CLAIMNUMBER = CA.CLAIMNUMBER	
				LEFT OUTER JOIN (
									SELECT	 *
									--FROM	[UCKERP].[UCK200312].[dbo].[uck_VIEW_Cust]
									FROM	[UCKERP].[$!{DBLINKNAME}].[dbo].[uck_VIEW_Cust]
									WHERE	1 = 1
								)					CU	ON	CONVERT(VARCHAR(50), CU.CUSTSEQ) = CA.CUSTOMERID
				LEFT OUTER JOIN SF_CODE 			CD 	ON 	CD.CODEID = CA.PROGRESSSTATE
														AND CD.CODECLASSID = 'ProgressState'
				LEFT OUTER JOIN SF_DICTIONARY 		CDD ON 	CDD.DICTIONARYID = CD.DICTIONARYID
														AND CDD.LANGUAGETYPE = '$!{LANGUAGETYPE}'
				LEFT OUTER JOIN SF_CODE				DC	ON	DC.CODEID = DF.PROGRESSSTATE
														AND DC.CODECLASSID = 'DefectProcessState'
				LEFT OUTER JOIN SF_DICTIONARY		DCD	ON	DCD.DICTIONARYID = DC.DICTIONARYID
														AND DCD.LANGUAGETYPE = '$!{LANGUAGETYPE}'
				LEFT OUTER JOIN SF_CODE				PTC	ON	PTC.CODEID = CA.PUBLISHTYPE
														AND PTC.CODECLASSID = 'PublishType'
				LEFT OUTER JOIN SF_DICTIONARY		PTD ON	PTD.DICTIONARYID = PTC.DICTIONARYID
														AND PTD.LANGUAGETYPE = '$!{LANGUAGETYPE}'
				LEFT OUTER JOIN SF_USER				RU	ON	RU.USERID = CA.REQUSER
				LEFT OUTER JOIN SF_CODE				CTC	ON	CTC.CODEID = CA.CLAIMTYPE
														AND CTC.CODECLASSID = 'ClaimType'
				LEFT OUTER JOIN SF_DICTIONARY		CTD ON	CTD.DICTIONARYID = CTC.DICTIONARYID
														AND CTD.LANGUAGETYPE = '$!{LANGUAGETYPE}'
				LEFT OUTER JOIN UL_CAPADTL			CAD ON	CAD.DOCID = CA.DOCID
				LEFT OUTER JOIN SF_CODE				TC	ON	TC.CODEID = CAD.TEAMID
														AND	TC.CODECLASSID = 'TeamCodeQc'
				LEFT OUTER JOIN SF_DICTIONARY		TCD ON	TCD.DICTIONARYID = TC.DICTIONARYID
														AND TCD.LANGUAGETYPE = '$!{LANGUAGETYPE}'
				LEFT OUTER JOIN SF_CODE				DP	ON	DP.CODEID = CA.REQDEPARTMENTID
														AND DP.CODECLASSID = 'TeamCodeQc'
				LEFT OUTER JOIN SF_DICTIONARY		DPD ON	DPD.DICTIONARYID = DP.DICTIONARYID
														AND DPD.LANGUAGETYPE = '$!{LANGUAGETYPE}'
				LEFT OUTER JOIN SF_CODE				MC	ON	MC.CODEID = XM.MODELID
														AND MC.CODECLASSID = 'ModelCode'
				LEFT OUTER JOIN SF_DICTIONARY		MCD	ON	MCD.DICTIONARYID = MC.DICTIONARYID
														AND MCD.LANGUAGETYPE = '$!{LANGUAGETYPE}'
				LEFT OUTER JOIN SF_CODE				TRC	ON	TRC.CODEID = XM.TROUBLETYPE
														AND TRC.CODECLASSID  = 'TrobleType'
				LEFT OUTER JOIN SF_DICTIONARY		TRD	ON	TRD.DICTIONARYID = TRC.DICTIONARYID
														AND TRD.LANGUAGETYPE = '$!{LANGUAGETYPE}'
				LEFT OUTER JOIN SF_USER				U	ON	U.USERID = CA.REQUSER
				WHERE	1 = 1
				
				-- 발행일자 조회조건
				AND		CA.PUBLISHDATE BETWEEN CONVERT(DATE, '$!{P_DATEPERIOD_PERIODFR}')
									   AND	   CONVERT(DATE, '$!{P_DATEPERIOD_PERIODTO}')
									  
				--AND		CA.PUBLISHDATE >= (SELECT VALUE FROM ufn_selectStringToSplit('$!{P_DATEPERIOD}', ',') WHERE SEQUENCE = '1')
				--AND		CA.PUBLISHDATE <= (SELECT VALUE FROM ufn_selectStringToSplit('$!{P_DATEPERIOD}', ',') WHERE SEQUENCE = '2')
				
				-- Claim 구분 조회조건
				#if ("$!{P_CLAIMTYPE}" != "*")
					AND 	CA.CLAIMTYPE = '$!{P_CLAIMTYPE}'
				#end
				
				-- 진행상태 조회조건
				#if ("$!{P_PROCESSSTATECODE}" != "*")
					AND 	CA.PROGRESSSTATE = '$!{P_PROCESSSTATECODE}'
				#end
				
				GROUP BY
						CA.DOCID											
					--,	CA.CLAIMNUMBER												
					,	DF.DEFECTNOTICECOUNT
					,	CONVERT(DATE, CA.PUBLISHDATE)	
					--,	CA.DEFECTDOCID 									   		 	
					--,	CA.PROGRESSSTATE											
					--,	CDD.DICTIONARYNAME	
					--,	CA.CUSTOMERID												
					--,	CU.CUSTNAME												 
					--,	XM.MODELID	
					--,	MCD.DICTIONARYNAME
					--,	MC.CODENAME		
					--,	TRD.DICTIONARYNAME
					--,	TRC.CODENAME									
					--,	CA.CLAIMTYPE												
					--,	CA.REQDEPARTMENTID
					--,	DPD.DICTIONARYNAME
					--,	DP.CODENAME										
					--,	CA.REQUSER	
					--,	U.USERNAME												
					--,	CA.PUBLISHTYPE												
					--,	CONVERT(DATETIME, CA.REQCONFDATE) 	
					--,	CA.RECIEPTDATE												
					--,	CA.COMPLETEDATE												
					--,	CA.COMPLETEDAY												
					--,	CA.ACTIONDATE											
					--,	CA.ACTIONDAY												
					--,	CONVERT(DATETIME, CA.INDATE) 
					--,	CA.CONFIRMUSER													
					--,	CA.RESPONSEDATE												
					--,	CA.DESCRIPTION													
					,	XM.VARIABLECOST												
					,	XM.FIXEDCOST												
					--,	CA.XNUMBER													
					--,	XM.MANUFACTURENUMBER										
					,	XM.ETMHOUR													
					--,   CA.CLAIMDATE												
					--,	CA.CLAIMDESC												
					--,	CA.PROGRESSDESC																							
					--,	PTD.DICTIONARYNAME					
					--,	RU.USERNAME							
					--,	CTD.DICTIONARYNAME		
					--,	XM.STATEDESC												
					--,	XM.RESPONSEDESC		
					--,	DF.PROGRESSSTATE		
					--,	DCD.DICTIONARYNAME
					--,	DC.CODENAME
					,	CAP.TEAMID
					,	CAP.DEFECTTYPE
					,	CAP.REASONTEAMID
					,	CAP.REASONTYPE
					,	CAP.DESCRIPTION
					,	CAP.REASONDESC
					,	CAP.ACTIONDESC
					,	CAP.DOCSEQUENCE
					,	CAP.ACTIONDATE										
				ORDER BY 
						CA.DOCID
					,	CAST (CA.PUBLISHDATE AS DATE);
			]]>
		</statement>
	</query>
	
	<!--
	프 로 그 램 명	: 품질관리 > 클레임관리 > 시정예방조치서 발행대장
	설		명	: 시정예방조치서 발행대장의 발행번호별 팀조치정보를 조회한다.
	생	성	자	: 유태근
	생	성	일	: 2020-05-12
	수  정   이  력	: ★ 쿼리 변경시 "SelectClaimManagerStatus" 수정필요
	-->
	<query id="GetTeamActionInfo" version="00001">
		<statement>
			<![CDATA[
				--
				-- Id : GetTeamActionInfo
				-- Version : 00001
				SELECT 
						TEAMID							-- 해당팀
					,	DEFECTTYPE 						-- 불량구분
					,	REASONTEAMID 					-- 원인팀
					,	REASONTYPE						-- 원인구분
					,	DESCRIPTION AS	PROGRESSDESC	-- 진행사항
					,	REASONDESC 						-- 원인
					,	ACTIONDESC						-- 대책
					,	DOCID							-- 발행번호
					,	DOCSEQUENCE 					-- 발행시퀀스
					,	ACTIONDATE						-- 대책완료일자
				FROM	UL_CAPADTL
				WHERE 	DOCID = '$!{DOCID}'
			]]>
		</statement>
	</query>
	<!--
	프 로 그 램 명	: 
	설		명	: 
	생	성	자	: 
	생	성	일	: 
	수  정   이  력	: 
	-->
	<query id="SearchPumpTimeData" version="00001">
		<statement>
			<![CDATA[
				--
				-- Id : SearchPumpTimeData
				-- Version : 00001
				SELECT MEASURETIME
				    ,  SUPPLYVALUE
					,  RETURNVALUE
					,  TWOTEMPVALUE
					,  TCVALUE
					,  VACVALUE
				FROM CT_PUMPREPORTTIMEDATA
				WHERE LOTID =  '$!{LOTID}'
				ORDER BY DISPLAYSEQUENCE
			]]>
		</statement>
	</query>

	<!--
	프 로 그 램 명	: 냉동기 검사실적 조회
	설		명	: 성능검사 측정 정보 데이터 조회
	생	성	자	: 
	생	성	일	: 
	수  정   이  력	: 2021-03-05 정송은 ORDER BY 절 추가
	-->
	<query id="SearchRepTimeData" version="00001">
		<statement>
			<![CDATA[
				--
				-- Id : SearchRepTimeData
				-- Version : 00001
				
				
				SELECT *
				FROM (
					SELECT MEASURETIME
						, CASE WHEN MEASURETIME = '0' THEN 1
					       WHEN MEASURETIME = '15Min' THEN 4 
						   WHEN MEASURETIME = '30Min' THEN 3
						   ELSE 2 END AS FLAG
					    ,  FIRSTSTAGE_SPEC
						,  FIRSTSTAGE_TEMPERATURE
						,  SECONDSTAGE_SPEC
						,  SECONDSTAGE_TEMPERATURE
						,  COMPRESSOR_SUP
						,  COMPRESSOR_RET
						,  CHAMBER_PRESSURE
					FROM CT_REFRIGERATORREPORTTIMEDATA
					WHERE LOTID = '$!{LOTID}'
				)A
				ORDER BY A.FLAG
				
			]]>
		</statement>
	</query>
	
	<!--
	프 로 그 램 명	: 
	설		명	: 
	생	성	자	: 
	생	성	일	: 
	수  정   이  력	: 2020-09-23 | 이준용 | 중량차이 소수점 반올림
				: 2020-11-05 | 이준용 | 실린더LotId 조회 누락 처리 (조인 조건 'SGM009' 추가)
				: 2021-04-08 | 정송은 | 엑셀 다운로드 시 필드 계산 안되는 이슈로 숫자 컬럼 CONVERT 추가
	-->
	<query id="SearchRepInspectionResult" version="00001">
		<statement>
			<![CDATA[
				--
				-- Id : SearchRepInspectionResult
				-- Version : 00001
				
				DECLARE @FROM VARCHAR(50) 
				DECLARE @TO VARCHAR(50) 
				DECLARE @LOTID VARCHAR(50) = '$!{LOTID}'
			
			--	SET @FROM = '$!{FROM}' + ' 00:00:00'
			--	SET @TO =   '$!{TO}' + ' 23:59:59'
				
				SELECT * INTO #TMP_BASIC
				FROM
				(
					SELECT CONVERT(DATE, CR.INSPECTDATE,23)   INSPECTIONDATE
						,  PD.PRODUCTDEFID 
						,  PD.PARTNUMBER
						,  PD.PRODUCTDEFNAME 
						,  ISNULL(SD1.DICTIONARYNAME ,SC1.CODENAME) MODELNAME
						,  PD.STANDARD 
						,  CR.LOTID 
						,  ROW_NUMBER() OVER(ORDER BY CR.INSPECTDATE) RN
					FROM CT_REFRIGERATORREPORT CR 
					LEFT  JOIN SF_LOT                 L ON  CR.LOTID = L.LOTID 
					LEFT  JOIN SF_PRODUCTDEFINITION  PD ON  L.PRODUCTDEFID  = PD.PRODUCTDEFID
					LEFT  JOIN SF_CODE              SC1 ON  PD.MODELID = SC1.CODEID 
														AND SC1.CODECLASSID  = 'ModelCode'
					LEFT  JOIN SF_DICTIONARY        SD1 ON  SC1.DICTIONARYID  = SD1.DICTIONARYID 
														AND SD1.LANGUAGETYPE  = 'ko-KR'
					WHERE 1=1
					AND   CONVERT(DATE,CR.INSPECTDATE) BETWEEN '$!{FROM}' AND '$!{TO}'
					AND   (@LOTID = '' OR (@LOTID <> '' AND CR.LOTID = @LOTID))
				)X
				;
				WITH MAT_LOT_LIST AS
				(
					SELECT TB.LOTID ,MATERIALLOTID ,1 LEV,RN
					FROM #TMP_BASIC TB
					INNER JOIN SF_CONSUMEMATERIALLOT SC ON TB.LOTID = SC.LOTID 
					UNION ALL
					SELECT CT.LOTID ,CT.MATERIALLOTID,2 LEV,RN
					FROM MAT_LOT_LIST L
					INNER JOIN SF_CONSUMEMATERIALLOT CT ON L.MATERIALLOTID = CT.LOTID 
				)
								, MAT_LOT_LIST_WITH_ROOT_TEMP AS
				(
					SELECT	C.CONSUMABLELOTID		AS	ORG_CONSUMABLELOTID
						,	C.PARENTCONSUMABLELOTID
						,	C.CONSUMABLELOTID
						,	1						AS	LVL
					FROM	SF_CONSUMABLELOT	C
					JOIN	MAT_LOT_LIST		M	ON	M.MATERIALLOTID = C.CONSUMABLELOTID

					UNION ALL

					SELECT
							MR.ORG_CONSUMABLELOTID
						,	CL.PARENTCONSUMABLELOTID
						,	CL.CONSUMABLELOTID
						,	MR.LVL + 1				AS	LVL
					FROM	MAT_LOT_LIST_WITH_ROOT_TEMP	MR
					JOIN	SF_CONSUMABLELOT			CL	ON	CL.CONSUMABLELOTID = MR.PARENTCONSUMABLELOTID
															AND	(CL.CONSUMABLELOTID <> CL.PARENTCONSUMABLELOTID OR CL.PARENTCONSUMABLELOTID IS NULL)
				)
				, MAT_LOT_LIST_WITH_ROOT AS
				(
					SELECT 
							ORG_CONSUMABLELOTID
						,	CONSUMABLELOTID		AS ROOT_CONSUMABLELOTID
					FROM
					(
						SELECT
								RANK() OVER (PARTITION BY ORG_CONSUMABLELOTID ORDER BY LVL DESC) AS RNK
							,	ORG_CONSUMABLELOTID
							,	CONSUMABLELOTID
						FROM	MAT_LOT_LIST_WITH_ROOT_TEMP
					) X
					WHERE	RNK = 1
				)
				SELECT * INTO #MAT_LOT_LIST
				FROM
				(
					SELECT TB.RN
						,  MAX(TB.LOTID) REP_LOTID
						,  MAX(CASE WHEN C.PROCESSSEGMENTID  = 'SGM014' THEN C.TRACKOUTTIME END) REP_TRACKOUTTIME
						,  MAX(CASE WHEN B.PROCESSSEGMENTID  = 'SGM009' THEN R.ORG_CONSUMABLELOTID END) CYLINDER_LOTID
						,  MAX(CASE WHEN B.PROCESSSEGMENTID  = 'SGM013' THEN R.ORG_CONSUMABLELOTID END) XHEAD_LOTID
						,  MAX(CASE WHEN B.PROCESSSEGMENTID  = 'SGM013' THEN B.TRACKOUTTIME END) XHEAD_TRACKOUTTIME
						,  MAX(CASE WHEN B.PROCESSSEGMENTID  = 'SGM011' AND PD.SPECDEFID  = 'SP0015' THEN R.ORG_CONSUMABLELOTID END) FIRSTDISP_LOTID
						,  MAX(CASE WHEN B.PROCESSSEGMENTID  = 'SGM011' AND PD.SPECDEFID  = 'SP0015' THEN B.TRACKOUTTIME END) FIRSTDISP_TRACKOUTTIME
						,  MAX(CASE WHEN B.PROCESSSEGMENTID  = 'SGM011' AND PD.SPECDEFID  = 'SP0016' THEN R.ORG_CONSUMABLELOTID END) SECONDDISP_LOTID
						,  MAX(CASE WHEN B.PROCESSSEGMENTID  = 'SGM011' AND PD.SPECDEFID  = 'SP0016' THEN B.TRACKOUTTIME END) SECONDDISP_TRACKOUTTIME
					FROM #TMP_BASIC TB
					LEFT  JOIN MAT_LOT_LIST           A ON TB.LOTID = A.LOTID
					LEFT  JOIN MAT_LOT_LIST_WITH_ROOT R ON  A.MATERIALLOTID = R.ORG_CONSUMABLELOTID 
					LEFT  JOIN SF_LOT                 B ON   R.ROOT_CONSUMABLELOTID = B.LOTID AND B.PROCESSSEGMENTID  IN ('SGM014','SGM011','SGM013', 'SGM009')
					LEFT  JOIN SF_LOT                 C ON  A.LOTID = C.LOTID
					LEFT  JOIN SF_PRODUCTDEFINITION  PD ON  B.PRODUCTDEFID  = PD.PRODUCTDEFID 
					WHERE 1=1
					--AND   B.PROCESSSEGMENTID  IN ('SGM014','SGM011','SGM013')
					GROUP BY TB.RN
				)X
				SELECT * INTO #MAT_INFO_LIST
				FROM
				(
					SELECT 
						   LL.REP_LOTID                                                                            REP_LOTID
					    ,  MAX(LL.CYLINDER_LOTID)                                                                  CYLINDER_LOTID
						,  MAX(CONVERT(DATE,RR.INSPECTDATE,23))                                                    INSPECTDATE 
						,  MAX(RR.TESTNO)                                                                          TESTNO
						,  MAX(RR.COOLINGTIME)                                                                     COOLINGTIME 
						,  MAX(CASE WHEN RT.MEASURETIME           = '50Min' THEN RT.FIRSTSTAGE_TEMPERATURE  END)   FIRSTSTAGE_TEMPERATURE_VT --1단 열부하 수직방향온도
						,  MAX(CASE WHEN RT.MEASURETIME           = '50Min' THEN RT.SECONDSTAGE_TEMPERATURE END)   SECONDSTAGE_TEMPERATURE_VT --2단 열부하 수직방향온도
						,  MAX(CASE WHEN RT.MEASURETIME           = '30Min' THEN RT.FIRSTSTAGE_TEMPERATURE  END)   FIRSTSTAGE_TEMPERATURE_HO --1단 열부하 수평방향온도
						,  MAX(CASE WHEN RT.MEASURETIME           = '30Min' THEN RT.SECONDSTAGE_TEMPERATURE END)   SECONDSTAGE_TEMPERATURE_HO --2단 열부하 수평방향온도
						,  MAX(CASE WHEN RT.MEASURETIME           = '15Min' THEN RT.FIRSTSTAGE_TEMPERATURE  END)   FIRSTSTAGE_TEMPERATURE_FINAL --1단 열부하 Final 온도
						,  MAX(CASE WHEN RT.MEASURETIME           = '15Min' THEN RT.SECONDSTAGE_TEMPERATURE END)   SECONDSTAGE_TEMPERATURE_FINAL --2단 열부하 Final 온도
						,  MAX(CASE WHEN RT.MEASURETIME           = '15Min' THEN RT.COMPRESSOR_SUP          END)   COMPRESSOR_SUP         --Supply 고압(MPa)
						,  MAX(CASE WHEN RT.MEASURETIME           = '15Min' THEN RT.COMPRESSOR_RET          END)   COMPRESSOR_RET         --Return 저압(MPa)
						,  MAX(CASE WHEN RT.MEASURETIME           = '15Min' THEN RT.CHAMBER_PRESSURE        END)   CHAMBER_PRESSURE       --진공도(Pa)
						,  MAX(RR.MOTORSTALL_POWER)                                                                MOTORSTALL_POWER       --모터 Stall 전압
						,  MAX(CONVERT(VARCHAR,LL.XHEAD_TRACKOUTTIME,23))                                          XHEAD_TRACKOUTTIME 
						,  MAX(LL.XHEAD_LOTID)                                                                     XHEAD_LOTID 
						,  MAX(CASE WHEN SD1.PARAMETERID          = 'IT00002' THEN SD1.MEASUREVALUE  END)          WEIGHTTEST             --하중Test(N)
						,  MAX(CASE WHEN SD1.PARAMETERID          = 'IT00003' THEN SD1.MEASUREVALUE  END)          REGISTERAB             --저항A-B(Ω)
						,  MAX(CASE WHEN SD1.PARAMETERID          = 'IT00004' THEN SD1.MEASUREVALUE  END)          REGISTERBC             --저항B-C(Ω)
						,  MAX(CASE WHEN SD1.PARAMETERID          = 'IT00007' THEN SD1.MEASUREVALUE  END)          MOTORROTATION          --Motor회전방향
						,  MAX(CASE WHEN SD1.PARAMETERID          = 'IT00005' THEN SD1.MEASUREVALUE  END)          DISCON                 --절연(MΩ)
						,  MAX(CONVERT(VARCHAR,LL.FIRSTDISP_TRACKOUTTIME,23))                                      FIRSTDISP_TRACKOUTTIME    
						,  MAX(LL.FIRSTDISP_LOTID)                                                                 FIRSTDISP_LOTID   
						,  MAX(CASE WHEN SW2.SUBPROCESSSEGMENTID  = 'SGS011'  THEN SW2.WORKSTARTTIME END)          DRYSTARTTIME           --건조시작일
						,  MAX(CASE WHEN SD2.PARAMETERID          = 'IT00055' THEN SD2.MEASUREVALUE  END)          BEFORDRYWEIGHT                 --건조전 중량(g)
						,  MAX(CASE WHEN SW2.SUBPROCESSSEGMENTID  = 'SGS011'  THEN SW2.WORKENDTIME   END)          DRYENDTIME           --건조완료일
						,  MAX(CASE WHEN SD2.PARAMETERID          = 'IT00058' THEN SD2.MEASUREVALUE  END)          AFTERDRYWEIGHT                 --건조후 중량(g)
						--중량차이 추가
						,  MAX(CONVERT(VARCHAR,REP_TRACKOUTTIME,23))                                               REP_TRACKOUTTIME
						,  MAX(CASE WHEN SD3.PARAMETERID          = 'IT00021' THEN SD3.MEASUREVALUE  END)          ADDMACHININGWT    --추가가공후 중량(g)
						,  MAX(CASE WHEN SD3.PARAMETERID          = 'IT00022' THEN SD3.MEASUREVALUE  END)          D1MIN             --D1 MIN(mm)
						,  MAX(CASE WHEN SD3.PARAMETERID          = 'IT00023' THEN SD3.MEASUREVALUE  END)          D1MAX             --D1 MAX(mm)
						,  MAX(CASE WHEN SD3.PARAMETERID          = 'IT00024' THEN SD3.MEASUREVALUE  END)          D2MIN             --D2 MIN(mm)
						,  MAX(CASE WHEN SD3.PARAMETERID          = 'IT00025' THEN SD3.MEASUREVALUE  END)          D2MAX             --D2 MAX(mm)
						,  MAX(CASE WHEN SD3.PARAMETERID          = 'IT00026' THEN SD3.MEASUREVALUE  END)          D3MIN             --D3 MIN(mm)
						,  MAX(CASE WHEN SD3.PARAMETERID          = 'IT00027' THEN SD3.MEASUREVALUE  END)          D3MAX             --D3 MAX(mm)
						,  MAX(LL.SECONDDISP_LOTID)                                                                SECONDDISP_LOTID
						,  MAX(CONVERT(VARCHAR,LL.SECONDDISP_TRACKOUTTIME,23))                                     SECONDDISP_TRACKOUTTIME 
						,  MAX(CASE WHEN SW4.SUBPROCESSSEGMENTID  = 'SGS011'  THEN SW4.WORKSTARTTIME END)          SECOND_DRYSTARTTIME           --건조시작일
						,  MAX(CASE WHEN SD4.PARAMETERID          = 'IT00055' THEN SD4.MEASUREVALUE  END)          SECOND_BEFORDRYWEIGHT                 --건조전 중량(g)
						,  MAX(CASE WHEN SW4.SUBPROCESSSEGMENTID  = 'SGS011'  THEN SW4.WORKENDTIME   END)          SECOND_DRYENDTIME           --건조완료일
						,  MAX(CASE WHEN SD4.PARAMETERID          = 'IT00058' THEN SD4.MEASUREVALUE  END)          SECOND_AFTERDRYWEIGHT                 --건조후 중량(g)    
						--중량차이(G)
						,  MAX(CASE WHEN SD3.PARAMETERID          = 'IT00029' THEN SD3.MEASUREVALUE  END)          SECONDD1MIN             --D1 MIN(mm)
						,  MAX(CASE WHEN SD3.PARAMETERID          = 'IT00030' THEN SD3.MEASUREVALUE  END)          SECONDD1MAX             --D1 MAX(mm)
						,  MAX(CASE WHEN SD3.PARAMETERID          = 'IT00031' THEN SD3.MEASUREVALUE  END)          SECONDD2MIN             --D2 MIN(mm)
						,  MAX(CASE WHEN SD3.PARAMETERID          = 'IT00032' THEN SD3.MEASUREVALUE  END)          SECONDD2MAX             --D2 MAX(mm)    
					FROM  #MAT_LOT_LIST LL
					LEFT JOIN CT_REFRIGERATORREPORT          RR ON  LL.REP_LOTID = RR.LOTID
					LEFT JOIN CT_REFRIGERATORREPORTTIMEDATA  RT ON  RR.LOTID = RT.LOTID
																AND RR.INSPECTIONDEGREE  = RT.INSPECTIONDEGREE
					LEFT JOIN UL_SUBPROCESSWORKRESULT       SW1 ON  LL.XHEAD_LOTID = SW1.LOTID 
					LEFT JOIN UL_SUBPROCESSWORKRESULTDETAIL SD1 ON  SW1.TXNHISTKEY  = SD1.WORKRESULTHISTKEY 
																AND SD1.PARAMETERID  IN ('IT00002','IT00003','IT00004','IT00007','IT00005') 
					LEFT JOIN UL_SUBPROCESSWORKRESULT       SW2 ON  LL.FIRSTDISP_LOTID = SW2.LOTID 
					LEFT JOIN UL_SUBPROCESSWORKRESULTDETAIL SD2 ON  SW2.TXNHISTKEY  = SD2.WORKRESULTHISTKEY 
																AND SD2.PARAMETERID  IN ('IT00055','IT00058')
					LEFT JOIN UL_SUBPROCESSWORKRESULT       SW3 ON  LL.REP_LOTID = SW3.LOTID 
					LEFT JOIN UL_SUBPROCESSWORKRESULTDETAIL SD3 ON  SW3.TXNHISTKEY  = SD3.WORKRESULTHISTKEY 
																AND SD3.PARAMETERID IN ('IT00021','IT00022','IT00023','IT00024','IT00025','IT00026','IT00027','IT00029','IT00030','IT00031','IT00032')
					LEFT JOIN UL_SUBPROCESSWORKRESULT       SW4 ON  LL.SECONDDISP_LOTID = SW4.LOTID 
					LEFT JOIN UL_SUBPROCESSWORKRESULTDETAIL SD4 ON  SW4.TXNHISTKEY  = SD4.WORKRESULTHISTKEY 
																AND SD4.PARAMETERID  IN ('IT00055','IT00058')
					GROUP BY LL.REP_LOTID    
				)X
				SELECT INSPECTIONDATE                                      -- 펌프성능검사일
					,  PRODUCTDEFID                                        -- 품목코드
					,  PARTNUMBER
					,  PRODUCTDEFNAME                                      -- 품목명
					,  MODELNAME                                           -- 기종
					,  STANDARD                                            -- 도면번호
				--	,  REP_LOTID   LOTID                                    -- 냉동기 S/N
                    ,  A.LOTID                                              -- 냉동기 S/N
                    ,  CYLINDER_LOTID                                      -- 실린더 lotid 				
					,  INSPECTDATE                                         -- 냉동기검사일자
					,  TESTNO                                              -- 검사라인
					,  COOLINGTIME                                         -- 20K 냉각시간(분) 
					,  CASE WHEN FIRSTSTAGE_TEMPERATURE_VT = '-' THEN 0
							ELSE CONVERT(float, FIRSTSTAGE_TEMPERATURE_VT) END AS FIRSTSTAGE_TEMPERATURE_VT         -- 1단 열부하 수직방향온도
					,  CASE WHEN SECONDSTAGE_TEMPERATURE_VT = '-' THEN 0
							ELSE CONVERT(float, SECONDSTAGE_TEMPERATURE_VT) END AS SECONDSTAGE_TEMPERATURE_VT       -- 2단 열부하 수직방향온도
					,  CASE WHEN FIRSTSTAGE_TEMPERATURE_HO = '-' THEN 0
							ELSE CONVERT(float, FIRSTSTAGE_TEMPERATURE_HO) END AS FIRSTSTAGE_TEMPERATURE_HO         -- 1단 열부하 수평방향온도
					,  CASE WHEN SECONDSTAGE_TEMPERATURE_HO = '-' THEN 0
							ELSE CONVERT(float, SECONDSTAGE_TEMPERATURE_HO) END AS SECONDSTAGE_TEMPERATURE_HO       -- 2단 열부하 수평방향온도
					,  CASE WHEN FIRSTSTAGE_TEMPERATURE_FINAL = '-' THEN 0
							ELSE CONVERT(float, FIRSTSTAGE_TEMPERATURE_FINAL) END AS FIRSTSTAGE_TEMPERATURE_FINAL             -- 1단 열부하 Final 온도
					,  CASE WHEN SECONDSTAGE_TEMPERATURE_FINAL = '-' THEN 0
							ELSE CONVERT(float, SECONDSTAGE_TEMPERATURE_FINAL) END AS SECONDSTAGE_TEMPERATURE_FINAL           -- 2단 열부하 Final 온도
					,  CONVERT(float, COMPRESSOR_SUP) AS COMPRESSOR_SUP		                                    -- Supply 고압(MPa)
					,  CONVERT(float, COMPRESSOR_RET) AS COMPRESSOR_RET                                         -- Return 저압(MPa)
					,  CHAMBER_PRESSURE                                    -- 진공도(Pa)
					,  CONVERT(float, MOTORSTALL_POWER) AS MOTORSTALL_POWER                                     -- 모터 Stall 전압
					--X-HEAD 공정실적--						                
					,  XHEAD_TRACKOUTTIME                                  -- XHEAD 생산일자 
					,  XHEAD_LOTID                                         -- XHAD LOT번호 
					,  CONVERT(int, WEIGHTTEST) AS WEIGHTTEST                                          -- 하중Test(N)
					,  CONVERT(float, REGISTERAB) AS REGISTERAB                                        -- 저항A-B(Ω)
					,  CONVERT(float, REGISTERBC) AS REGISTERBC                                        -- 저항B-C(Ω)
					,  MOTORROTATION                                       -- Motor회전방향
					,  CONVERT(int, DISCON) AS DISCON                                                  -- 절연(MΩ)
					-- 1단 디스플레이서--					  	               
					,  FIRSTDISP_TRACKOUTTIME                              -- 1단디스플레이서 생산일자 
					,  FIRSTDISP_LOTID                                     -- 1단디스플레이서 LOTID
					,  DRYSTARTTIME                                        -- 건조시작일
					,  CONVERT(float, ISNULL(BEFORDRYWEIGHT,'0')) AS BEFORDRYWEIGHT           -- 건조전 중량(g)
					,  DRYENDTIME                                          -- 건조완료일
					,  CONVERT(float, ISNULL(AFTERDRYWEIGHT,'0')) AS AFTERDRYWEIGHT           -- 건조후 중량(g)	
					,  ROUND(CONVERT(REAL,ISNULL(BEFORDRYWEIGHT,'0'))
					 - CONVERT(REAL,ISNULL(AFTERDRYWEIGHT,'0')),3) WEIGHTDIFF -- 중량 차이(g)
					-- 냉동기 실적 정보
					,  REP_TRACKOUTTIME                                    -- 냉동기 생산일자
					,  CONVERT(float, ADDMACHININGWT) AS ADDMACHININGWT                       -- 추가가공후 중량(g)
					,  CONVERT(float, D1MIN) AS D1MIN                                         -- D1 MIN(mm)
					,  CONVERT(float, D1MAX) AS D1MAX                                         -- D1 MAX(mm)
					,  CONVERT(float, D2MIN) AS D2MIN                                         -- D2 MIN(mm)
					,  CONVERT(float, D2MAX) AS D2MAX                                         -- D2 MAX(mm)
					,  CONVERT(float, D3MIN) AS D3MIN                                         -- D3 MIN(mm)
					,  CONVERT(float, D3MAX) AS D3MAX                                         -- D3 MAX(mm)
					-- 디스플레이서 조립 실적(2단)
					,  SECONDDISP_LOTID                                    -- 2단 디스플레이서 조립 LOT
					,  SECONDDISP_TRACKOUTTIME                             -- 2단디스플레이서생산일자
					,  SECOND_DRYSTARTTIME                                 -- 건조시작일 
					,  CONVERT(float, SECOND_BEFORDRYWEIGHT) AS SECOND_BEFORDRYWEIGHT                           -- 건조전 중
					,  SECOND_DRYENDTIME                                   -- 건조완료일
					,  CONVERT(float, SECOND_AFTERDRYWEIGHT) AS SECOND_AFTERDRYWEIGHT                           -- 건조후 중
					,  ROUND(CONVERT(REAL,ISNULL(SECOND_BEFORDRYWEIGHT,'0'))
					 - CONVERT(REAL,ISNULL(SECOND_AFTERDRYWEIGHT,'0')),3) SECOND_WEIGHTDIFF -- 중량 차이(g)
					,  CONVERT(float, SECONDD1MIN) AS SECONDD1MIN                                               -- D1 MIN(mm)
					,  CONVERT(float, SECONDD1MAX) AS SECONDD1MAX                                               -- D1 MAX(mm)
					,  CONVERT(float, SECONDD2MIN) AS SECONDD2MIN                                               -- D2 MIN(mm)
					,  CONVERT(float, SECONDD2MAX) AS SECONDD2MAX                                               -- D2 MAX(mm)
				FROM  #TMP_BASIC A
				LEFT JOIN  #MAT_INFO_LIST B ON A.LOTID = B.REP_LOTID
				
				
				DROP TABLE #TMP_BASIC
				DROP TABLE #MAT_INFO_LIST
				DROP TABLE #MAT_LOT_LIST
			]]>
		</statement>
	</query>
	
	<!--
	프 로 그 램 명	: 
	설		명	: 
	생	성	자	: 
	생	성	일	: 
	수  정   이  력	: 2020-09-23 | 이준용 | 중량차이 소수점 반올림
				  2021-02-19 | scmo | 온도,습도,외관온도,이상음 필드추가
				  2021-04-05 | 정송은  | 엑셀 다운로드 시 필드 계산 안되는 이슈로 숫자 컬럼 CONVERT 추가
	-->
	<query id="SearchPumpInspectionResult" version="00001">
		<statement>
			<![CDATA[
				--
				-- Id : SearchPumpInspectionResult
				-- Version : 00001
				
				DECLARE @FROM VARCHAR(50) 
				DECLARE @TO VARCHAR(50) 
				DECLARE @LOTID VARCHAR(50) = '$!{LOTID}'
			
				SET @FROM = '$!{FROM}' + ' 00:00:00'
				SET @TO =   '$!{TO}' + ' 23:59:59'
			
				SELECT * INTO #TMP_BASIC
				FROM
				(
					SELECT CONVERT(VARCHAR, CP.INSPECTIONDATE,23)   INSPECTIONDATE
						,  PD.PRODUCTDEFID 
						,  PD.PARTNUMBER
						,  PD.PRODUCTDEFNAME 
						,  ISNULL(SD1.DICTIONARYNAME ,SC1.CODENAME) MODELNAME
						,  PD.STANDARD 
						,  CP.LOTID 
						,  CP.COMPRESSORSERIALNO         --검사 라인
						,  PT.TCVALUE                    --1단 Final 온도 
						,  PT.TWOTEMPVALUE               --2단 Final 온도  
						,  PT.VACVALUE                   --도달압력(Pa)
						,  CP.TIME_20K                   --20K 도달시간(분)
						,  CP.TIME_15K                   --15K 도달시간(분)
						,  CP.TEMPERATURE				 --온도
						,  CP.HUMIDITY					 --습도
						,  CASE WHEN CP.EXTERIOR_TEMPERATURE = '' THEN '0'
								ELSE CP.EXTERIOR_TEMPERATURE END AS EXTERIOR_TEMPERATURE  --외관온도
						,  CP.NOISE						 --이상음
						,  ROW_NUMBER() OVER(ORDER BY CP.INSPECTIONDATE) RN
					FROM CT_PUMPREPORT CP
					LEFT  JOIN SF_LOT                 L ON  CP.LOTID = L.LOTID 
					LEFT  JOIN SF_PRODUCTDEFINITION  PD ON  L.PRODUCTDEFID  = PD.PRODUCTDEFID
					LEFT  JOIN SF_CODE              SC1 ON  PD.MODELID = SC1.CODEID 
														AND SC1.CODECLASSID  = 'ModelCode'
					LEFT  JOIN SF_DICTIONARY        SD1 ON  SC1.DICTIONARYID  = SD1.DICTIONARYID 
														AND SD1.LANGUAGETYPE  = 'ko-KR'
					LEFT  JOIN CT_PUMPREPORTTIMEDATA PT ON  CP.LOTID  = PT.LOTID 
														AND CP.INSPECTIONDEGREE  = PT.INSPECTIONDEGREE 
														AND PT.MEASURETIME  = 'FINAL'
					WHERE 1=1
					AND   CP.INSPECTIONDATE BETWEEN @FROM AND @TO
					AND   (@LOTID = '' OR (@LOTID <> '' AND CP.LOTID = @LOTID))
				)X
				;
				WITH MAT_LOT_LIST AS
				(
					SELECT TB.LOTID ,MATERIALLOTID ,1 LEV,RN
					FROM #TMP_BASIC TB
					INNER JOIN SF_CONSUMEMATERIALLOT SC ON TB.LOTID = SC.LOTID 
					UNION ALL
					SELECT CT.LOTID ,CT.MATERIALLOTID,2 LEV,RN
					FROM MAT_LOT_LIST L
					INNER JOIN SF_CONSUMEMATERIALLOT CT ON L.MATERIALLOTID = CT.LOTID 
				)
				SELECT * INTO #MAT_LOT_LIST
				FROM
				(
					SELECT RN
						,  MAX(CASE WHEN C.PROCESSSEGMENTID  = 'SGM016' THEN A.LOTID END) PUMP_LOTID
						,  MAX(CASE WHEN C.PROCESSSEGMENTID  = 'SGM016' THEN C.TRACKOUTTIME END) PUMP_TRACKOUTTIME
						,  MAX(CASE WHEN B.PROCESSSEGMENTID  = 'SGM014' THEN B.LOTID END) REP_LOTID
						,  MAX(CASE WHEN B.PROCESSSEGMENTID  = 'SGM014' THEN B.TRACKOUTTIME END) REP_TRACKOUTTIME
						,  MAX(CASE WHEN B.PROCESSSEGMENTID  = 'SGM009' THEN B.LOTID END) CYLINDER_LOTID
						,  MAX(CASE WHEN B.PROCESSSEGMENTID  = 'SGM013' THEN B.LOTID END) XHEAD_LOTID
						,  MAX(CASE WHEN B.PROCESSSEGMENTID  = 'SGM013' THEN B.TRACKOUTTIME END) XHEAD_TRACKOUTTIME
						,  MAX(CASE WHEN B.PROCESSSEGMENTID  = 'SGM011' AND PD.SPECDEFID  = 'SP0015' THEN B.LOTID END) FIRSTDISP_LOTID
						,  MAX(CASE WHEN B.PROCESSSEGMENTID  = 'SGM011' AND PD.SPECDEFID  = 'SP0015' THEN B.TRACKOUTTIME END) FIRSTDISP_TRACKOUTTIME
						,  MAX(CASE WHEN B.PROCESSSEGMENTID  = 'SGM011' AND PD.SPECDEFID  = 'SP0016' THEN B.LOTID END) SECONDDISP_LOTID
						,  MAX(CASE WHEN B.PROCESSSEGMENTID  = 'SGM011' AND PD.SPECDEFID  = 'SP0016' THEN B.TRACKOUTTIME END) SECONDDISP_TRACKOUTTIME
					FROM MAT_LOT_LIST A
					LEFT  JOIN SF_LOT                 B ON  A.MATERIALLOTID = B.LOTID
					LEFT  JOIN SF_LOT                 C ON  A.LOTID = C.LOTID
					LEFT  JOIN SF_PRODUCTDEFINITION  PD ON  B.PRODUCTDEFID  = PD.PRODUCTDEFID 
					WHERE B.PROCESSSEGMENTID  IN ('SGM014','SGM011','SGM013')
					GROUP BY RN
				)X
			
				SELECT * INTO #MAT_INFO_LIST
				FROM
				(
					SELECT LL.PUMP_LOTID
						,  MAX(LL.REP_LOTID)                                                                       REP_LOTID
						,  MAX(LL.CYLINDER_LOTID)                                                                  CYLINDER_LOTID
						,  MAX(CONVERT(VARCHAR,RR.INSPECTDATE,23))                                                 INSPECTDATE 
						,  MAX(RR.TESTNO)                                                                          TESTNO
						,  MAX(RR.COOLINGTIME)                                                                     COOLINGTIME 
						,  MAX(CASE WHEN RT.MEASURETIME           = '50Min' THEN RT.FIRSTSTAGE_TEMPERATURE  END)   FIRSTSTAGE_TEMPERATURE_VT --1단 열부하 수직방향온도
						,  MAX(CASE WHEN RT.MEASURETIME           = '50Min' THEN RT.SECONDSTAGE_TEMPERATURE END)   SECONDSTAGE_TEMPERATURE_VT --2단 열부하 수직방향온도
						,  MAX(CASE WHEN RT.MEASURETIME           = '30Min' THEN RT.FIRSTSTAGE_TEMPERATURE  END)   FIRSTSTAGE_TEMPERATURE_HO --1단 열부하 수평방향온도
						,  MAX(CASE WHEN RT.MEASURETIME           = '30Min' THEN RT.SECONDSTAGE_TEMPERATURE END)   SECONDSTAGE_TEMPERATURE_HO --2단 열부하 수평방향온도
						,  MAX(CASE WHEN RT.MEASURETIME           = '15Min' THEN RT.FIRSTSTAGE_TEMPERATURE  END)   FIRSTSTAGE_TEMPERATURE_FINAL --1단 열부하 Final 온도
						,  MAX(CASE WHEN RT.MEASURETIME           = '15Min' THEN RT.SECONDSTAGE_TEMPERATURE END)   SECONDSTAGE_TEMPERATURE_FINAL --2단 열부하 Final 온도
						,  MAX(CASE WHEN RT.MEASURETIME           = '15Min' THEN RT.COMPRESSOR_SUP          END)   COMPRESSOR_SUP         --Supply 고압(MPa)
						,  MAX(CASE WHEN RT.MEASURETIME           = '15Min' THEN RT.COMPRESSOR_RET          END)   COMPRESSOR_RET         --Return 저압(MPa)
						,  MAX(CASE WHEN RT.MEASURETIME           = '15Min' THEN RT.CHAMBER_PRESSURE        END)   CHAMBER_PRESSURE       --진공도(Pa)
						,  MAX(RR.MOTORSTALL_POWER)                                                                MOTORSTALL_POWER       --모터 Stall 전압
						,  MAX(CONVERT(VARCHAR,LL.XHEAD_TRACKOUTTIME,23))                                          XHEAD_TRACKOUTTIME 
						,  MAX(LL.XHEAD_LOTID)                                                                     XHEAD_LOTID 
						,  MAX(CASE WHEN SD1.PARAMETERID          = 'IT00002' THEN SD1.MEASUREVALUE  END)          WEIGHTTEST             --하중Test(N)
						,  MAX(CASE WHEN SD1.PARAMETERID          = 'IT00003' THEN SD1.MEASUREVALUE  END)          REGISTERAB             --저항A-B(Ω)
						,  MAX(CASE WHEN SD1.PARAMETERID          = 'IT00004' THEN SD1.MEASUREVALUE  END)          REGISTERBC             --저항B-C(Ω)
						,  MAX(CASE WHEN SD1.PARAMETERID          = 'IT00007' THEN SD1.MEASUREVALUE  END)          MOTORROTATION          --Motor회전방향
						,  MAX(CASE WHEN SD1.PARAMETERID          = 'IT00005' THEN SD1.MEASUREVALUE  END)          DISCON                 --절연(MΩ)
						,  MAX(CONVERT(VARCHAR,LL.FIRSTDISP_TRACKOUTTIME,23))                                      FIRSTDISP_TRACKOUTTIME    
						,  MAX(LL.FIRSTDISP_LOTID)                                                                 FIRSTDISP_LOTID   
						,  MAX(CASE WHEN SW2.SUBPROCESSSEGMENTID  = 'SGS011'  THEN SW2.WORKSTARTTIME END)          DRYSTARTTIME           --건조시작일
						,  MAX(CASE WHEN SD2.PARAMETERID          = 'IT00055' THEN SD2.MEASUREVALUE  END)          BEFORDRYWEIGHT                 --건조전 중량(g)
						,  MAX(CASE WHEN SW2.SUBPROCESSSEGMENTID  = 'SGS011'  THEN SW2.WORKENDTIME   END)          DRYENDTIME           --건조완료일
						,  MAX(CASE WHEN SD2.PARAMETERID          = 'IT00058' THEN SD2.MEASUREVALUE  END)          AFTERDRYWEIGHT                 --건조후 중량(g)
						--중량차이 추가
						,  MAX(CONVERT(VARCHAR,REP_TRACKOUTTIME,23))                                               REP_TRACKOUTTIME
						,  MAX(CASE WHEN SD3.PARAMETERID          = 'IT00021' THEN SD3.MEASUREVALUE  END)          ADDMACHININGWT    --추가가공후 중량(g)
						,  MAX(CASE WHEN SD3.PARAMETERID          = 'IT00022' THEN SD3.MEASUREVALUE  END)          D1MIN             --D1 MIN(mm)
						,  MAX(CASE WHEN SD3.PARAMETERID          = 'IT00023' THEN SD3.MEASUREVALUE  END)          D1MAX             --D1 MAX(mm)
						,  MAX(CASE WHEN SD3.PARAMETERID          = 'IT00024' THEN SD3.MEASUREVALUE  END)          D2MIN             --D2 MIN(mm)
						,  MAX(CASE WHEN SD3.PARAMETERID          = 'IT00025' THEN SD3.MEASUREVALUE  END)          D2MAX             --D2 MAX(mm)
						,  MAX(CASE WHEN SD3.PARAMETERID          = 'IT00026' THEN SD3.MEASUREVALUE  END)          D3MIN             --D3 MIN(mm)
						,  MAX(CASE WHEN SD3.PARAMETERID          = 'IT00027' THEN SD3.MEASUREVALUE  END)          D3MAX             --D3 MAX(mm)
						,  MAX(LL.SECONDDISP_LOTID)                                                                SECONDDISP_LOTID
						,  MAX(CONVERT(VARCHAR,LL.SECONDDISP_TRACKOUTTIME,23))                                     SECONDDISP_TRACKOUTTIME 
						,  MAX(CASE WHEN SW4.SUBPROCESSSEGMENTID  = 'SGS011'  THEN SW4.WORKSTARTTIME END)          SECOND_DRYSTARTTIME           --건조시작일
						,  MAX(CASE WHEN SD4.PARAMETERID          = 'IT00055' THEN SD4.MEASUREVALUE  END)          SECOND_BEFORDRYWEIGHT                 --건조전 중량(g)
						,  MAX(CASE WHEN SW4.SUBPROCESSSEGMENTID  = 'SGS011'  THEN SW4.WORKENDTIME   END)          SECOND_DRYENDTIME           --건조완료일
						,  MAX(CASE WHEN SD4.PARAMETERID          = 'IT00058' THEN SD4.MEASUREVALUE  END)          SECOND_AFTERDRYWEIGHT                 --건조후 중량(g)    
						--중량차이(G)
						,  MAX(CASE WHEN SD3.PARAMETERID          = 'IT00029' THEN SD3.MEASUREVALUE  END)          SECONDD1MIN             --D1 MIN(mm)
						,  MAX(CASE WHEN SD3.PARAMETERID          = 'IT00030' THEN SD3.MEASUREVALUE  END)          SECONDD1MAX             --D1 MAX(mm)
						,  MAX(CASE WHEN SD3.PARAMETERID          = 'IT00031' THEN SD3.MEASUREVALUE  END)          SECONDD2MIN             --D2 MIN(mm)
						,  MAX(CASE WHEN SD3.PARAMETERID          = 'IT00032' THEN SD3.MEASUREVALUE  END)          SECONDD2MAX             --D2 MAX(mm)    
					FROM  #MAT_LOT_LIST LL
					LEFT JOIN CT_REFRIGERATORREPORT          RR ON  LL.REP_LOTID = RR.LOTID
					LEFT JOIN CT_REFRIGERATORREPORTTIMEDATA  RT ON  RR.LOTID = RT.LOTID
																AND RR.INSPECTIONDEGREE  = RT.INSPECTIONDEGREE
					LEFT JOIN UL_SUBPROCESSWORKRESULT       SW1 ON  LL.XHEAD_LOTID = SW1.LOTID 
					LEFT JOIN UL_SUBPROCESSWORKRESULTDETAIL SD1 ON  SW1.TXNHISTKEY  = SD1.WORKRESULTHISTKEY 
																AND SD1.PARAMETERID  IN ('IT00002','IT00003','IT00004','IT00007','IT00005') 
					LEFT JOIN UL_SUBPROCESSWORKRESULT       SW2 ON  LL.FIRSTDISP_LOTID = SW2.LOTID 
					LEFT JOIN UL_SUBPROCESSWORKRESULTDETAIL SD2 ON  SW2.TXNHISTKEY  = SD2.WORKRESULTHISTKEY 
																AND SD2.PARAMETERID  IN ('IT00055','IT00058')
					LEFT JOIN UL_SUBPROCESSWORKRESULT       SW3 ON  LL.REP_LOTID = SW3.LOTID 
					LEFT JOIN UL_SUBPROCESSWORKRESULTDETAIL SD3 ON  SW3.TXNHISTKEY  = SD3.WORKRESULTHISTKEY 
																AND SD3.PARAMETERID IN ('IT00021','IT00022','IT00023','IT00024','IT00025','IT00026','IT00027','IT00029','IT00030','IT00031','IT00032')
					LEFT JOIN UL_SUBPROCESSWORKRESULT       SW4 ON  LL.SECONDDISP_LOTID = SW4.LOTID 
					LEFT JOIN UL_SUBPROCESSWORKRESULTDETAIL SD4 ON  SW4.TXNHISTKEY  = SD4.WORKRESULTHISTKEY 
																AND SD4.PARAMETERID  IN ('IT00055','IT00058')
					GROUP BY LL.PUMP_LOTID    
				)X
				SELECT ---펌프 성능검사--
					   INSPECTIONDATE                                      -- 펌프성능검사일
					,  PRODUCTDEFID                                        -- 품목코드
					,  PARTNUMBER
					,  PRODUCTDEFNAME                                      -- 품목명
					,  MODELNAME                                           -- 기종
					,  STANDARD                                            -- 도면번호
					,  LOTID                                               -- LOT ID
					,  COMPRESSORSERIALNO                                  -- 검사라인
					,  CONVERT(int ,TCVALUE) AS TCVALUE                -- 1단 Final 온도 
					,  CONVERT(int ,TWOTEMPVALUE) AS TWOTEMPVALUE      -- 2단 Final 온도  
					,  VACVALUE                                            -- 도달압력(Pa)
					,  TIME_20K                                            -- 20K 도달시간(분)
					,  TIME_15K                                            -- 15K 도달시간(분)
					,  CONVERT(float, TEMPERATURE) AS TEMPERATURE   --온도				
					,  CONVERT(float, HUMIDITY) AS HUMIDITY	       --습도
					,  CONVERT(float, EXTERIOR_TEMPERATURE) AS EXTERIOR_TEMPERATURE   --외관온도
					,  NOISE											   --이상음
					---냉동기 성능검사 --					  	               
					,  REP_LOTID                                           -- 냉동기 S/N
					,  CYLINDER_LOTID                                      -- 실린더 lotid  
					,  INSPECTDATE                                         -- 냉동기검사일자
					,  TESTNO                                              -- 검사라인
					,  COOLINGTIME                                         -- 20K 냉각시간(분) 
					,  CONVERT(float ,FIRSTSTAGE_TEMPERATURE_VT) AS FIRSTSTAGE_TEMPERATURE_VT                 -- 1단 열부하 수직방향온도
					,  CONVERT(float ,SECONDSTAGE_TEMPERATURE_VT) AS SECONDSTAGE_TEMPERATURE_VT               -- 2단 열부하 수직방향온도
					,  CONVERT(float ,FIRSTSTAGE_TEMPERATURE_HO) AS FIRSTSTAGE_TEMPERATURE_HO                 -- 1단 열부하 수평방향온도
					,  CONVERT(float ,SECONDSTAGE_TEMPERATURE_HO) AS SECONDSTAGE_TEMPERATURE_HO               -- 2단 열부하 수평방향온도
					,  CONVERT(float ,FIRSTSTAGE_TEMPERATURE_FINAL) AS FIRSTSTAGE_TEMPERATURE_FINAL           -- 1단 열부하 Final 온도
					,  CONVERT(float ,SECONDSTAGE_TEMPERATURE_FINAL) AS SECONDSTAGE_TEMPERATURE_FINAL         -- 2단 열부하 Final 온도
					,  CONVERT(float ,COMPRESSOR_SUP) AS COMPRESSOR_SUP                                       -- Supply 고압(MPa)
					,  CONVERT(float, COMPRESSOR_RET) AS COMPRESSOR_RET                               		 -- Return 저압(MPa)
					,  CHAMBER_PRESSURE                                    -- 진공도(Pa)
					,  CONVERT(float, MOTORSTALL_POWER) AS MOTORSTALL_POWER                              	 -- 모터 Stall 전압
					--X-HEAD 공정실적--						                
					,  XHEAD_TRACKOUTTIME                                  -- XHEAD 생산일자 
					,  XHEAD_LOTID                                         -- XHAD LOT번호 
					,  CONVERT(int, WEIGHTTEST) AS WEIGHTTEST          -- 하중Test(N)
					,  CONVERT(float, REGISTERAB) AS REGISTERAB     -- 저항A-B(Ω)
					,  CONVERT(float, REGISTERBC) AS REGISTERBC     -- 저항B-C(Ω)
					,  MOTORROTATION                                       -- Motor회전방향
					,  CONVERT(int, DISCON) AS DISCON                  -- 절연(MΩ)
					-- 1단 디스플레이서--					  	               
					,  FIRSTDISP_TRACKOUTTIME                              -- 1단디스플레이서 생산일자 
					,  FIRSTDISP_LOTID                                     -- 1단디스플레이서 LOTID
					,  DRYSTARTTIME                                        -- 건조시작일
					,  CONVERT(float, ISNULL(BEFORDRYWEIGHT,'0')) AS BEFORDRYWEIGHT           -- 건조전 중량(g)
					,  DRYENDTIME                                          -- 건조완료일
					,  CONVERT(float, ISNULL(AFTERDRYWEIGHT,'0')) AS AFTERDRYWEIGHT           -- 건조후 중량(g)	
					,  ROUND(CONVERT(REAL,ISNULL(BEFORDRYWEIGHT,'0'))
					 - CONVERT(REAL,ISNULL(AFTERDRYWEIGHT,'0')),3) WEIGHTDIFF -- 중량 차이(g)
					-- 냉동기 실적 정보
					,  REP_TRACKOUTTIME                                    -- 냉동기 생산일자
					,  CONVERT(float, ADDMACHININGWT) AS ADDMACHININGWT  -- 추가가공후 중량(g)
					,  CONVERT(float, D1MIN) AS D1MIN                    -- D1 MIN(mm)
					,  CONVERT(float, D1MAX) AS D1MAX                    -- D1 MAX(mm)
					,  CONVERT(float, D2MIN) AS D2MIN                    -- D2 MIN(mm)
					,  CONVERT(float, D2MAX) AS D2MAX                    -- D2 MAX(mm)
					,  CONVERT(float, D3MIN) AS D3MIN                    -- D3 MIN(mm)
					,  CONVERT(float, D3MAX) AS D3MAX                    -- D3 MAX(mm)
					-- 디스플레이서 조립 실적(2단)
					,  SECONDDISP_LOTID                                    -- 2단 디스플레이서 조립 LOT
					,  SECONDDISP_TRACKOUTTIME                             -- 2단디스플레이서생산일자
					,  SECOND_DRYSTARTTIME                                 -- 건조시작일 
					,  CONVERT(float, SECOND_BEFORDRYWEIGHT) AS SECOND_BEFORDRYWEIGHT  -- 건조전 중량
					,  SECOND_DRYENDTIME                                   -- 건조완료일
					,  CONVERT(float, SECOND_AFTERDRYWEIGHT) AS SECOND_AFTERDRYWEIGHT          -- 건조후 중량
					,  ROUND(CONVERT(REAL,ISNULL(SECOND_BEFORDRYWEIGHT,'0'))
					 - CONVERT(REAL,ISNULL(SECOND_AFTERDRYWEIGHT,'0')),3) SECOND_WEIGHTDIFF -- 중량 차이(g)
					,  CONVERT(float, SECONDD1MIN) AS SECONDD1MIN                              -- D1 MIN(mm)
					,  CONVERT(float, SECONDD1MAX) AS SECONDD1MAX                              -- D1 MAX(mm)
					,  CONVERT(float, SECONDD2MIN) AS SECONDD2MIN                              -- D2 MIN(mm)
					,  CONVERT(float, SECONDD2MAX) AS SECONDD2MAX                              -- D2 MAX(mm)
				FROM  #TMP_BASIC A
				LEFT JOIN  #MAT_INFO_LIST B ON A.LOTID = B.PUMP_LOTID
				
				DROP TABLE #TMP_BASIC
				DROP TABLE #MAT_INFO_LIST
				DROP TABLE #MAT_LOT_LIST
				;

			]]>
		</statement>
	</query>
		
	<!--
	프 로 그 램 명	: 품질관리 > 클레임관리 > 시정예방조치서 발행대장
	설		명	: 시정예방조치서 발행대장의 발행번호별 파일리스트를 조회한다.
	생	성	자	: 유태근
	생	성	일	: 2020-04-28
	수  정   이  력	: 2022-05-10 주시은 생성자명으로 보이게, 생성일 > 시간까지 조회되게 수정
	-->
	<query id="GetClaimManagerFileList" version="00001">
		<statement>
			<![CDATA[
				--
				-- Id : GetClaimManagerFileList
				-- Version : 00001
				SELECT 
						QF.DOCID 													-- 발행번호
					,	QF.SEQNUMBER												-- 시퀀스번호
					,	QF.FILENAME													-- 파일명
					,	QF.FILEDATA													-- 파일 바이너리 데이터
					,	QF.DESCRIPTION												-- 설명
					,	QF.CONFNUMBER												-- 회의번호
					--,	CREATOR														-- 생성자
					,	ISNULL(UC.USERNAME, QF.CREATOR)				AS CREATOR		-- 생성자		
					,	CONVERT(VARCHAR(20), QF.CREATEDTIME, 20)	AS CREATEDTIME 	-- 생성일
					--,	MODIFIER													-- 수정자
					,	ISNULL(UM.USERNAME, QF.MODIFIER)			AS MODIFIER		-- 수정자
					,	QF.MODIFIEDTIME												-- 수정일
				FROM	UL_QMFILE	QF
				LEFT JOIN SF_USER	UC	ON	QF.CREATOR = UC.USERID
				LEFT JOIN SF_USER	UM	ON	QF.MODIFIER = UM.USERID
				WHERE 	DOCID = '$!{DOCID}'
			]]>
		</statement>
	</query>

	
	<!--
	프 로 그 램 명	: 품질관리 > 클레임관리 > 시정예방조치서 발행대장
	설		명	: 시정예방조치서 발행대장의 고객사 리스트를 조회한다.
	생	성	자	: 유태근
	생	성	일	: 2020-04-23
	수  정   이  력	: 
	-->
	<query id="GetCustomer" version="00001">
		<statement>
			<![CDATA[
				--
				-- Id : GetCustomer
				-- Version : 00001
				SELECT 
						COMPANYID								AS CUSTOMERID 		-- 고객사 ID
					,	CASE WHEN '$!{LANGUAGETYPE}' = 'ko-KR'
							 THEN COMPANYNAMEKOR
							 WHEN '$!{LANGUAGETYPE}' = 'en-US'
							 THEN COMPANYNAMEENG
							 ELSE COMPANYNAMEJPN END 			AS CUSTOMERNAME		-- 고객사명
					,	PHONE														-- 전화번호
					,	FAXNO 														-- 팩스번호
					,	ADDRESS														-- 주소
				FROM	UL_COMPANY
				WHERE	ISNULL(COMPANYID, '') <> ''
				
				-- 고객사 조회조건
				#if ("$!{CUSTOMERIDNAME}" != "")
					#if ("$!{LANGUAGETYPE}" == "ko-KR")
						AND (COMPANYID LIKE '%$!{CUSTOMERIDNAME}%' OR COMPANYNAMEKOR LIKE '%$!{CUSTOMERIDNAME}%')
					#elseif ("$!{LANGUAGETYPE}" == "en-US")
						AND (COMPANYID LIKE '%$!{CUSTOMERIDNAME}%' OR COMPANYNAMEENG LIKE '%$!{CUSTOMERIDNAME}%')
					#else
						AND (COMPANYID LIKE '%$!{CUSTOMERIDNAME}%' OR COMPANYNAMEJPN LIKE '%$!{CUSTOMERIDNAME}%')
					#end
				#end
			]]>
		</statement>
	</query>
	
	<!--
	프 로 그 램 명	: 품질관리 > 클레임관리 > 시정예방조치서 발행대장
	설		명	: 시정예방조치서 발행대장의 고객사 리스트를 조회한다.
	생	성	자	: 유태근
	생	성	일	: 2020-04-23
	수  정   이  력	: 2020-06-10 강유라 CU.SMCUSTSTATUS = '2004001', UMCUSTKIND 조건 추가
				  2020-06-16 정승원 XMANAGECUSTOMER 조건 추가
				  2020-07-02 강유라 CU.CUSTSEQ 캐스팅
	-->
	<query id="GetCustomer" version="00002">
		<statement>
			<![CDATA[
				--
				-- Id : GetCustomer
				-- Version : 00002
				SELECT *
				FROM
				(
					SELECT
							CONVERT(VARCHAR(20),CU.CUSTSEQ)				AS	CUSTOMERID		-- 고객사 ID
						,	CU.CUSTNAME									AS	CUSTOMERNAME	-- 고객사명
						,	CU.TELNO									AS	PHONE			-- 폰번호
						,	CU.BIZADDR									AS	ADDRESS			-- 주소
						,	CU.CUSTKINDNAME								AS  CUSTKINDNAME    -- 지역유형
					FROM   	[UCKERP].[$!{DBLINKNAME}].[dbo].[uck_VIEW_Cust]  CU
					WHERE	1 = 1
					AND 	CU.SMCUSTSTATUS = '2004001' 
					
					-- 고객사 조회조건
					#if ("$!{CUSTOMERIDNAME}" != "")
						AND		(CU.CUSTSEQ LIKE '%$!{CUSTOMERIDNAME}%' OR CU.CUSTNAME LIKE '%$!{CUSTOMERIDNAME}%')
					#end
					
					#if ("$!{COMP}" == "Y")
						AND	UMCUSTKIND IN (
							'1004001'			--국내매출거래처
							,'1004002'			--수출매출거래처
							,'1004003'			--국내매입거래처
							,'1004004'			--해외수입거래처
							,'1004010'			--Local수출거래처
							,'1004011'			--Local수입거래처
						)
					#end
					
					#if ("$!{XMANAGECUSTOMER}" == "Y")
						--AND 	CU.UMCUSTKIND IN (1004001,1004002)
					#end
					
					UNION
					
					SELECT 	CONVERT(VARCHAR(20),CU.CUSTSEQ)	CUSTOMERID      -- 고객사 ID
						,   CU.CUSTNAME                     CUSTOMERNAME   -- 고객사명
		               	,   CU.TELNO                        PHONE         -- 폰번호
		               	,   CU.BIZADDR                      ADDRESS         -- 주소
		               	,   CU.CUSTKINDNAME                 CUSTKINDNAME    -- 지역유형	
					FROM   	[UCKERP].[$!{DBLINKNAME}].[dbo].[uck_VIEW_Cust]  CU
	                WHERE	EndUserYn = 1
	                
					-- 고객사 조회조건
					#if ("$!{CUSTOMERIDNAME}" != "")
						AND		(CU.CUSTSEQ LIKE '%$!{CUSTOMERIDNAME}%' OR CU.CUSTNAME LIKE '%$!{CUSTOMERIDNAME}%')
					#end
					
					#if ("$!{COMP}" == "Y")
						AND	UMCUSTKIND IN (
							'1004001'			--국내매출거래처
							,'1004002'			--수출매출거래처
							,'1004003'			--국내매입거래처
							,'1004004'			--해외수입거래처
							,'1004010'			--Local수출거래처
							,'1004011'			--Local수입거래처
						)
					#end
					
					#if ("$!{XMANAGECUSTOMER}" == "Y")
						--AND 	CU.UMCUSTKIND IN (1004001,1004002)
					#end
				)X
				ORDER BY CONVERT(INT, X.CUSTOMERID);
			]]>
		</statement>
	</query>
	
	<!--
	프 로 그 램 명	: 품질관리 > 불량관리 > 불량통지서 등록
	설		명	: 등록된 불량 통지서 목록을 조회한다.
	작	성	자	: 강유라
	작	성	일	: 2020-04-22
	주요 변경 로그	: 2020-08-25 | scmo | 상품품목(UL_GOODSDEFINITION)추가에 따름
	-->
	<query id="SelectDefectRegistList" version="00001">
		<statement>
			<![CDATA[
				--
				-- Id = SelectDefectRegistList
				-- Version = 00001
				
	            SELECT 
						UD.DOCID 																							--발행번호
						--,UD.PUBLISHDATE 																					--발행일자
					,	CONVERT(VARCHAR(10), UD.PUBLISHDATE, 121) 								AS PUBLISHDATE 				--발행일자
					,	UD.PROGRESSSTATE																					--진행상태코드
					,	DCD.DICTIONARYNAME	 											   		AS PROGRESSSTATENAME 		--진행상태명
					,	UD.CLAIMNUMBER																						--CLAIM NO
					,	UD.DEPARTMENTID																						--발견부서
					,	UD.FINDID																							--발견자아이디
					,	CU2.USERNAME															AS FINDNAME					--발견자(명)//'20.08.10 추가, 기존 발견자를 작성자로 사용
					,	UD.DETECTID 																						--작성자아이디//컬럼추가후 변경
					,	CU.USERNAME 															AS DETECTNAME 				--작성자(명)//컬럼추가후 변경
					,	ISNULL(CD.PARTNUMBER, UG.PARTNUMBER)									AS DEFECTITEMID				--불량품코드
					,	ISNULL(CD.CONSUMABLEDEFID, UG.GOODSDEFID)								AS DEFECTITEMNUMBER			--불량품코드SEQUENCE
					,	ISNULL(ISNULL(CDD.DICTIONARYNAME,CD.CONSUMABLEDEFNAME), UG.GOODSDEFNAME) AS DEFECTITEMNAME			--불량품명
					,	UD.COMPANYID																						--업체코드
					,	CP.CUSTNAME																AS CUSTOMERNAME				--업체명
					,	UD.COMPANYID +'('+CP.CUSTNAME+')'										AS CUSTCODENAME				--업체코드(명)
					,	CP.CUSTKINDNAME 																					--국적
					,	UD.DRAWINGNUMBER																					--도면번호
						--,UD.PAYMENTDATE																					--납입일자
					,	CONVERT(DATETIME, UD.PAYMENTDATE) 										AS PAYMENTDATE 				--납입일자
					,	CONVERT(VARCHAR(10), UD.PAYMENTDATE, 121)								AS PAYMENTDATETOBINDING 	--납입일자(포맷)
					,	UD.PAYMENTQTY																						--납입수량
						--,UD.DEFECTDATE																					--불량일자
					,	CONVERT(DATE, UD.DEFECTDATE) 											AS DEFECTDATE				--불량일자
					,	UD.DEFECTQTY																						--불량수량
					,	CASE WHEN ISNULL(UD.PAYMENTQTY,0) = 0
							THEN NULL
							ELSE CONVERT(VARCHAR,CONVERT(NUMERIC(13,2),ROUND((100.0 * UD.DEFECTQTY/UD.PAYMENTQTY),2))) + '%'
						END 																	AS DEFECTRATE			 	--불량율 
					--,	COUNT(*) OVER (PARTITION BY UD.ITEMID,UD.COMPANYID) 					AS NUMBEROFREOCCURRENCE  	--재발횟수
					,	UD.RECURRCNT										 											 	--재발횟수
					,	UD.DEFECTDESC 																					 	--불량내용
					,	UD.LARGECATEGORY 																				 	--대분류
					,	UD.SMALLCATEGROY 																				 	--소분류
					,	UD.ACTIONTYPE																					 	--조치유형
					,	UD.COMPLETESTATE																					--대책진척현황
					,	UD.COMPLETEDAY																						--대책소요일
					,	UD.ACTIONDAY																						--대응처리일
					,	UD.UNITPRICE 																						--단가
					,	UD.DEFECTPRICE 																						--불량금액
						--,UD.RECEIPTDATE 																					--접수일자
					,	CONVERT(DATETIME, UD.RECEIPTDATE) 										AS RECEIPTDATE				--접수일자
						--,UD.DELIVERYDATE																					--불량통지서 발송일
					,	CONVERT(DATETIME, UD.DELIVERYDATE) 										AS DELIVERYDATE				--불량통지서 발송일
						--,UD.COMPLETEDATE 																					--대책 완료일자
					,	CONVERT(DATETIME, UD.COMPLETEDATE)							 			AS COMPLETEDATE				--대책 완료일자
						--,UD.EXPORTDATE																					--반출일자
					,	CONVERT(DATE, UD.EXPORTDATE) 											AS EXPORTDATE				--반출일자
						--,UD.ACTIONDATE																					--조치 완료일자
					,	CONVERT(DATETIME, UD.ACTIONDATE) 										AS ACTIONDATE				--조치 완료일자
					,	UD.REASONDESC 																						--원인
					,	UD.ACTIONDESC																						--대책
					,	UD.DESCRIPTION																						--비고사항
					,	'N'																		AS ISCHANGED				--수정된 Row 여부
					,	CASE WHEN ISNULL(UD.CLAIMNUMBER,'')=''
							THEN 'N'
							ELSE 'Y'
						END																		AS HASCLAIMNUMBER	
				FROM  	UL_DEFECT 	
																								UD
				LEFT OUTER JOIN SF_CODE 														DC  ON  UD.PROGRESSSTATE = DC.CODEID
																								    AND DC.CODECLASSID ='DefectProcessState'
				LEFT OUTER JOIN SF_DICTIONARY 													DCD ON  DC.DICTIONARYID = DCD.DICTIONARYID
																									AND DCD.LANGUAGETYPE ='$!{_TXNINFO.LANGUAGETYPE}'
				LEFT OUTER JOIN SF_USER 														CU  ON  UD.DETECTID = CU.USERID
				LEFT OUTER JOIN SF_USER															CU2 ON 	UD.FINDID = CU2.USERID
				-- NO가 KEY LEFT OUTER JOIN UL_COMPANY														UC  ON  UD.COMPANYID = UC.COMPANYID
				--불량품코드/명/업체코드다국어/국적조인항목 정해지지않음
				--LEFT OUTER JOIN SF_CODE NC ON UD.PROGRESSSTATE = NC.CODECLASSID
				--							AND NC.CODECLASSID ='NationalType'
				--LEFT OUTER JOIN SF_DICTIONARY NCD ON NC.DICTIONARYID = NCD.DICTIONARYCLASSID
				--								AND NCD.LANGUAGETYPE ='$!{_TXNINFO.LANGUAGETYPE}'
				
				--품목 
				LEFT OUTER JOIN SF_CONSUMABLEDEFINITION 										CD  ON  UD.ITEMID = CD.CONSUMABLEDEFID
				--상품품목
				LEFT OUTER JOIN UL_GOODSDEFINITION												UG  ON  UD.ITEMID = UG.GOODSDEFID
				LEFT OUTER JOIN SF_DICTIONARY													CDD ON  CD.DICTIONARYID = CDD.DICTIONARYID
																									AND CDD.LANGUAGETYPE = '$!{_TXNINFO.LANGUAGETYPE}'
				LEFT OUTER JOIN (
								SELECT 
										CUSTSEQ
									,	CUSTNAME
									,	CUSTKINDNAME
								FROM [UCKERP].[$!{DBLINKNAME}].[dbo].[uck_VIEW_Cust] ) 					CP ON UD.COMPANYID = CP.CUSTSEQ		
																								
				WHERE	1 = 1
				
				-- 발행기간 조회조건
				AND 	UD.PUBLISHDATE >= '$!{P_DATEPERIOD_PERIODFR}'
				AND		UD.PUBLISHDATE <= '$!{P_DATEPERIOD_PERIODTO}'
						
				-- 발견부서 조회조건
				#if ("$!{P_DEPTMGT}" != "" && "$!{P_DEPTMGT}" != "*")
					AND	UD.DEPARTMENTID = '$!{P_DEPTMGT}'
				#end
				
				-- 진행상태 조회조건
				#if ("$!{P_DEFECTPROCESSSTATE}" != "" && "$!{P_DEFECTPROCESSSTATE}" != "*")
					AND	UD.PROGRESSSTATE = '$!{P_DEFECTPROCESSSTATE}'
				#end

				-- 품목아이디/ 명 조회조건
				#if ("$!{P_ITEMNAME}" != "" && "$!{P_ITEMNAME}" != "*")
					AND	(UD.ITEMID LIKE '%$!{P_ITEMNAME}%'
					OR	CDD.DICTIONARYNAME LIKE '%$!{P_ITEMNAME}%'
					OR	CD.CONSUMABLEDEFNAME LIKE '%$!{P_ITEMNAME}%')
				#end
				
				-- 업체 조회조건
				#if ("$!{P_VENDORCODE}" != "" && "$!{P_VENDORCODE}" != "*")
					AND	UD.COMPANYID = '$!{P_VENDORCODE}'
				#end
			]]>
		</statement>
	</query>
	
	<!--
	프 로 그 램 명	: 품질관리 > 불량관리 > 불량통지서 등록
	설		명	: 시정예방조치서에 등록된 클레임 넘버를 조회한다.
	작	성	자	: 강유라
	작	성	일	: 2020-04-23
	주요 변경 로그	:
	-->
	<query id="GetClaimNo" version="00001">
		<statement>
			<![CDATA[
				--
				-- Id = "GetClaimNo"
				-- Version = "00001"
				
	            SELECT 
	            		UC.DOCID
					,	UC.CLAIMNUMBER
			    FROM 	UL_CAPA UC
			    WHERE	1=1
			    AND 	ISNULL(UC.DEFECTDOCID,'') = ''
			    AND 	ISNULL(UC.CLAIMNUMBER,'') != ''
			    --발행완료 상태
			    AND 	UC.PROGRESSSTATE ='ResponseCompleted'
			    
			    #if ("$!{P_DOCID}" != "" && "$!{P_DOCID}" != "*")
					AND	UC.DOCID LIKE '%$!{P_DOCID}%'
				#end
				
				#if ("$!{P_CLAIMNUMBER}" != "" && "$!{P_CLAIMNUMBER}" != "*")
					AND	UC.CLAIMNUMBER LIKE '%$!{P_CLAIMNUMBER}%'
				#end

			]]>
		</statement>
	</query>
	
	<!--
	프 로 그 램 명	: 품질관리 > 불량관리 > 불량통지서 등록
	설		명	: 불량품코드에 등록할 품목코드를 조회한다. 
	작	성	자	: 강유라
	작	성	일	: 2020-04-23
	주요 변경 로그	: 20020-06-11 강유라 기종 PRODUCTCLASS => MODELID 변경
	-->
	<query id="GetProductDefByProductType" version="00001">
		<statement>
			<![CDATA[
				--
				-- Id = "GetProductDefByProductType"
				-- Version = "00001"
				
	            SELECT 
						PD.PRODUCTDEFID
					,   PD.PARTNUMBER	
					,	PD.PRODUCTDEFVERSION	
					,	PD.PRODUCTDEFNAME
					,	TCD.DICTIONARYNAME 					AS PRODUCTDEFTYPE
					,	PD.DESCRIPTION
					,	PCD.DICTIONARYNAME 					AS PRODUCTMODEL
					,	PD.LOTSIZE
							 
				 FROM SF_PRODUCTDEFINITION 					PD
				 LEFT OUTER JOIN SF_CODE 					TC  ON  PD.PRODUCTDEFTYPE = TC.CODEID	
															    AND TC.CODECLASSID = 'ProductDefType'
				LEFT OUTER JOIN SF_DICTIONARY 				TCD ON  TC.DICTIONARYID = TCD.DICTIONARYID
																AND TCD.LANGUAGETYPE = '$!{_TXNINFO.LANGUAGETYPE}'

				LEFT OUTER JOIN SF_CODE 					PC  ON  PD.MODELID = PC.CODEID
																AND PC.CODECLASSID ='ModelCode'
				LEFT OUTER JOIN SF_DICTIONARY 				PCD ON  PC.DICTIONARYID = PCD.DICTIONARYID
																AND PCD.LANGUAGETYPE = '$!{_TXNINFO.LANGUAGETYPE}'
				WHERE	1 = 1												
				-- 품목타입 조회조건
				#if ("$!{P_PRODUCTDEFTYPE}" != "" && "$!{P_PRODUCTDEFTYPE}" != "*")
					AND	PD.PRODUCTDEFTYPE = '$!{P_PRODUCTDEFTYPE}'
				#end	
				
				-- 품목아이디/ 명 조회조건
				#if ("$!{P_PRODUCTDEFTXT}" != "" && "$!{P_PRODUCTDEFTXT}" != "*")
					AND	(PD.PRODUCTDEFID LIKE '%$!{P_PRODUCTDEFTXT}%'
					OR	PD.PRODUCTDEFNAME LIKE '%$!{P_PRODUCTDEFTXT}%'
					OR	PD.PARTNUMBER LIKE N'%$!{P_PRODUCTDEFTXT}%'
					)
				#end											
																
			]]>
		</statement>
	</query>
	
	<!--
	프 로 그 램 명	: 품질관리 > 클레임 관리 > X번 관리대장
	설		명	: X번 발행정보 조회 
	작	성	자	: 정승원
	작	성	일	: 2020-04-24
	주요 변경 로그	:
	-->
	<query id="SelectXManageList" version="00001">
		<statement>
			<![CDATA[
				--
				-- Id = SelectXManageList
				-- Version = 00001
				
	            SELECT	
						X.XNUMBER												--X번호
					,	X.CLAIMNUMBER											--Claim No
					,	CONVERT(CHAR(10), X.PUBLISHDATE, 23)	PUBLISHDATE 	--발행일자
					,	C.CLAIMTYPE												--Claim 구분
					,	X.ISREPORT												--보고서
					,	ISNULL(U.USERNAME, X.PUBLISHER)			PUBLISHER 		--발행자
					,	X.PROGRESSSTATE											--진행상태
					,	DATEDIFF(DAY, X.PUBLISHDATE, GETDATE())	ELAPSEDDAY		--경과일
					,	X.CHARGETYPE											--유/무상
					,	X.XTYPE													--유형
					,	X.TROUBLETYPE											--TROUBLE 분류
					,	X.ITEMFAMILY	 										--제품군
					,	X.MANUFACTURERID										--제조사
					,	X.MODELID												--기종
					,	ISNULL(MCD.DICTIONARYNAME, MC.CODENAME)		AS  MODELNAME-- 기종명
					,	ISNULL(CD1.DICTIONARYNAME, C1.CODENAME)		AS  CHARGETYPENAE -- 유무상명		
					,	ISNULL(CD2.DICTIONARYNAME, C2.CODENAME)		AS  ISREPORTNAME 	-- 리포트명			
					,	X.MANUFACTURENUMBER										--제조번호
					,	X.ETMHOUR												--ETM(H)
					,	X.CUSTOMERREGIONID										--지역
					,	X.CUSTOMERBASE											--거래선			
					,	X.DEVICECUSTOMERID										--장치사
					,	X.CUSTOMERID											--고객사
					,	ISNULL(V.CUSTNAME, X.CUSTOMERID)		CUSTOMERNAME
					,	X.LINEID												--LINE
					,	X.CUSTOMERLOCATION										--소재지
					,	X.CUSTOMERMANAGER										--담당자
					,	X.TELLNUMBER											--연락처
					,	X.FIXEDCOST												--고정비
					,	X.VARIABLECOST											--변동비
					,	ISNULL(X.PROCESSMONTH, 1)			 	PROCESSMONTH 	--처리월
					,	X.ORDERPRICE											--수주액
					,	ISNULL(X.ORDERMONTH, 1)					ORDERMONTH 	  	--수주월
					,	X.SALESPRICE											--매출액
					,	ISNULL(X.SALESMONTH, 1)					SALESMONTH 	  	--매출월
					,	X.OCCURDATE
					--,	CONVERT(CHAR(10), X.OCCURDATE, 23)		OCCURDATE		--발생일
					,	X.STATEDESC												--현상
					,	X.RESPONSEDESC											--대응
					,	X.RESPONSEFROM											--대응처
					,	X.ORDERNUMBER											--작업지시번호
					,	CONVERT(CHAR(10), X.REQUESTDATE, 23)	REQUESTDATE		--의뢰서 발행일
					,	X.PROGRESSDESC											--진행현황
					,	CONVERT(CHAR(10), X.COMPLETEDATE, 23)	COMPLETEDATE	--완료일
					,	CONVERT(DATETIME, X.SHIPMENTDATE)	SHIPMENTDATE	--출하일자
					,	X.ISEXAM												--심사여부
					--,	X.PROCESSDATE											--비용처리일자
					,	X.QTY
					,	X.HOPEDELEVERYDATE
					,	CONVERT(CHAR(10), X.HOPEDELEVERYDATE, 23)	HOPEDELEVERYDATEEXCELL
					,	CONVERT(DATETIME, X.INDATE) 				INDATE		--제품입고일자
					,	X.CONFIRMUSER											--입고확인자
					,	(SELECT USERNAME FROM SF_USER WHERE USERID = X.CONFIRMUSER) AS CONFIRMUSERNAME
					,	X.CLAIMCONTENT											--Claim내용
				FROM	UL_XMANAGE										X
				LEFT JOIN UL_CAPA										C	ON	X.CLAIMNUMBER = C.CLAIMNUMBER
				LEFT JOIN [UCKERP].[$!{DBLINKNAME}].[dbo].[uck_VIEW_Cust]	V	ON	X.CUSTOMERID = CAST(V.CUSTSEQ AS VARCHAR)
				LEFT JOIN SF_USER										U	ON	X.PUBLISHER = U.USERID			
				LEFT JOIN SF_CODE										MC	ON	MC.CODEID = X.MODELID
																			AND MC.CODECLASSID = 'ModelCode'
				LEFT JOIN SF_DICTIONARY									MCD	ON	MCD.DICTIONARYID = MC.DICTIONARYID
																			AND MCD.LANGUAGETYPE = '$!{LANGUAGETYPE}'
				LEFT JOIN SF_CODE										C1	ON	C1.CODEID = X.CHARGETYPE
																			AND C1.CODECLASSID = 'FreeType'
				LEFT JOIN SF_DICTIONARY									CD1	ON	C1.DICTIONARYID = CD1.DICTIONARYID
																			AND CD1.LANGUAGETYPE = '$!{LANGUAGETYPE}'													
				LEFT JOIN SF_CODE										C2	ON	C2.CODEID = X.ISREPORT
																			AND C2.CODECLASSID = 'ReportType'
				LEFT JOIN SF_DICTIONARY									CD2	ON	C2.DICTIONARYID = CD2.DICTIONARYID
																			AND CD2.LANGUAGETYPE = '$!{LANGUAGETYPE}'	
				WHERE	1 = 1
				--발행일자
				#if("$!{P_DATEPERIOD_PERIODFR}" != "" && "$!{P_DATEPERIOD_PERIODTO}" != "")
				AND		X.PUBLISHDATE BETWEEN CONVERT(CHAR(10), '$!{P_DATEPERIOD_PERIODFR}', 5)
									  AND	  DATEADD(DAY, 1, CONVERT(CHAR(10), '$!{P_DATEPERIOD_PERIODTO}', 5))
				#end
				--유형
				#if("$!{P_XTYPE}" != "" && "$!{P_XTYPE}" != "*")
				AND		X.XTYPE = '$!{P_XTYPE}'
				#end
				--제품군
				#if("$!{P_ITEMFAMILY}" != "" && "$!{P_ITEMFAMILY}" != "*")
				AND		X.ITEMFAMILY = '$!{P_ITEMFAMILY}'
				#end
				--진행상태
				#if("$!{P_PROGRESSSTATE}" != "" && "$!{P_PROGRESSSTATE}" != "*")
				AND		X.PROGRESSSTATE = '$!{P_PROGRESSSTATE}'
				#end
				ORDER BY X.XNUMBER					
			]]>
		</statement>
	</query>
	
	<!--
	프 로 그 램 명	: 품질관리 > 불량관리 > 불량통지서 등록
	설		명	: 불량통지서 등록시 재발생 횟수를 조회한다.
	생	성	자	: 강유라
	생	성	일	: 2020-04-27
	수  정   이  력	: 
	-->
	<query id="GetDefectReCurrentCNT" version="00001">
		<statement>
			<![CDATA[
				--
				-- Id : GetDefectReCurrentCNT
				-- Version : 00001
				--SELECT 
				--		COUNT(*) 			AS RECURRCNT
				--FROM UL_DEFECT
				--WHERE ITEMID ='$!{ITEMID}'
				--AND COMPANYID ='$!{COMPANYID}'
				
				SELECT 
						TOP 1
						RECURRCNT
				FROM 	UL_DEFECT
				WHERE 	ITEMID ='$!{ITEMID}'
				AND 	COMPANYID ='$!{COMPANYID}'
				ORDER BY RECURRCNT DESC
				;
			]]>
		</statement>
	</query>
	
	<!--
	프 로 그 램 명	: 품질관리 > 첨부파일
	설		명	: 문서번호에 연결된 파일 리스트 조회
	생	성	자	: 정승원
	생	성	일	: 2020-04-27
	수  정   이  력	: 
	-->
	<query id="GetQmFileList" version="00001">
		<statement>
			<![CDATA[
				--
				-- Id : GetQmFileList
				-- Version : 00001
				
				SELECT 
						DOCID
					,	SEQNUMBER
					,	FILENAME
					,	FILEDATA
					,	DESCRIPTION
					,	CREATOR
					,	CONVERT(VARCHAR(10), CREATEDTIME, 120) AS CREATEDTIME
				FROM 	UL_QMFILE
				WHERE DOCID = '$!{DOCID}'
				ORDER BY SEQNUMBER
			]]>
		</statement>
	</query>
	
	<!--
	프 로 그 램 명	: 품질관리 > 불량관리 > 불량통지서 등록
	설		명	: 불량통지서 등록화면의 CliamNumber 등록시 UL_CAPA테이블 업데이트 할 데이터 조회
	생	성	자	: 강유라
	생	성	일	: 2020-05-12
	수  정   이  력	: 
	-->
	<query id="GetCapaDocIdToUpdate" version="00001">
		<statement>
			<![CDATA[
				--
				-- Id : GetCapaDocIdToUpdate
				-- Version : 00001	
				SELECT 
						UC.DOCID
						
				FROM 	UL_CAPA UC
				WHERE 	1 = 1
				AND 	UC.CLAIMNUMBER ='$!{CLAIMNUMBER}'
				AND 	ISNULL(UC.DEFECTDOCID,'')=''
			]]>
		</statement>
	</query>
	
	<!--
	프 로 그 램 명	: 품질관리 > 불량관리 > 불량통지서 등록
	설		명	: 불량통지서 등록화면의 발행번호와 ClaimNo맵핑 정보를 확인
	생	성	자	: 이준용
	생	성	일	: 2020-10-15
	수  정   이  력	: 
	-->
	<query id="GetDefClaimMappingInfo" version="00001">
		<statement>
			<![CDATA[
				--
				-- Id : GetDefClaimMappingInfo
				-- Version : 00001	
					SELECT 
						CA.DOCID
					,	CA.CLAIMNUMBER
					FROM UL_CAPA CA
					WHERE 1=1
						AND CLAIMNUMBER = '$!{CLAIMNUMBER}' 
						AND DEFECTDOCID = '$!{DEFECTDOCID}'
			]]>
		</statement>
	</query>

	<!--
	프 로 그 램 명	: 품질관리 > 현황조회 > 오버홀 진행현황
	설		명	: 오버홀 진행현황 데이터 조회(고객사별)
	생	성	자	: 강유라
	생	성	일	: 2020-06-01
	수  정   이  력	: 
	-->
	<query id="SelectXMgtOverhaulStatusCustomer" version="00001">
		<statement>
			<![CDATA[
				--
				-- Id : SelectXMgtOverhaulStatusCustomer
				-- Version : 00001	
				WITH CONDITION AS (
									--전제적인 조회조건 적용하여 조회
									SELECT 
											XM.CUSTOMERID
										,	XM.PROGRESSSTATE
										--, 	CP.PUBLISHDATE
										,	XM.PUBLISHDATE
									FROM 	UL_XMANAGE 			XM 
									--INNER JOIN UL_CAPA 			CP ON XM.CLAIMNUMBER = CP.CLAIMNUMBER
									WHERE 	1 =1 
									AND 	XM.CHARGETYPE ='Paid' -- 유상
									AND 	XM.XTYPE ='RegularOH' -- 오버홀
									AND		XM.PROGRESSSTATE !='Cancel'
									--AND		CONVERT(DATE,'$!{P_FROMDATE}') < CONVERT(DATE,CP.PUBLISHDATE) --현재 년도 7월~ 내년 6월까지
									--AND		CONVERT(DATE,CP.PUBLISHDATE) <= CONVERT(DATE,'$!{P_TODATE}') 
									AND		CONVERT(DATE,'$!{P_FROMDATE}') < CONVERT(DATE,XM.PUBLISHDATE) --현재 년도 7월~ 내년 6월까지
									AND		CONVERT(DATE,XM.PUBLISHDATE) <= CONVERT(DATE,'$!{P_TODATE}') 
									--2020-06-11 강유라  CUSTOMERID 값없는것 제외
			                        AND		ISNULL(XM.CUSTOMERID,'') != ''
	
	
								  ),
	
					 CALCULATE AS (
                          		   --고객사별 연간 총 발생 / 진행 / 완료 건수
		                            SELECT 
		                                 	 XM.CUSTOMERID
		                              	,    COUNT(*)                       									 AS OCCUR
		                       			, 	 COUNT(*) - COUNT(CASE WHEN XM.PROGRESSSTATE ='Complete' THEN 1 END) AS PROGRESS
		                       			, 	 COUNT(CASE WHEN XM.PROGRESSSTATE ='Complete' THEN 1 END) 	 		 AS COMPLETE
		                           
		                            FROM    CONDITION                      XM 
		                            WHERE    1 =1 
		                           
		                            GROUP BY XM.CUSTOMERID		
									
							   	 ),
					PIVOTDT AS   (
									SELECT * FROM 						 
									(
										--고객사/월별 총 발생건수
										SELECT 
												DISTINCT 
												XM.CUSTOMERID
											,	COUNT(*) OVER( PARTITION BY DATEPART(MM,XM.PUBLISHDATE),XM.CUSTOMERID)	 				AS COUNT
											,	'OCCUR'+ CONVERT(VARCHAR,DATEPART(MM,XM.PUBLISHDATE)) 									AS CODEMONTH
										FROM 	CONDITION 																				XM
									
										WHERE 	 1 =1
		
									
										UNION ALL
									
										--고객사/월별 총 진행건수
										SELECT 
												DISTINCT 
												XM.CUSTOMERID
											,	COUNT(*) OVER( PARTITION BY DATEPART(MM,XM.PUBLISHDATE),XM.CUSTOMERID) 					AS COUNT
											, 	'PROGRESS' + CONVERT(VARCHAR,DATEPART(MM,XM.PUBLISHDATE)) 								AS CODEMONTH
											
										FROM 	CONDITION 																				XM
										
										WHERE 	1 = 1
										AND 	(XM.PROGRESSSTATE = 'Request' OR XM.PROGRESSSTATE = 'Working' ) -- 상태 인것
									
										UNION ALL
										
										--고객사/월별 총 완료건수
										SELECT 	
												DISTINCT 
												XM.CUSTOMERID
											,	COUNT(*) OVER( PARTITION BY DATEPART(MM,XM.PUBLISHDATE),XM.CUSTOMERID) AS COUNT
											,	XM.PROGRESSSTATE + CONVERT(VARCHAR,DATEPART(MM,XM.PUBLISHDATE)) 						AS CODEMONTH
										FROM 	CONDITION 																				XM
											
										WHERE 	1 = 1							
										AND 	XM.PROGRESSSTATE = 'Complete' -- 완료상태 인것
										
									) A								
									PIVOT
									(
										MAX(COUNT) 
										FOR A.CODEMONTH IN ( OCCUR7, PROGRESS7, COMPLETE7, OCCUR8, PROGRESS8, COMPLETE8
										, OCCUR9, PROGRESS9, COMPLETE9, OCCUR10, PROGRESS10, COMPLETE10, OCCUR11, PROGRESS11,COMPLETE11
										, OCCUR12, PROGRESS12,COMPLETE12, OCCUR1, PROGRESS1,COMPLETE1, OCCUR2, PROGRESS2,COMPLETE2
										, OCCUR3, PROGRESS3,COMPLETE3, OCCUR4, PROGRESS4,COMPLETE4,OCCUR5, PROGRESS5, COMPLETE5, OCCUR6, PROGRESS6,COMPLETE6) 
									)AS PV
							
								)

					SELECT 
							--XM.CUSTOMERID								AS TYPE
							(SELECT CustName FROM [UCKERP].[$!{DBLINKNAME}].[dbo].[uck_VIEW_Cust] WHERE CustSeq = XM.CUSTOMERID) AS TYPE
					
						,	ISNULL(MAX(XM.OCCUR7),0) 				   	AS OCCUR7
						,	ISNULL(MAX(XM.PROGRESS7),0) 				AS PROGRESS7
						,	ISNULL(MAX(XM.COMPLETE7),0)					AS COMPLETE7
						
						,	ISNULL(MAX(XM.OCCUR8),0)				  	AS OCCUR8
						,	ISNULL(MAX(XM.PROGRESS8),0) 				AS PROGRESS8
						,	ISNULL(MAX(XM.COMPLETE8),0) 				AS COMPLETE8
						
						,	ISNULL(MAX(XM.OCCUR9),0) 					AS OCCUR9
						,	ISNULL(MAX(XM.PROGRESS9),0) 				AS PROGRESS9
						,	ISNULL(MAX(XM.COMPLETE9),0) 				AS COMPLETE9
						
						,	ISNULL(MAX(XM.OCCUR10),0) 					AS OCCUR10
						,	ISNULL(MAX(XM.PROGRESS10),0) 				AS PROGRESS10
						,	ISNULL(MAX(XM.COMPLETE10),0) 				AS COMPLETE10
						
						,	ISNULL(MAX(XM.OCCUR11),0) 					AS OCCUR11
						,	ISNULL(MAX(XM.PROGRESS11),0) 				AS PROGRESS11
						,	ISNULL(MAX(XM.COMPLETE11),0) 				AS COMPLETE11
						
						,	ISNULL(MAX(XM.OCCUR12),0) 					AS OCCUR12
						,	ISNULL(MAX(XM.PROGRESS12),0) 				AS PROGRESS12
						,	ISNULL(MAX(XM.COMPLETE12),0) 				AS COMPLETE12
						
						,	ISNULL(MAX(XM.OCCUR1),0) 					AS OCCUR1
						,	ISNULL(MAX(XM.PROGRESS1),0) 				AS PROGRESS1
						,	ISNULL(MAX(XM.COMPLETE1),0) 				AS COMPLETE1
						
						,	ISNULL(MAX(XM.OCCUR2),0) 					AS OCCUR2
						,	ISNULL(MAX(XM.PROGRESS2),0) 				AS PROGRESS2
						,	ISNULL(MAX(XM.COMPLETE2),0) 				AS COMPLETE2
						
						,	ISNULL(MAX(XM.OCCUR3),0) 					AS OCCUR3
						,	ISNULL(MAX(XM.PROGRESS3),0) 				AS PROGRESS3
						,	ISNULL(MAX(XM.COMPLETE3),0) 				AS COMPLETE3
						
						,	ISNULL(MAX(XM.OCCUR4),0) 					AS OCCUR4
						,	ISNULL(MAX(XM.PROGRESS4),0) 				AS PROGRESS4
						,	ISNULL(MAX(XM.COMPLETE4),0)					AS COMPLETE4
						
						,	ISNULL(MAX(XM.OCCUR5),0) 					AS OCCUR5
						,	ISNULL(MAX(XM.PROGRESS5),0) 				AS PROGRESS5
						,	ISNULL(MAX(XM.COMPLETE5),0) 				AS COMPLETE5
						
						,	ISNULL(MAX(XM.OCCUR6),0) 					AS OCCUR6
						,	ISNULL(MAX(XM.PROGRESS6),0) 				AS PROGRESS6
						,	ISNULL(MAX(XM.COMPLETE6),0) 				AS COMPLETE6
						
						,	ISNULL(MAX(CC.OCCUR),0) 					AS OCCUR
						,	ISNULL(MAX(CC.PROGRESS),0) 					AS PROGRESS
						,	ISNULL(MAX(CC.COMPLETE),0) 					AS COMPLETE
						
						FROM PIVOTDT																							XM
						LEFT OUTER JOIN CALCULATE  																				CC  ON  CC.CUSTOMERID = XM.CUSTOMERID
							
						GROUP BY XM.CUSTOMERID

			]]>
		</statement>
	</query>

	<!--
	프 로 그 램 명	: 품질관리 > 현황조회 > 오버홀 진행현황
	설		명	: 오버홀 진행현황 데이터 조회(제품군별)
	생	성	자	: 강유라
	생	성	일	: 2020-06-01
	수  정   이  력	: 
	-->
	<query id="SelectXMgtOverhaulStatusItemFamily" version="00001">
		<statement>
			<![CDATA[
				--
				-- Id : SelectXMgtOverhaulStatusItemFamily
				-- Version : 00001	
				WITH CONDITION AS (
									--전제적인 조회조건 적용하여 조회
									SELECT 
											XM.ITEMFAMILY
										,	XM.PROGRESSSTATE
										--, 	CP.PUBLISHDATE
										, 	XM.PUBLISHDATE
									FROM 	UL_XMANAGE 			XM 
									--INNER JOIN UL_CAPA 			CP ON XM.CLAIMNUMBER = CP.CLAIMNUMBER
									WHERE 	1 =1 
									AND 	XM.CHARGETYPE ='Paid' -- 유상
									AND 	XM.XTYPE ='RegularOH' -- 오버홀
									AND		XM.PROGRESSSTATE !='Cancel'
									--AND		CONVERT(DATE,'$!{P_FROMDATE}') < CONVERT(DATE,CP.PUBLISHDATE) --현재 년도 7월~ 내년 6월까지
									--AND		CONVERT(DATE,CP.PUBLISHDATE) <= CONVERT(DATE,'$!{P_TODATE}') 
									AND		CONVERT(DATE,'$!{P_FROMDATE}') < CONVERT(DATE,XM.PUBLISHDATE) --현재 년도 7월~ 내년 6월까지
									AND		CONVERT(DATE,XM.PUBLISHDATE) <= CONVERT(DATE,'$!{P_TODATE}') 
									--2020-06-11 강유라  ITEMFAMILY 값없는것 제외
			                        AND		ISNULL(XM.ITEMFAMILY,'') != ''
	
								  ),
	
					CALCULATE AS (
                          		   --고객사별 연간 총 발생 / 진행 / 완료 건수
		                            SELECT 
		                                 	 XM.ITEMFAMILY
		                              	,    COUNT(*)                       									 AS OCCUR
		                       			, 	 COUNT(*) - COUNT(CASE WHEN XM.PROGRESSSTATE ='Complete' THEN 1 END) AS PROGRESS
		                       			, 	 COUNT(CASE WHEN XM.PROGRESSSTATE ='Complete' THEN 1 END) 	 		 AS COMPLETE
		                           
		                            FROM    CONDITION                      XM 
		                            WHERE    1 =1 
		                           
		                            GROUP BY XM.ITEMFAMILY		
									
							   	 ),
					PIVOTDT AS (
									SELECT * FROM 						 
									(
										--고객사/월별 총 발생건수
										SELECT 
												DISTINCT 
												XM.ITEMFAMILY
											,	COUNT(*) OVER( PARTITION BY DATEPART(MM,XM.PUBLISHDATE),XM.ITEMFAMILY)	 				AS COUNT
											,	'OCCUR'+ CONVERT(VARCHAR,DATEPART(MM,XM.PUBLISHDATE)) 									AS CODEMONTH
										FROM 	CONDITION 																				XM
									
										WHERE 	 1 =1
		
									
										UNION ALL
									
										--고객사/월별 총 진행건수
										SELECT 
												DISTINCT 
												XM.ITEMFAMILY
											,	COUNT(*) OVER( PARTITION BY DATEPART(MM,XM.PUBLISHDATE),XM.ITEMFAMILY) 					AS COUNT
											, 	'PROGRESS' + CONVERT(VARCHAR,DATEPART(MM,XM.PUBLISHDATE)) 								AS CODEMONTH
											
										FROM 	CONDITION 																				XM
										
										WHERE 	1 = 1
										AND 	(XM.PROGRESSSTATE = 'Request' OR XM.PROGRESSSTATE = 'Working' ) -- 상태 인것
									
										UNION ALL
										
										--고객사/월별 총 완료건수
										SELECT 	
												DISTINCT 
												XM.ITEMFAMILY
											,	COUNT(*) OVER( PARTITION BY DATEPART(MM,XM.PUBLISHDATE),XM.ITEMFAMILY) AS COUNT
											,	XM.PROGRESSSTATE + CONVERT(VARCHAR,DATEPART(MM,XM.PUBLISHDATE)) 						AS CODEMONTH
										FROM 	CONDITION 																				XM
											
										WHERE 	1 = 1							
										AND 	XM.PROGRESSSTATE = 'Complete' -- 완료상태 인것
										
									) A								
									PIVOT
									(
										MAX(COUNT) 
										FOR A.CODEMONTH IN ( OCCUR7, PROGRESS7, COMPLETE7, OCCUR8, PROGRESS8, COMPLETE8
										, OCCUR9, PROGRESS9, COMPLETE9, OCCUR10, PROGRESS10, COMPLETE10, OCCUR11, PROGRESS11,COMPLETE11
										, OCCUR12, PROGRESS12,COMPLETE12, OCCUR1, PROGRESS1,COMPLETE1, OCCUR2, PROGRESS2,COMPLETE2
										, OCCUR3, PROGRESS3,COMPLETE3, OCCUR4, PROGRESS4,COMPLETE4,OCCUR5, PROGRESS5, COMPLETE5, OCCUR6, PROGRESS6,COMPLETE6) 
									)AS PV
							
								)

					SELECT 
							XM.ITEMFAMILY								AS TYPE
					
						,	ISNULL(MAX(XM.OCCUR7),0) 				   	AS OCCUR7
						,	ISNULL(MAX(XM.PROGRESS7),0) 				AS PROGRESS7
						,	ISNULL(MAX(XM.COMPLETE7),0)					AS COMPLETE7
						
						,	ISNULL(MAX(XM.OCCUR8),0)				  	AS OCCUR8
						,	ISNULL(MAX(XM.PROGRESS8),0) 				AS PROGRESS8
						,	ISNULL(MAX(XM.COMPLETE8),0) 				AS COMPLETE8
						
						,	ISNULL(MAX(XM.OCCUR9),0) 					AS OCCUR9
						,	ISNULL(MAX(XM.PROGRESS9),0) 				AS PROGRESS9
						,	ISNULL(MAX(XM.COMPLETE9),0) 				AS COMPLETE9
						
						,	ISNULL(MAX(XM.OCCUR10),0) 					AS OCCUR10
						,	ISNULL(MAX(XM.PROGRESS10),0) 				AS PROGRESS10
						,	ISNULL(MAX(XM.COMPLETE10),0) 				AS COMPLETE10
						
						,	ISNULL(MAX(XM.OCCUR11),0) 					AS OCCUR11
						,	ISNULL(MAX(XM.PROGRESS11),0) 				AS PROGRESS11
						,	ISNULL(MAX(XM.COMPLETE11),0) 				AS COMPLETE11
						
						,	ISNULL(MAX(XM.OCCUR12),0) 					AS OCCUR12
						,	ISNULL(MAX(XM.PROGRESS12),0) 				AS PROGRESS12
						,	ISNULL(MAX(XM.COMPLETE12),0) 				AS COMPLETE12
						
						,	ISNULL(MAX(XM.OCCUR1),0) 					AS OCCUR1
						,	ISNULL(MAX(XM.PROGRESS1),0) 				AS PROGRESS1
						,	ISNULL(MAX(XM.COMPLETE1),0) 				AS COMPLETE1
						
						,	ISNULL(MAX(XM.OCCUR2),0) 					AS OCCUR2
						,	ISNULL(MAX(XM.PROGRESS2),0) 				AS PROGRESS2
						,	ISNULL(MAX(XM.COMPLETE2),0) 				AS COMPLETE2
						
						,	ISNULL(MAX(XM.OCCUR3),0) 					AS OCCUR3
						,	ISNULL(MAX(XM.PROGRESS3),0) 				AS PROGRESS3
						,	ISNULL(MAX(XM.COMPLETE3),0) 				AS COMPLETE3
						
						,	ISNULL(MAX(XM.OCCUR4),0) 					AS OCCUR4
						,	ISNULL(MAX(XM.PROGRESS4),0) 				AS PROGRESS4
						,	ISNULL(MAX(XM.COMPLETE4),0)					AS COMPLETE4
						
						,	ISNULL(MAX(XM.OCCUR5),0) 					AS OCCUR5
						,	ISNULL(MAX(XM.PROGRESS5),0) 				AS PROGRESS5
						,	ISNULL(MAX(XM.COMPLETE5),0) 				AS COMPLETE5
						
						,	ISNULL(MAX(XM.OCCUR6),0) 					AS OCCUR6
						,	ISNULL(MAX(XM.PROGRESS6),0) 				AS PROGRESS6
						,	ISNULL(MAX(XM.COMPLETE6),0) 				AS COMPLETE6
						
						,	ISNULL(MAX(CC.OCCUR),0) 					AS OCCUR
						,	ISNULL(MAX(CC.PROGRESS),0) 					AS PROGRESS
						,	ISNULL(MAX(CC.COMPLETE),0) 					AS COMPLETE
						
						FROM PIVOTDT																							XM
						LEFT OUTER JOIN CALCULATE  																				CC  ON  CC.ITEMFAMILY = XM.ITEMFAMILY
							
						GROUP BY XM.ITEMFAMILY
			]]>
		</statement>
	</query>

	<!--
	프 로 그 램 명	: 품질관리 > 현황조회 > 오버홀 진행현황
	설		명	: 오버홀 진행현황 데이터 조회(라인별)
	생	성	자	: 강유라
	생	성	일	: 2020-06-01
	수  정   이  력	: 
	-->
	<query id="SelectXMgtOverhaulStatusLine" version="00001">
		<statement>
			<![CDATA[
				--
				-- Id : SelectXMgtOverhaulStatusLine
				-- Version : 00001	
				WITH CONDITION AS (
									--전제적인 조회조건 적용하여 조회
									SELECT 
											XM.LINEID
										,	XM.PROGRESSSTATE
										--, 	CP.PUBLISHDATE
										,	XM.PUBLISHDATE
									FROM 	UL_XMANAGE 			XM 
									--INNER JOIN UL_CAPA 			CP ON XM.CLAIMNUMBER = CP.CLAIMNUMBER
									WHERE 	1 =1 
									AND 	XM.CHARGETYPE ='Paid' -- 유상
									AND 	XM.XTYPE ='RegularOH' -- 오버홀
									AND		XM.PROGRESSSTATE !='Cancel'
									--AND		CONVERT(DATE,'$!{P_FROMDATE}') < CONVERT(DATE,CP.PUBLISHDATE) --현재 년도 7월~ 내년 6월까지
									--AND		CONVERT(DATE,CP.PUBLISHDATE) <= CONVERT(DATE,'$!{P_TODATE}') 
									AND		CONVERT(DATE,'$!{P_FROMDATE}') < CONVERT(DATE,XM.PUBLISHDATE) --현재 년도 7월~ 내년 6월까지
									AND		CONVERT(DATE,XM.PUBLISHDATE) <= CONVERT(DATE,'$!{P_TODATE}') 
									--2020-06-11 강유라  LINEID 값없는것 제외
			                        AND		ISNULL(XM.LINEID,'') != ''
	
								  ),
	
					CALCULATE AS (
                          		   --고객사별 연간 총 발생 / 진행 / 완료 건수
		                            SELECT 
		                                 	 XM.LINEID
		                              	,    COUNT(*)                       									 AS OCCUR
		                       			, 	 COUNT(*) - COUNT(CASE WHEN XM.PROGRESSSTATE ='Complete' THEN 1 END) AS PROGRESS
		                       			, 	 COUNT(CASE WHEN XM.PROGRESSSTATE ='Complete' THEN 1 END) 	 		 AS COMPLETE
		                           
		                            FROM    CONDITION                      XM 
		                            WHERE    1 =1 
		                           
		                            GROUP BY XM.LINEID		
									
							   	 ),
					PIVOTDT AS (
									SELECT * FROM 						 
									(
										--고객사/월별 총 발생건수
										SELECT 
												DISTINCT 
												XM.LINEID
											,	COUNT(*) OVER( PARTITION BY DATEPART(MM,XM.PUBLISHDATE),XM.LINEID)	 				AS COUNT
											,	'OCCUR'+ CONVERT(VARCHAR,DATEPART(MM,XM.PUBLISHDATE)) 									AS CODEMONTH
										FROM 	CONDITION 																				XM
									
										WHERE 	 1 =1
		
									
										UNION ALL
									
										--고객사/월별 총 진행건수
										SELECT 
												DISTINCT 
												XM.LINEID
											,	COUNT(*) OVER( PARTITION BY DATEPART(MM,XM.PUBLISHDATE),XM.LINEID) 					AS COUNT
											, 	'PROGRESS' + CONVERT(VARCHAR,DATEPART(MM,XM.PUBLISHDATE)) 								AS CODEMONTH
											
										FROM 	CONDITION 																				XM
										
										WHERE 	1 = 1
										AND 	(XM.PROGRESSSTATE = 'Request' OR XM.PROGRESSSTATE = 'Working' ) -- 상태 인것
									
										UNION ALL
										
										--고객사/월별 총 완료건수
										SELECT 	
												DISTINCT 
												XM.LINEID
											,	COUNT(*) OVER( PARTITION BY DATEPART(MM,XM.PUBLISHDATE),XM.LINEID) AS COUNT
											,	XM.PROGRESSSTATE + CONVERT(VARCHAR,DATEPART(MM,XM.PUBLISHDATE)) 						AS CODEMONTH
										FROM 	CONDITION 																				XM
											
										WHERE 	1 = 1							
										AND 	XM.PROGRESSSTATE = 'Complete' -- 완료상태 인것
										
									) A								
									PIVOT
									(
										MAX(COUNT) 
										FOR A.CODEMONTH IN ( OCCUR7, PROGRESS7, COMPLETE7, OCCUR8, PROGRESS8, COMPLETE8
										, OCCUR9, PROGRESS9, COMPLETE9, OCCUR10, PROGRESS10, COMPLETE10, OCCUR11, PROGRESS11,COMPLETE11
										, OCCUR12, PROGRESS12,COMPLETE12, OCCUR1, PROGRESS1,COMPLETE1, OCCUR2, PROGRESS2,COMPLETE2
										, OCCUR3, PROGRESS3,COMPLETE3, OCCUR4, PROGRESS4,COMPLETE4,OCCUR5, PROGRESS5, COMPLETE5, OCCUR6, PROGRESS6,COMPLETE6) 
									)AS PV
							
								)

					SELECT 
							XM.LINEID									AS TYPE
					
						,	ISNULL(MAX(XM.OCCUR7),0) 				   	AS OCCUR7
						,	ISNULL(MAX(XM.PROGRESS7),0) 				AS PROGRESS7
						,	ISNULL(MAX(XM.COMPLETE7),0)					AS COMPLETE7
						
						,	ISNULL(MAX(XM.OCCUR8),0)				  	AS OCCUR8
						,	ISNULL(MAX(XM.PROGRESS8),0) 				AS PROGRESS8
						,	ISNULL(MAX(XM.COMPLETE8),0) 				AS COMPLETE8
						
						,	ISNULL(MAX(XM.OCCUR9),0) 					AS OCCUR9
						,	ISNULL(MAX(XM.PROGRESS9),0) 				AS PROGRESS9
						,	ISNULL(MAX(XM.COMPLETE9),0) 				AS COMPLETE9
						
						,	ISNULL(MAX(XM.OCCUR10),0) 					AS OCCUR10
						,	ISNULL(MAX(XM.PROGRESS10),0) 				AS PROGRESS10
						,	ISNULL(MAX(XM.COMPLETE10),0) 				AS COMPLETE10
						
						,	ISNULL(MAX(XM.OCCUR11),0) 					AS OCCUR11
						,	ISNULL(MAX(XM.PROGRESS11),0) 				AS PROGRESS11
						,	ISNULL(MAX(XM.COMPLETE11),0) 				AS COMPLETE11
						
						,	ISNULL(MAX(XM.OCCUR12),0) 					AS OCCUR12
						,	ISNULL(MAX(XM.PROGRESS12),0) 				AS PROGRESS12
						,	ISNULL(MAX(XM.COMPLETE12),0) 				AS COMPLETE12
						
						,	ISNULL(MAX(XM.OCCUR1),0) 					AS OCCUR1
						,	ISNULL(MAX(XM.PROGRESS1),0) 				AS PROGRESS1
						,	ISNULL(MAX(XM.COMPLETE1),0) 				AS COMPLETE1
						
						,	ISNULL(MAX(XM.OCCUR2),0) 					AS OCCUR2
						,	ISNULL(MAX(XM.PROGRESS2),0) 				AS PROGRESS2
						,	ISNULL(MAX(XM.COMPLETE2),0) 				AS COMPLETE2
						
						,	ISNULL(MAX(XM.OCCUR3),0) 					AS OCCUR3
						,	ISNULL(MAX(XM.PROGRESS3),0) 				AS PROGRESS3
						,	ISNULL(MAX(XM.COMPLETE3),0) 				AS COMPLETE3
						
						,	ISNULL(MAX(XM.OCCUR4),0) 					AS OCCUR4
						,	ISNULL(MAX(XM.PROGRESS4),0) 				AS PROGRESS4
						,	ISNULL(MAX(XM.COMPLETE4),0)					AS COMPLETE4
						
						,	ISNULL(MAX(XM.OCCUR5),0) 					AS OCCUR5
						,	ISNULL(MAX(XM.PROGRESS5),0) 				AS PROGRESS5
						,	ISNULL(MAX(XM.COMPLETE5),0) 				AS COMPLETE5
						
						,	ISNULL(MAX(XM.OCCUR6),0) 					AS OCCUR6
						,	ISNULL(MAX(XM.PROGRESS6),0) 				AS PROGRESS6
						,	ISNULL(MAX(XM.COMPLETE6),0) 				AS COMPLETE6
						
						,	ISNULL(MAX(CC.OCCUR),0) 					AS OCCUR
						,	ISNULL(MAX(CC.PROGRESS),0) 					AS PROGRESS
						,	ISNULL(MAX(CC.COMPLETE),0) 					AS COMPLETE
						
						FROM PIVOTDT																							XM
						LEFT OUTER JOIN CALCULATE  																				CC  ON  CC.LINEID = XM.LINEID

							
						GROUP BY XM.LINEID
			]]>
		</statement>
	</query>

	<!--
	프 로 그 램 명	: 품질관리 > 현황조회 > 시정예방조치 진행현황
	설		명	: 시정예방조치 진행현황 데이터 조회(해당팀별)
	생	성	자	: 강유라
	생	성	일	: 2020-06-02
	수  정   이  력	: 
	-->
	<query id="SelectCapaMgtStatusTeam" version="00001">
		<statement>
			<![CDATA[
				--
				-- Id : SelectCapaMgtStatusTeam
				-- Version : 00001	
				WITH CONDITION AS (
									--전제적인 조회조건 적용하여 조회
									SELECT 
											CPD.TEAMID
										,	CP.PROGRESSSTATE
										, 	CP.PUBLISHDATE
									
									FROM 	UL_CAPADTL 							CPD 
									INNER JOIN UL_CAPA 							CP ON CPD.DOCID = CP.DOCID
									WHERE 	1 =1 
					
									AND		CP.PROGRESSSTATE !='PublishCancel'
									AND		ISNULL(CP.CLAIMNUMBER ,'') != ''
									AND		CONVERT(DATE,'$!{P_FROMDATE}') < CONVERT(DATE, CP.PUBLISHDATE) --현재 년도 7월~ 내년 6월까지
									AND		CONVERT(DATE,CP.PUBLISHDATE) <= CONVERT(DATE,'$!{P_TODATE}') 
									--2020-06-11 강유라  TEAMID 값없는것 제외
			                        AND		ISNULL(CPD.TEAMID,'') != ''
	
								  ),
	
						 OCCUR AS(
									--고객사별 연간 총 발생건수
									SELECT 
											CP.TEAMID
										, 	COUNT(*)  							AS OCCUR
									
									FROM 	CONDITION 							CP 
									WHERE 	1 =1 
									
									GROUP BY CP.TEAMID
							  	 ),							
					  COMPLETE AS(
									--고객사별 연간 총 완료건수
									SELECT 
											CP.TEAMID
										, 	COUNT(*) 							AS COMPLETE
									
									FROM CONDITION 								CP 
									WHERE 	1 = 1
									AND		CP.PROGRESSSTATE ='ActionCompleted'
									
									GROUP BY CP.TEAMID
								),
					CALCULATE AS(
									--고객사별 연간 총 발생건수, 발생건수-완료건수 = 진행건수, 완료건수
									SELECT 
											OC.TEAMID
										, 	MAX(OC.OCCUR)						AS OCCUR
										,	MAX(OC.OCCUR-ISNULL(CT.COMPLETE,0))	AS PROGRESS
										,	MAX(ISNULL(CT.COMPLETE,0))			AS COMPLETE
									
									FROM OCCUR 									OC 
									LEFT OUTER JOIN COMPLETE 					CT ON OC.TEAMID = CT.TEAMID
									WHERE 	1 = 1
									
									GROUP BY OC.TEAMID			
									
							   ),
					PIVOTDT AS (
									SELECT * FROM 						 
									(
										--고객사/월별 총 발생건수
										SELECT 
												DISTINCT 
												CP.TEAMID
											,	COUNT(*) OVER( PARTITION BY DATEPART(MM,CP.PUBLISHDATE),CP.TEAMID)	 					AS COUNT
											,	'OCCUR'+ CONVERT(VARCHAR,DATEPART(MM,CP.PUBLISHDATE)) 									AS CODEMONTH
										FROM 	CONDITION 																				CP
									
										WHERE 	 1 =1
		
									
										UNION ALL
									
										--고객사/월별 총 진행건수
										SELECT 
												DISTINCT 
												CP.TEAMID
											,	COUNT(*) OVER( PARTITION BY DATEPART(MM,CP.PUBLISHDATE),CP.TEAMID) 						AS COUNT
											, 	'PROGRESS' + CONVERT(VARCHAR,DATEPART(MM,CP.PUBLISHDATE)) 								AS CODEMONTH
											
										FROM 	CONDITION 																				CP
										
										WHERE 	1 = 1
										AND 	(CP.PROGRESSSTATE = 'ClaimRequest' OR CP.PROGRESSSTATE = 'ClaimReceipt' 
												OR CP.PROGRESSSTATE = 'ResponseCompleted') -- 상태 인것
									
										UNION ALL
										
										--고객사/월별 총 완료건수
										SELECT 	
												DISTINCT 
												CP.TEAMID
											,	COUNT(*) OVER( PARTITION BY DATEPART(MM,CP.PUBLISHDATE),CP.TEAMID) 						AS COUNT
											,	'COMPLETE' + CONVERT(VARCHAR,DATEPART(MM,CP.PUBLISHDATE)) 								AS CODEMONTH
										FROM 	CONDITION 																				CP
											
										WHERE 	1 = 1							
										AND 	CP.PROGRESSSTATE = 'ActionCompleted' -- 완료상태 인것
										
									) A								
									PIVOT
									(
										MAX(COUNT) 
										FOR A.CODEMONTH IN ( OCCUR7, PROGRESS7, COMPLETE7, OCCUR8, PROGRESS8, COMPLETE8
										, OCCUR9, PROGRESS9, COMPLETE9, OCCUR10, PROGRESS10, COMPLETE10, OCCUR11, PROGRESS11,COMPLETE11
										, OCCUR12, PROGRESS12,COMPLETE12, OCCUR1, PROGRESS1,COMPLETE1, OCCUR2, PROGRESS2,COMPLETE2
										, OCCUR3, PROGRESS3,COMPLETE3, OCCUR4, PROGRESS4,COMPLETE4,OCCUR5, PROGRESS5, COMPLETE5, OCCUR6, PROGRESS6,COMPLETE6) 
									)AS PV
							
								)

					SELECT 
							CP.TEAMID						AS TYPE
						,	MAX(CDD.DICTIONARYNAME) 		AS TYPENAME
					
						,	ISNULL(MAX(CP.OCCUR7),0) 				   	AS OCCUR7
						,	ISNULL(MAX(CP.PROGRESS7),0) 				AS PROGRESS7
						,	ISNULL(MAX(CP.COMPLETE7),0)					AS COMPLETE7
						
						,	ISNULL(MAX(CP.OCCUR8),0)				  	AS OCCUR8
						,	ISNULL(MAX(CP.PROGRESS8),0) 				AS PROGRESS8
						,	ISNULL(MAX(CP.COMPLETE8),0) 				AS COMPLETE8
						
						,	ISNULL(MAX(CP.OCCUR9),0) 					AS OCCUR9
						,	ISNULL(MAX(CP.PROGRESS9),0) 				AS PROGRESS9
						,	ISNULL(MAX(CP.COMPLETE9),0) 				AS COMPLETE9
						
						,	ISNULL(MAX(CP.OCCUR10),0) 					AS OCCUR10
						,	ISNULL(MAX(CP.PROGRESS10),0) 				AS PROGRESS10
						,	ISNULL(MAX(CP.COMPLETE10),0) 				AS COMPLETE10
						
						,	ISNULL(MAX(CP.OCCUR11),0) 					AS OCCUR11
						,	ISNULL(MAX(CP.PROGRESS11),0) 				AS PROGRESS11
						,	ISNULL(MAX(CP.COMPLETE11),0) 				AS COMPLETE11
						
						,	ISNULL(MAX(CP.OCCUR12),0) 					AS OCCUR12
						,	ISNULL(MAX(CP.PROGRESS12),0) 				AS PROGRESS12
						,	ISNULL(MAX(CP.COMPLETE12),0) 				AS COMPLETE12
						
						,	ISNULL(MAX(CP.OCCUR1),0) 					AS OCCUR1
						,	ISNULL(MAX(CP.PROGRESS1),0) 				AS PROGRESS1
						,	ISNULL(MAX(CP.COMPLETE1),0) 				AS COMPLETE1
						
						,	ISNULL(MAX(CP.OCCUR2),0) 					AS OCCUR2
						,	ISNULL(MAX(CP.PROGRESS2),0) 				AS PROGRESS2
						,	ISNULL(MAX(CP.COMPLETE2),0) 				AS COMPLETE2
						
						,	ISNULL(MAX(CP.OCCUR3),0) 					AS OCCUR3
						,	ISNULL(MAX(CP.PROGRESS3),0) 				AS PROGRESS3
						,	ISNULL(MAX(CP.COMPLETE3),0) 				AS COMPLETE3
						
						,	ISNULL(MAX(CP.OCCUR4),0) 					AS OCCUR4
						,	ISNULL(MAX(CP.PROGRESS4),0) 				AS PROGRESS4
						,	ISNULL(MAX(CP.COMPLETE4),0)					AS COMPLETE4
						
						,	ISNULL(MAX(CP.OCCUR5),0) 					AS OCCUR5
						,	ISNULL(MAX(CP.PROGRESS5),0) 				AS PROGRESS5
						,	ISNULL(MAX(CP.COMPLETE5),0) 				AS COMPLETE5
						
						,	ISNULL(MAX(CP.OCCUR6),0) 					AS OCCUR6
						,	ISNULL(MAX(CP.PROGRESS6),0) 				AS PROGRESS6
						,	ISNULL(MAX(CP.COMPLETE6),0) 				AS COMPLETE6
						
						,	ISNULL(MAX(CC.OCCUR),0) 					AS OCCUR
						,	ISNULL(MAX(CC.PROGRESS),0) 					AS PROGRESS
						,	ISNULL(MAX(CC.COMPLETE),0) 					AS COMPLETE
						
						FROM PIVOTDT																							CP
						LEFT OUTER JOIN CALCULATE  																				CC  ON  CC.TEAMID = CP.TEAMID
						LEFT OUTER JOIN SF_CODE 																				CD  ON  CP.TEAMID = CD.CODEID
																																    AND CD.CODECLASSID ='TeamCodeQc'
						LEFT OUTER JOIN SF_DICTIONARY 																			CDD ON  CD.DICTIONARYID = CDD.DICTIONARYID
														  																			AND CDD.LANGUAGETYPE ='$!{_TXNINFO.LANGUAGETYPE}'
						GROUP BY CP.TEAMID
			]]>
		</statement>
	</query>

	<!--
	프 로 그 램 명	: 품질관리 > 현황조회 > 시정예방조치 진행현황
	설		명	: 시정예방조치 진행현황 데이터 조회(원인팀별)
	생	성	자	: 강유라
	생	성	일	: 2020-06-02
	수  정   이  력	: 
	-->
	<query id="SelectCapaMgtStatusReasonTeam" version="00001">
		<statement>
			<![CDATA[
				--
				-- Id : SelectCapaMgtStatusReasonTeam
				-- Version : 00001	
				WITH CONDITION AS (
									--전제적인 조회조건 적용하여 조회
									SELECT 
											CPD.REASONTEAMID
										,	CP.PROGRESSSTATE
										, 	CP.PUBLISHDATE
									
									FROM 	UL_CAPADTL 							CPD 
									INNER JOIN UL_CAPA 							CP ON CPD.DOCID = CP.DOCID
									WHERE 	1 =1 
					
									AND		CP.PROGRESSSTATE !='PublishCancel'
									AND		ISNULL(CP.CLAIMNUMBER ,'') != ''
									AND		CONVERT(DATE,'$!{P_FROMDATE}') < CONVERT(DATE, CP.PUBLISHDATE) --현재 년도 7월~ 내년 6월까지
									AND		CONVERT(DATE,CP.PUBLISHDATE) <= CONVERT(DATE,'$!{P_TODATE}') 
									--2020-06-11 강유라  REASONTEAMID 값없는것 제외
			                        AND		ISNULL(CPD.REASONTEAMID,'') != ''
	
								  ),
	
						 OCCUR AS(
									--고객사별 연간 총 발생건수
									SELECT 
											CP.REASONTEAMID
										, 	COUNT(*)  							AS OCCUR
									
									FROM 	CONDITION 							CP 
									WHERE 	1 =1 
									
									GROUP BY CP.REASONTEAMID
							  	 ),							
					  COMPLETE AS(
									--고객사별 연간 총 완료건수
									SELECT 
											CP.REASONTEAMID
										, 	COUNT(*) 							AS COMPLETE
									
									FROM CONDITION 								CP 
									WHERE 	1 = 1
									AND		CP.PROGRESSSTATE ='ActionCompleted'
									
									GROUP BY CP.REASONTEAMID
								),
					CALCULATE AS(
									--고객사별 연간 총 발생건수, 발생건수-완료건수 = 진행건수, 완료건수
									SELECT 
											OC.REASONTEAMID
										, 	MAX(OC.OCCUR)						AS OCCUR
										,	MAX(OC.OCCUR-ISNULL(CT.COMPLETE,0))	AS PROGRESS
										,	MAX(ISNULL(CT.COMPLETE,0))			AS COMPLETE
									
									FROM OCCUR 									OC 
									LEFT OUTER JOIN COMPLETE 					CT ON OC.REASONTEAMID = CT.REASONTEAMID
									WHERE 	1 = 1
									
									GROUP BY OC.REASONTEAMID			
									
							   ),
					PIVOTDT AS (
									SELECT * FROM 						 
									(
										--고객사/월별 총 발생건수
										SELECT 
												DISTINCT 
												CP.REASONTEAMID
											,	COUNT(*) OVER( PARTITION BY DATEPART(MM,CP.PUBLISHDATE),CP.REASONTEAMID)	 			AS COUNT
											,	'OCCUR'+ CONVERT(VARCHAR,DATEPART(MM,CP.PUBLISHDATE)) 									AS CODEMONTH
										FROM 	CONDITION 																				CP
									
										WHERE 	 1 =1
		
									
										UNION ALL
									
										--고객사/월별 총 진행건수
										SELECT 
												DISTINCT 
												CP.REASONTEAMID
											,	COUNT(*) OVER( PARTITION BY DATEPART(MM,CP.PUBLISHDATE),CP.REASONTEAMID) 				AS COUNT
											, 	'PROGRESS' + CONVERT(VARCHAR,DATEPART(MM,CP.PUBLISHDATE)) 								AS CODEMONTH
											
										FROM 	CONDITION 																				CP
										
										WHERE 	1 = 1
										AND 	(CP.PROGRESSSTATE = 'ClaimRequest' OR CP.PROGRESSSTATE = 'ClaimReceipt' 
												OR CP.PROGRESSSTATE = 'ResponseCompleted') -- 상태 인것
									
										UNION ALL
										
										--고객사/월별 총 완료건수
										SELECT 	
												DISTINCT 
												CP.REASONTEAMID
											,	COUNT(*) OVER( PARTITION BY DATEPART(MM,CP.PUBLISHDATE),CP.REASONTEAMID) 				AS COUNT
											,	'COMPLETE' + CONVERT(VARCHAR,DATEPART(MM,CP.PUBLISHDATE)) 								AS CODEMONTH
										FROM 	CONDITION 																				CP
											
										WHERE 	1 = 1							
										AND 	CP.PROGRESSSTATE = 'ActionCompleted' -- 완료상태 인것
										
									) A								
									PIVOT
									(
										MAX(COUNT) 
										FOR A.CODEMONTH IN ( OCCUR7, PROGRESS7, COMPLETE7, OCCUR8, PROGRESS8, COMPLETE8
										, OCCUR9, PROGRESS9, COMPLETE9, OCCUR10, PROGRESS10, COMPLETE10, OCCUR11, PROGRESS11,COMPLETE11
										, OCCUR12, PROGRESS12,COMPLETE12, OCCUR1, PROGRESS1,COMPLETE1, OCCUR2, PROGRESS2,COMPLETE2
										, OCCUR3, PROGRESS3,COMPLETE3, OCCUR4, PROGRESS4,COMPLETE4,OCCUR5, PROGRESS5, COMPLETE5, OCCUR6, PROGRESS6,COMPLETE6) 
									)AS PV
							
								)

					SELECT 
							CP.REASONTEAMID					AS TYPE
						,	MAX(CDD.DICTIONARYNAME) 		AS TYPENAME
					
						,	ISNULL(MAX(CP.OCCUR7),0) 				   	AS OCCUR7
						,	ISNULL(MAX(CP.PROGRESS7),0) 				AS PROGRESS7
						,	ISNULL(MAX(CP.COMPLETE7),0)					AS COMPLETE7
						
						,	ISNULL(MAX(CP.OCCUR8),0)				  	AS OCCUR8
						,	ISNULL(MAX(CP.PROGRESS8),0) 				AS PROGRESS8
						,	ISNULL(MAX(CP.COMPLETE8),0) 				AS COMPLETE8
						
						,	ISNULL(MAX(CP.OCCUR9),0) 					AS OCCUR9
						,	ISNULL(MAX(CP.PROGRESS9),0) 				AS PROGRESS9
						,	ISNULL(MAX(CP.COMPLETE9),0) 				AS COMPLETE9
						
						,	ISNULL(MAX(CP.OCCUR10),0) 					AS OCCUR10
						,	ISNULL(MAX(CP.PROGRESS10),0) 				AS PROGRESS10
						,	ISNULL(MAX(CP.COMPLETE10),0) 				AS COMPLETE10
						
						,	ISNULL(MAX(CP.OCCUR11),0) 					AS OCCUR11
						,	ISNULL(MAX(CP.PROGRESS11),0) 				AS PROGRESS11
						,	ISNULL(MAX(CP.COMPLETE11),0) 				AS COMPLETE11
						
						,	ISNULL(MAX(CP.OCCUR12),0) 					AS OCCUR12
						,	ISNULL(MAX(CP.PROGRESS12),0) 				AS PROGRESS12
						,	ISNULL(MAX(CP.COMPLETE12),0) 				AS COMPLETE12
						
						,	ISNULL(MAX(CP.OCCUR1),0) 					AS OCCUR1
						,	ISNULL(MAX(CP.PROGRESS1),0) 				AS PROGRESS1
						,	ISNULL(MAX(CP.COMPLETE1),0) 				AS COMPLETE1
						
						,	ISNULL(MAX(CP.OCCUR2),0) 					AS OCCUR2
						,	ISNULL(MAX(CP.PROGRESS2),0) 				AS PROGRESS2
						,	ISNULL(MAX(CP.COMPLETE2),0) 				AS COMPLETE2
						
						,	ISNULL(MAX(CP.OCCUR3),0) 					AS OCCUR3
						,	ISNULL(MAX(CP.PROGRESS3),0) 				AS PROGRESS3
						,	ISNULL(MAX(CP.COMPLETE3),0) 				AS COMPLETE3
						
						,	ISNULL(MAX(CP.OCCUR4),0) 					AS OCCUR4
						,	ISNULL(MAX(CP.PROGRESS4),0) 				AS PROGRESS4
						,	ISNULL(MAX(CP.COMPLETE4),0)					AS COMPLETE4
						
						,	ISNULL(MAX(CP.OCCUR5),0) 					AS OCCUR5
						,	ISNULL(MAX(CP.PROGRESS5),0) 				AS PROGRESS5
						,	ISNULL(MAX(CP.COMPLETE5),0) 				AS COMPLETE5
						
						,	ISNULL(MAX(CP.OCCUR6),0) 					AS OCCUR6
						,	ISNULL(MAX(CP.PROGRESS6),0) 				AS PROGRESS6
						,	ISNULL(MAX(CP.COMPLETE6),0) 				AS COMPLETE6
						
						,	ISNULL(MAX(CC.OCCUR),0) 					AS OCCUR
						,	ISNULL(MAX(CC.PROGRESS),0) 					AS PROGRESS
						,	ISNULL(MAX(CC.COMPLETE),0) 					AS COMPLETE
						
						FROM PIVOTDT																							CP
						LEFT OUTER JOIN CALCULATE  																				CC  ON  CC.REASONTEAMID = CP.REASONTEAMID
						LEFT OUTER JOIN SF_CODE 																				CD  ON  CP.REASONTEAMID = CD.CODEID
																																    AND CD.CODECLASSID ='TeamCodeQc'
						LEFT OUTER JOIN SF_DICTIONARY 																			CDD ON  CD.DICTIONARYID = CDD.DICTIONARYID
														  																			AND CDD.LANGUAGETYPE ='$!{_TXNINFO.LANGUAGETYPE}'
						GROUP BY CP.REASONTEAMID
			]]>
		</statement>
	</query>

	<!--
	프 로 그 램 명	: 품질관리 > 현황조회 > 시정예방조치 진행현황
	설		명	: 시정예방조치 진행현황 데이터 조회(불량구분별)
	생	성	자	: 강유라
	생	성	일	: 2020-06-02
	수  정   이  력	: 
	-->
	<query id="SelectCapaMgtStatusDefectType" version="00001">
		<statement>
			<![CDATA[
				--
				-- Id : SelectCapaMgtStatusDefectType
				-- Version : 00001	
				WITH CONDITION AS (
									--전제적인 조회조건 적용하여 조회
									SELECT 
											CPD.DEFECTTYPE
										,	CP.PROGRESSSTATE
										, 	CP.PUBLISHDATE
									
									FROM 	UL_CAPADTL 							CPD 
									INNER JOIN UL_CAPA 							CP ON CPD.DOCID = CP.DOCID
									WHERE 	1 =1 
					
									AND		CP.PROGRESSSTATE !='PublishCancel'
									AND		ISNULL(CP.CLAIMNUMBER ,'') != ''
									AND		CONVERT(DATE,'$!{P_FROMDATE}') < CONVERT(DATE, CP.PUBLISHDATE) --현재 년도 7월~ 내년 6월까지
									AND		CONVERT(DATE,CP.PUBLISHDATE) <= CONVERT(DATE,'$!{P_TODATE}')
									--2020-06-11 강유라  DEFECTTYPE 값없는것 제외
			                        AND		ISNULL(CPD.DEFECTTYPE,'') != '' 
	
								  ),
	
						 OCCUR AS(
									--고객사별 연간 총 발생건수
									SELECT 
											CP.DEFECTTYPE
										, 	COUNT(*)  							AS OCCUR
									
									FROM 	CONDITION 							CP 
									WHERE 	1 =1 
									
									GROUP BY CP.DEFECTTYPE
							  	 ),							
					  COMPLETE AS(
									--고객사별 연간 총 완료건수
									SELECT 
											CP.DEFECTTYPE
										, 	COUNT(*) 							AS COMPLETE
									
									FROM CONDITION 								CP 
									WHERE 	1 = 1
									AND		CP.PROGRESSSTATE ='ActionCompleted'
									
									GROUP BY CP.DEFECTTYPE
								),
					CALCULATE AS(
									--고객사별 연간 총 발생건수, 발생건수-완료건수 = 진행건수, 완료건수
									SELECT 
											OC.DEFECTTYPE
										, 	MAX(OC.OCCUR)						AS OCCUR
										,	MAX(OC.OCCUR-ISNULL(CT.COMPLETE,0))	AS PROGRESS
										,	MAX(ISNULL(CT.COMPLETE,0))			AS COMPLETE
									
									FROM OCCUR 									OC 
									LEFT OUTER JOIN COMPLETE 					CT ON OC.DEFECTTYPE = CT.DEFECTTYPE
									WHERE 	1 = 1
									
									GROUP BY OC.DEFECTTYPE			
									
							   ),
					PIVOTDT AS (
									SELECT * FROM 						 
									(
										--고객사/월별 총 발생건수
										SELECT 
												DISTINCT 
												CP.DEFECTTYPE
											,	COUNT(*) OVER( PARTITION BY DATEPART(MM,CP.PUBLISHDATE),CP.DEFECTTYPE)	 			AS COUNT
											,	'OCCUR'+ CONVERT(VARCHAR,DATEPART(MM,CP.PUBLISHDATE)) 									AS CODEMONTH
										FROM 	CONDITION 																				CP
									
										WHERE 	 1 =1
		
									
										UNION ALL
									
										--고객사/월별 총 진행건수
										SELECT 
												DISTINCT 
												CP.DEFECTTYPE
											,	COUNT(*) OVER( PARTITION BY DATEPART(MM,CP.PUBLISHDATE),CP.DEFECTTYPE) 				AS COUNT
											, 	'PROGRESS' + CONVERT(VARCHAR,DATEPART(MM,CP.PUBLISHDATE)) 								AS CODEMONTH
											
										FROM 	CONDITION 																				CP
										
										WHERE 	1 = 1
										AND 	(CP.PROGRESSSTATE = 'ClaimRequest' OR CP.PROGRESSSTATE = 'ClaimReceipt' 
												OR CP.PROGRESSSTATE = 'ResponseCompleted') -- 상태 인것
									
										UNION ALL
										
										--고객사/월별 총 완료건수
										SELECT 	
												DISTINCT 
												CP.DEFECTTYPE
											,	COUNT(*) OVER( PARTITION BY DATEPART(MM,CP.PUBLISHDATE),CP.DEFECTTYPE) 				AS COUNT
											,	'COMPLETE' + CONVERT(VARCHAR,DATEPART(MM,CP.PUBLISHDATE)) 								AS CODEMONTH
										FROM 	CONDITION 																				CP
											
										WHERE 	1 = 1							
										AND 	CP.PROGRESSSTATE = 'ActionCompleted' -- 완료상태 인것
										
									) A								
									PIVOT
									(
										MAX(COUNT) 
										FOR A.CODEMONTH IN ( OCCUR7, PROGRESS7, COMPLETE7, OCCUR8, PROGRESS8, COMPLETE8
										, OCCUR9, PROGRESS9, COMPLETE9, OCCUR10, PROGRESS10, COMPLETE10, OCCUR11, PROGRESS11,COMPLETE11
										, OCCUR12, PROGRESS12,COMPLETE12, OCCUR1, PROGRESS1,COMPLETE1, OCCUR2, PROGRESS2,COMPLETE2
										, OCCUR3, PROGRESS3,COMPLETE3, OCCUR4, PROGRESS4,COMPLETE4,OCCUR5, PROGRESS5, COMPLETE5, OCCUR6, PROGRESS6,COMPLETE6) 
									)AS PV
							
								)

					SELECT 
							CP.DEFECTTYPE					AS TYPE
						,	MAX(CDD.DICTIONARYNAME) 		AS TYPENAME
					
						,	ISNULL(MAX(CP.OCCUR7),0) 				   	AS OCCUR7
						,	ISNULL(MAX(CP.PROGRESS7),0) 				AS PROGRESS7
						,	ISNULL(MAX(CP.COMPLETE7),0)					AS COMPLETE7
						
						,	ISNULL(MAX(CP.OCCUR8),0)				  	AS OCCUR8
						,	ISNULL(MAX(CP.PROGRESS8),0) 				AS PROGRESS8
						,	ISNULL(MAX(CP.COMPLETE8),0) 				AS COMPLETE8
						
						,	ISNULL(MAX(CP.OCCUR9),0) 					AS OCCUR9
						,	ISNULL(MAX(CP.PROGRESS9),0) 				AS PROGRESS9
						,	ISNULL(MAX(CP.COMPLETE9),0) 				AS COMPLETE9
						
						,	ISNULL(MAX(CP.OCCUR10),0) 					AS OCCUR10
						,	ISNULL(MAX(CP.PROGRESS10),0) 				AS PROGRESS10
						,	ISNULL(MAX(CP.COMPLETE10),0) 				AS COMPLETE10
						
						,	ISNULL(MAX(CP.OCCUR11),0) 					AS OCCUR11
						,	ISNULL(MAX(CP.PROGRESS11),0) 				AS PROGRESS11
						,	ISNULL(MAX(CP.COMPLETE11),0) 				AS COMPLETE11
						
						,	ISNULL(MAX(CP.OCCUR12),0) 					AS OCCUR12
						,	ISNULL(MAX(CP.PROGRESS12),0) 				AS PROGRESS12
						,	ISNULL(MAX(CP.COMPLETE12),0) 				AS COMPLETE12
						
						,	ISNULL(MAX(CP.OCCUR1),0) 					AS OCCUR1
						,	ISNULL(MAX(CP.PROGRESS1),0) 				AS PROGRESS1
						,	ISNULL(MAX(CP.COMPLETE1),0) 				AS COMPLETE1
						
						,	ISNULL(MAX(CP.OCCUR2),0) 					AS OCCUR2
						,	ISNULL(MAX(CP.PROGRESS2),0) 				AS PROGRESS2
						,	ISNULL(MAX(CP.COMPLETE2),0) 				AS COMPLETE2
						
						,	ISNULL(MAX(CP.OCCUR3),0) 					AS OCCUR3
						,	ISNULL(MAX(CP.PROGRESS3),0) 				AS PROGRESS3
						,	ISNULL(MAX(CP.COMPLETE3),0) 				AS COMPLETE3
						
						,	ISNULL(MAX(CP.OCCUR4),0) 					AS OCCUR4
						,	ISNULL(MAX(CP.PROGRESS4),0) 				AS PROGRESS4
						,	ISNULL(MAX(CP.COMPLETE4),0)					AS COMPLETE4
						
						,	ISNULL(MAX(CP.OCCUR5),0) 					AS OCCUR5
						,	ISNULL(MAX(CP.PROGRESS5),0) 				AS PROGRESS5
						,	ISNULL(MAX(CP.COMPLETE5),0) 				AS COMPLETE5
						
						,	ISNULL(MAX(CP.OCCUR6),0) 					AS OCCUR6
						,	ISNULL(MAX(CP.PROGRESS6),0) 				AS PROGRESS6
						,	ISNULL(MAX(CP.COMPLETE6),0) 				AS COMPLETE6
						
						,	ISNULL(MAX(CC.OCCUR),0) 					AS OCCUR
						,	ISNULL(MAX(CC.PROGRESS),0) 					AS PROGRESS
						,	ISNULL(MAX(CC.COMPLETE),0) 					AS COMPLETE
						
						FROM PIVOTDT																							CP
						LEFT OUTER JOIN CALCULATE  																				CC  ON  CC.DEFECTTYPE = CP.DEFECTTYPE
						LEFT OUTER JOIN SF_CODE 																				CD  ON  CP.DEFECTTYPE = CD.CODEID
																																    AND CD.CODECLASSID ='DefectType'
						LEFT OUTER JOIN SF_DICTIONARY 																			CDD ON  CD.DICTIONARYID = CDD.DICTIONARYID
														  																			AND CDD.LANGUAGETYPE ='$!{_TXNINFO.LANGUAGETYPE}'
						GROUP BY CP.DEFECTTYPE
			]]>
		</statement>
	</query>

	<!--
	프 로 그 램 명	: 품질관리 > 현황조회 > 시정예방조치 진행현황
	설		명	: 시정예방조치 진행현황 데이터 조회(원인구분별)
	생	성	자	: 강유라
	생	성	일	: 2020-06-02
	수  정   이  력	: 
	-->
	<query id="SelectCapaMgtStatusReasonType" version="00001">
		<statement>
			<![CDATA[
				--
				-- Id : SelectCapaMgtStatusReasonType
				-- Version : 00001	
				WITH CONDITION AS (
									--전제적인 조회조건 적용하여 조회
									SELECT 
											CPD.REASONTYPE
										,	CP.PROGRESSSTATE
										, 	CP.PUBLISHDATE
									
									FROM 	UL_CAPADTL 							CPD 
									INNER JOIN UL_CAPA 							CP ON CPD.DOCID = CP.DOCID
									WHERE 	1 =1 
					
									AND		CP.PROGRESSSTATE !='PublishCancel'
									AND		ISNULL(CP.CLAIMNUMBER ,'') != ''
									AND		CONVERT(DATE,'$!{P_FROMDATE}') < CONVERT(DATE, CP.PUBLISHDATE) --현재 년도 7월~ 내년 6월까지
									AND		CONVERT(DATE,CP.PUBLISHDATE) <= CONVERT(DATE,'$!{P_TODATE}') 
									--2020-06-11 강유라  REASONTYPE 값없는것 제외
			                        AND		ISNULL(CPD.REASONTYPE,'') != '' 
	
								  ),
	
						 OCCUR AS(
									--고객사별 연간 총 발생건수
									SELECT 
											CP.REASONTYPE
										, 	COUNT(*)  							AS OCCUR
									
									FROM 	CONDITION 							CP 
									WHERE 	1 =1 
									
									GROUP BY CP.REASONTYPE
							  	 ),							
					  COMPLETE AS(
									--고객사별 연간 총 완료건수
									SELECT 
											CP.REASONTYPE
										, 	COUNT(*) 							AS COMPLETE
									
									FROM CONDITION 								CP 
									WHERE 	1 = 1
									AND		CP.PROGRESSSTATE ='ActionCompleted'
									
									GROUP BY CP.REASONTYPE
								),
					CALCULATE AS(
									--고객사별 연간 총 발생건수, 발생건수-완료건수 = 진행건수, 완료건수
									SELECT 
											OC.REASONTYPE
										, 	MAX(OC.OCCUR)						AS OCCUR
										,	MAX(OC.OCCUR-ISNULL(CT.COMPLETE,0))	AS PROGRESS
										,	MAX(ISNULL(CT.COMPLETE,0))			AS COMPLETE
									
									FROM OCCUR 									OC 
									LEFT OUTER JOIN COMPLETE 					CT ON OC.REASONTYPE = CT.REASONTYPE
									WHERE 	1 = 1
									
									GROUP BY OC.REASONTYPE			
									
							   ),
					PIVOTDT AS (
									SELECT * FROM 						 
									(
										--고객사/월별 총 발생건수
										SELECT 
												DISTINCT 
												CP.REASONTYPE
											,	COUNT(*) OVER( PARTITION BY DATEPART(MM,CP.PUBLISHDATE),CP.REASONTYPE)	 			AS COUNT
											,	'OCCUR'+ CONVERT(VARCHAR,DATEPART(MM,CP.PUBLISHDATE)) 									AS CODEMONTH
										FROM 	CONDITION 																				CP
									
										WHERE 	 1 =1
		
									
										UNION ALL
									
										--고객사/월별 총 진행건수
										SELECT 
												DISTINCT 
												CP.REASONTYPE
											,	COUNT(*) OVER( PARTITION BY DATEPART(MM,CP.PUBLISHDATE),CP.REASONTYPE) 				AS COUNT
											, 	'PROGRESS' + CONVERT(VARCHAR,DATEPART(MM,CP.PUBLISHDATE)) 								AS CODEMONTH
											
										FROM 	CONDITION 																				CP
										
										WHERE 	1 = 1
										AND 	(CP.PROGRESSSTATE = 'ClaimRequest' OR CP.PROGRESSSTATE = 'ClaimReceipt' 
												OR CP.PROGRESSSTATE = 'ResponseCompleted') -- 상태 인것
									
										UNION ALL
										
										--고객사/월별 총 완료건수
										SELECT 	
												DISTINCT 
												CP.REASONTYPE
											,	COUNT(*) OVER( PARTITION BY DATEPART(MM,CP.PUBLISHDATE),CP.REASONTYPE) 				AS COUNT
											,	'COMPLETE' + CONVERT(VARCHAR,DATEPART(MM,CP.PUBLISHDATE)) 								AS CODEMONTH
										FROM 	CONDITION 																				CP
											
										WHERE 	1 = 1							
										AND 	CP.PROGRESSSTATE = 'ActionCompleted' -- 완료상태 인것
										
									) A								
									PIVOT
									(
										MAX(COUNT) 
										FOR A.CODEMONTH IN ( OCCUR7, PROGRESS7, COMPLETE7, OCCUR8, PROGRESS8, COMPLETE8
										, OCCUR9, PROGRESS9, COMPLETE9, OCCUR10, PROGRESS10, COMPLETE10, OCCUR11, PROGRESS11,COMPLETE11
										, OCCUR12, PROGRESS12,COMPLETE12, OCCUR1, PROGRESS1,COMPLETE1, OCCUR2, PROGRESS2,COMPLETE2
										, OCCUR3, PROGRESS3,COMPLETE3, OCCUR4, PROGRESS4,COMPLETE4,OCCUR5, PROGRESS5, COMPLETE5, OCCUR6, PROGRESS6,COMPLETE6) 
									)AS PV
							
								)

					SELECT 
							CP.REASONTYPE					AS TYPE
						,	MAX(CDD.DICTIONARYNAME) 		AS TYPENAME
					
						,	ISNULL(MAX(CP.OCCUR7),0) 				   	AS OCCUR7
						,	ISNULL(MAX(CP.PROGRESS7),0) 				AS PROGRESS7
						,	ISNULL(MAX(CP.COMPLETE7),0)					AS COMPLETE7
						
						,	ISNULL(MAX(CP.OCCUR8),0)				  	AS OCCUR8
						,	ISNULL(MAX(CP.PROGRESS8),0) 				AS PROGRESS8
						,	ISNULL(MAX(CP.COMPLETE8),0) 				AS COMPLETE8
						
						,	ISNULL(MAX(CP.OCCUR9),0) 					AS OCCUR9
						,	ISNULL(MAX(CP.PROGRESS9),0) 				AS PROGRESS9
						,	ISNULL(MAX(CP.COMPLETE9),0) 				AS COMPLETE9
						
						,	ISNULL(MAX(CP.OCCUR10),0) 					AS OCCUR10
						,	ISNULL(MAX(CP.PROGRESS10),0) 				AS PROGRESS10
						,	ISNULL(MAX(CP.COMPLETE10),0) 				AS COMPLETE10
						
						,	ISNULL(MAX(CP.OCCUR11),0) 					AS OCCUR11
						,	ISNULL(MAX(CP.PROGRESS11),0) 				AS PROGRESS11
						,	ISNULL(MAX(CP.COMPLETE11),0) 				AS COMPLETE11
						
						,	ISNULL(MAX(CP.OCCUR12),0) 					AS OCCUR12
						,	ISNULL(MAX(CP.PROGRESS12),0) 				AS PROGRESS12
						,	ISNULL(MAX(CP.COMPLETE12),0) 				AS COMPLETE12
						
						,	ISNULL(MAX(CP.OCCUR1),0) 					AS OCCUR1
						,	ISNULL(MAX(CP.PROGRESS1),0) 				AS PROGRESS1
						,	ISNULL(MAX(CP.COMPLETE1),0) 				AS COMPLETE1
						
						,	ISNULL(MAX(CP.OCCUR2),0) 					AS OCCUR2
						,	ISNULL(MAX(CP.PROGRESS2),0) 				AS PROGRESS2
						,	ISNULL(MAX(CP.COMPLETE2),0) 				AS COMPLETE2
						
						,	ISNULL(MAX(CP.OCCUR3),0) 					AS OCCUR3
						,	ISNULL(MAX(CP.PROGRESS3),0) 				AS PROGRESS3
						,	ISNULL(MAX(CP.COMPLETE3),0) 				AS COMPLETE3
						
						,	ISNULL(MAX(CP.OCCUR4),0) 					AS OCCUR4
						,	ISNULL(MAX(CP.PROGRESS4),0) 				AS PROGRESS4
						,	ISNULL(MAX(CP.COMPLETE4),0)					AS COMPLETE4
						
						,	ISNULL(MAX(CP.OCCUR5),0) 					AS OCCUR5
						,	ISNULL(MAX(CP.PROGRESS5),0) 				AS PROGRESS5
						,	ISNULL(MAX(CP.COMPLETE5),0) 				AS COMPLETE5
						
						,	ISNULL(MAX(CP.OCCUR6),0) 					AS OCCUR6
						,	ISNULL(MAX(CP.PROGRESS6),0) 				AS PROGRESS6
						,	ISNULL(MAX(CP.COMPLETE6),0) 				AS COMPLETE6
						
						,	ISNULL(MAX(CC.OCCUR),0) 					AS OCCUR
						,	ISNULL(MAX(CC.PROGRESS),0) 					AS PROGRESS
						,	ISNULL(MAX(CC.COMPLETE),0) 					AS COMPLETE
						
						FROM PIVOTDT																							CP
						LEFT OUTER JOIN CALCULATE  																				CC  ON  CC.REASONTYPE = CP.REASONTYPE
						LEFT OUTER JOIN SF_CODE 																				CD  ON  CP.REASONTYPE = CD.CODEID
																																    AND CD.CODECLASSID ='ReasonType'
						LEFT OUTER JOIN SF_DICTIONARY 																			CDD ON  CD.DICTIONARYID = CDD.DICTIONARYID
														  																			AND CDD.LANGUAGETYPE ='$!{_TXNINFO.LANGUAGETYPE}'
						GROUP BY CP.REASONTYPE
			]]>
		</statement>
	</query>

	<!--
	프 로 그 램 명	: 품질관리 > 현황조회 > 클레임현황
	설		명	: 클레임현황 조회
	생	성	자	: 강유라
	생	성	일	: 2020-06-04
	수  정   이  력	: 
	-->
	<query id="SelectXmCapaStatus" version="00001">
		<statement>
			<![CDATA[
				--
				-- Id : SelectXmCapaStatus
				-- Version : 00001	
				WITH CONDITION AS (
			                           --전제적인 조회조건 적용하여 조회 UL_XMANAGE
			                           SELECT 
			   
			                                 	XM.PROGRESSSTATE
			                              ,   	DATEPART(MM,CP.PUBLISHDATE)  															AS PUBLISHDATE
			                              ,   	DATEDIFF(DAY, CONVERT(DATE, CP.PUBLISHDATE),CONVERT(DATE,XM.COMPLETEDATE)) 				AS  COMPLETEDAY
			                              ,  	 XM.ORDERPRICE --수주액
			                              ,   	ORDERMONTH  ORDERMONTH -- 수주월
			                              ,   	XM.SALESPRICE --매출액
			                              ,   	XM.SALESMONTH--매출월
			                              ,   	XM.FIXEDCOST -- 고정비
			                              ,  	 XM.VARIABLECOST -- 변동비
			                              ,   	XM.PROCESSMONTH-- 처리월
			                           
			                           FROM    	UL_XMANAGE          																	XM 
			                           INNER JOIN UL_CAPA          																		CP ON XM.CLAIMNUMBER = CP.CLAIMNUMBER
			                           WHERE    1 =1                   
			                           AND      XM.PROGRESSSTATE !='Cancel'
			                           AND      CONVERT(DATE,'$!{P_FROMDATE}') < CONVERT(DATE,CP.PUBLISHDATE) --현재 년도 7월~ 내년 6월까지
			                           AND      CONVERT(DATE,CP.PUBLISHDATE) <= CONVERT(DATE,'$!{P_TODATE}')
   
		                          ),
                          CAL AS (
         
                          			   SELECT 	DISTINCT
                                 				XM.PUBLISHDATE 																						AS MONTH
                                 		 ,		COUNT(*) OVER (PARTITION BY XM.PUBLISHDATE) 														AS OCCUR
                           				 ,   	COUNT(*) OVER (PARTITION BY XM.PUBLISHDATE)
                           				 		- COUNT (CASE WHEN XM.PROGRESSSTATE = 'Complete' THEN 1 END) OVER (PARTITION BY XM.PUBLISHDATE)   	AS PROGRESS
                             			 ,   	COUNT (CASE WHEN XM.PROGRESSSTATE = 'Complete' THEN 1 END) OVER (PARTITION BY XM.PUBLISHDATE) 		AS COMPLETE
                             			 ,  	SUM(XM.COMPLETEDAY) OVER  (PARTITION BY XM.PUBLISHDATE) 											AS COMPLETEDAYSUM

                           				FROM 	CONDITION 																							XM
                     			), 
                   MONTHLIST AS(
										SELECT  'MON1'			AS MONTH UNION ALL
										SELECT  'MON2'			AS MONTH UNION ALL
										SELECT	'MON3'			AS MONTH UNION ALL
										SELECT	'MON4'			AS MONTH UNION ALL
										SELECT	'MON5'			AS MONTH UNION ALL
										SELECT	'MON6'			AS MONTH UNION ALL
										SELECT	'MON7'			AS MONTH UNION ALL
										SELECT	'MON8'			AS MONTH UNION ALL
										SELECT	'MON9'			AS MONTH UNION ALL
										SELECT	'MON10'			AS MONTH UNION ALL
										SELECT	'MON11'			AS MONTH UNION ALL
										SELECT	'MON12'			AS MONTH UNION ALL
										SELECT	'SUM'			AS SUM			
							    ),  			
                   ORDERPRICE AS
                           		(
		                              	SELECT  DISTINCT										
		                                    	ISNULL('MON'+ CONVERT(VARCHAR,XM.ORDERMONTH),'SUM')													AS MONTH
		                                	 ,   SUM(XM.ORDERPRICE)  																				AS ORDERPRICESUM
									 	
		                              	FROM CONDITION																						 		XM
		                              	WHERE ISNULL(XM.ORDERMONTH,0) != 0
									 	GROUP BY XM.ORDERMONTH
									  	WITH ROLLUP
                           		),
                ORDERPRICESUM AS(
								   		SELECT
								
												PVORDERPRICE.MON1
											,	PVORDERPRICE.MON2
											,	PVORDERPRICE.MON3
											,	PVORDERPRICE.MON4
											,	PVORDERPRICE.MON5
											,	PVORDERPRICE.MON6
											,	PVORDERPRICE.MON7
											,	PVORDERPRICE.MON8
											,	PVORDERPRICE.MON9
											,	PVORDERPRICE.MON10
											,	PVORDERPRICE.MON11
											,	PVORDERPRICE.MON12
											,	PVORDERPRICE.SUM
													
									   	FROM 
									   	(
												SELECT 
														M.MONTH
													,	OP.ORDERPRICESUM
												FROM  MONTHLIST M 
												LEFT OUTER JOIN ORDERPRICE OP ON M.MONTH = OP.MONTH
										)A
										PIVOT 
										(
												SUM(ORDERPRICESUM)
												FOR A.MONTH IN (MON1,MON2,MON3,MON4,MON5,MON6,MON7,MON8,MON9,MON10,MON11,MON12,SUM)
												
										)PVORDERPRICE
										
							   ),
				  SALESPRICE AS(
			                            SELECT  DISTINCT											
			                                    ISNULL('MON'+ CONVERT(VARCHAR,XM.SALESMONTH),'SUM') 												AS MONTH
			                               ,    SUM(XM.SALESPRICE)  																				AS SALESPRICESUM
										 
			                              FROM CONDITION 																							XM
			                              WHERE ISNULL(XM.SALESMONTH,0) != 0																				
										  GROUP BY XM.SALESMONTH
										  WITH ROLLUP
                           		),
                SALESPRICESUM AS(
										  SELECT
										  										
												PVSALESPRICE.MON1
											,	PVSALESPRICE.MON2
											,	PVSALESPRICE.MON3
											,	PVSALESPRICE.MON4
											,	PVSALESPRICE.MON5
											,	PVSALESPRICE.MON6
											,	PVSALESPRICE.MON7
											,	PVSALESPRICE.MON8
											,	PVSALESPRICE.MON9
											,	PVSALESPRICE.MON10
											,	PVSALESPRICE.MON11
											,	PVSALESPRICE.MON12
											,	PVSALESPRICE.SUM
												
										   FROM 
										   (
												SELECT 
														M.MONTH
													,	SP.SALESPRICESUM
												FROM  MONTHLIST M 
												LEFT OUTER JOIN SALESPRICE SP ON M.MONTH = SP.MONTH					
											)A
											PIVOT 
											(
													SUM(SALESPRICESUM)
													FOR A.MONTH IN (MON1,MON2,MON3,MON4,MON5,MON6,MON7,MON8,MON9,MON10,MON11,MON12,SUM)
													
											)PVSALESPRICE
							    ),
                         COST AS(
										  SELECT 
													'0'MONTH
											 ,		'FIXEDCOSTSUM' 																					AS FIXEDCOSTSUM
											 ,		'VARIABLECOSTSUM' 																				AS VARIABLECOSTSUM
			
										  
										  UNION ALL
			
			                              SELECT DISTINCT
			                                   	 CONVERT(VARCHAR,XM.PROCESSMONTH) 																AS MONTH
			                                 ,   CONVERT(VARCHAR,SUM(XM.FIXEDCOST) OVER  (PARTITION BY XM.PROCESSMONTH))			 				AS FIXEDCOSTSUM
			                                 ,   CONVERT(VARCHAR,SUM(XM.VARIABLECOST) OVER  (PARTITION BY XM.PROCESSMONTH)) 						AS VARIABLECOSTSUM
			                              FROM CONDITION 																							XM
										  WHERE ISNULL(XM.PROCESSMONTH,0) != 0		
										  UNION ALL 
			
										  SELECT 
													'SUM' AS MONTH
											 ,   	CONVERT(VARCHAR,SUM(XM.FIXEDCOST)) 	 															AS FIXEDCOSTSUM	
											 ,   	CONVERT(VARCHAR,SUM(XM.VARIABLECOST)) 															AS VARIABLECOSTSUM
										 FROM CONDITION 																							XM
										 WHERE ISNULL(XM.PROCESSMONTH,0) != 0																								
			                     ),
						COSTRN AS(
										 SELECT  1 RN UNION ALL
										 SELECT	 2 RN

						   		 ),
					 COSTMULTI AS(
										 SELECT
												B.RN
											,	CASE WHEN RN=1 AND MONTH ='0' THEN FIXEDCOSTSUM
													 WHEN RN=2 AND MONTH ='0' THEN VARIABLECOSTSUM ELSE NULL END 									AS DATATYPE
		
											,	CASE WHEN RN=1 AND MONTH ='1' THEN FIXEDCOSTSUM
												 	 WHEN RN=2 AND MONTH ='1' THEN VARIABLECOSTSUM ELSE NULL END 									AS MON1
		
											,	CASE WHEN RN=1 AND MONTH ='2' THEN FIXEDCOSTSUM
													 WHEN RN=2 AND MONTH ='2' THEN VARIABLECOSTSUM ELSE NULL END 									AS MON2
		
											,	CASE WHEN RN=1 AND MONTH ='3' THEN FIXEDCOSTSUM
												 	 WHEN RN=2 AND MONTH ='3' THEN VARIABLECOSTSUM ELSE NULL END 									AS MON3
		
											,	CASE WHEN RN=1 AND MONTH ='4' THEN FIXEDCOSTSUM
												 	 WHEN RN=2 AND MONTH ='4' THEN VARIABLECOSTSUM ELSE NULL END 									AS MON4
		
											,	CASE WHEN RN=1 AND MONTH ='5' THEN FIXEDCOSTSUM
												 	 WHEN RN=2 AND MONTH ='5' THEN VARIABLECOSTSUM ELSE NULL END 									AS MON5
		
											,	CASE WHEN RN=1 AND MONTH ='6' THEN FIXEDCOSTSUM
												 	 WHEN RN=2 AND MONTH ='6' THEN VARIABLECOSTSUM ELSE NULL END 									AS MON6
		
											,	CASE WHEN RN=1 AND MONTH ='7' THEN FIXEDCOSTSUM
												 	 WHEN RN=2 AND MONTH ='7' THEN VARIABLECOSTSUM ELSE NULL END 									AS MON7
		
											,	CASE WHEN RN=1 AND MONTH ='8' THEN FIXEDCOSTSUM
													 WHEN RN=2 AND MONTH ='8' THEN VARIABLECOSTSUM ELSE NULL END 									AS MON8
		
											,	CASE WHEN RN=1 AND MONTH ='9' THEN FIXEDCOSTSUM
													 WHEN RN=2 AND MONTH ='9' THEN VARIABLECOSTSUM ELSE NULL END 									AS MON9
		
											,	CASE WHEN RN=1 AND MONTH ='10' THEN FIXEDCOSTSUM
													 WHEN RN=2 AND MONTH ='10' THEN VARIABLECOSTSUM ELSE NULL END 									AS MON10
		
											,	CASE WHEN RN=1 AND MONTH ='11' THEN FIXEDCOSTSUM
													 WHEN RN=2 AND MONTH ='11' THEN VARIABLECOSTSUM ELSE NULL END		 							AS MON11
		
											,	CASE WHEN RN=1 AND MONTH ='12' THEN FIXEDCOSTSUM
													 WHEN RN=2 AND MONTH ='12' THEN VARIABLECOSTSUM ELSE NULL END 									AS MON12
		
											,	CASE WHEN RN=1 AND MONTH ='SUM' THEN FIXEDCOSTSUM
													 WHEN RN=2 AND MONTH ='SUM' THEN VARIABLECOSTSUM ELSE NULL END 									AS SUM	
										FROM COST 																									A 
										INNER JOIN COSTRN 																							B ON 1=1

						   		  ),
					COSTUNPIVOT AS(
										SELECT 
												A.RN
											,   MAX(DATATYPE) 																						AS DATATYPE
											,   MAX(MON1) 																							AS MON1
											,   MAX(MON2)																			 				AS MON2
											,   MAX(MON3) 																							AS MON3
											,   MAX(MON4) 																							AS MON4
											,   MAX(MON5) 																							AS MON5
											,   MAX(MON6)										 													AS MON6
											,   MAX(MON7)	 																						AS MON7
											,   MAX(MON8) 																							AS MON8
											,   MAX(MON9) 																							AS MON9
											,   MAX(MON10) 																							AS MON10
											,   MAX(MON11) 																							AS MON11
											,   MAX(MON12) 																							AS MON12
											,   MAX(SUM)				 																			AS SUM
										
										FROM 
										COSTMULTI																									A
										GROUP BY A.RN
						   
						   		  ),
                     XMSUMCAL AS  (
         
                           				SELECT DISTINCT
					                           'SUM' 																								AS MONTH   
					                        ,  CONVERT (VARCHAR,COUNT(*))  																			AS OCCUR
					                        ,  CONVERT (VARCHAR,COUNT(*)  - COUNT (CASE WHEN XM.PROGRESSSTATE = 'Complete' THEN 1 END))   			AS PROGRESS
					                        ,  CONVERT (VARCHAR,COUNT (CASE WHEN XM.PROGRESSSTATE = 'Complete' THEN 1 END))  						AS COMPLETE
					                        ,  CASE WHEN COUNT(*) !=0 
									 				THEN CONVERT (VARCHAR,ROUND((COUNT(*)
									 					 - COUNT (CASE WHEN XM.PROGRESSSTATE = 'Complete' THEN 1 END))/CONVERT(NUMERIC,COUNT(*)),2) *100)
									 				ELSE NULL END 																					AS PROGRESSRATE
					                        ,  CASE WHEN COUNT(*) !=0 
													THEN CONVERT (VARCHAR,ROUND(COUNT (CASE WHEN XM.PROGRESSSTATE = 'Complete' THEN 1 END)/CONVERT(NUMERIC,COUNT(*)),2) *100)
													ELSE NULL END 																					AS COMPLETERATE
					                        ,  CASE WHEN COUNT (CASE WHEN XM.PROGRESSSTATE = 'Complete' THEN 1 END) !=0 
													THEN CONVERT (VARCHAR,SUM(XM.COMPLETEDAY)/COUNT (CASE WHEN XM.PROGRESSSTATE = 'Complete' THEN 1 END))  
													ELSE NULL END 																					AS AVGACTIONDAY          
					                              
               							 FROM CONDITION XM
                				  ),
                      XMTOPIVOT AS(

			                            SELECT 	
			                             	 	'0' 																								AS MONTH
			                                ,   'OCCUR' 																							AS OCCUR
			                                ,   'PROGRESS' 																							AS PROGRESS
			                                ,   'COMPLETE' 																							AS COMPLETE
			                                ,   'PROGRESSRATE' 																						AS PROGRESSRATE
			                                ,   'COMPLETERATE' 																						AS COMPLETERATE
			                                ,   'AVGACTIONDAY' 																						AS AVGACTIONDAY
			
			                              UNION ALL
			
			                              SELECT 
			
			                                 	CONVERT(VARCHAR,CA.MONTH) 																			AS MONTH
				                            ,   CONVERT(VARCHAR,CA.OCCUR) 																			AS OCCUR
				                            ,   CONVERT(VARCHAR,CA.PROGRESS) 																		AS PROGRESS
				                            ,   CONVERT(VARCHAR,CA.COMPLETE)						 												AS COMPLETE
				                            ,   CASE WHEN CA.OCCUR != 0 
													 THEN CONVERT(VARCHAR,ROUND(CONVERT(numeric,CA.PROGRESS)/CA.OCCUR * 100,2)) 
													 ELSE NULL END 																					AS PROGRESSRATE
				                            ,   CASE WHEN CA.OCCUR != 0  
													   THEN CONVERT(VARCHAR,ROUND(CONVERT(numeric,CA.COMPLETE)/CA.OCCUR * 100,2)) 
													   ELSE NULL END 																				AS COMPLETERATE
				                            ,   CASE WHEN CA.COMPLETE != 0  
													   THEN CONVERT(VARCHAR,ISNULL(COMPLETEDAYSUM/CA.COMPLETE,0))             
													   ELSE NULL END 																				AS AVGACTIONDAY
			                              FROM CAL 																									CA
			
			                       		  UNION ALL 
			
					                      SELECT 
					
					                            XS.MONTH
			                                 ,  XS.OCCUR
			                                 ,  XS.PROGRESS
			                                 ,  XS.COMPLETE
			                                 ,  XS.PROGRESSRATE
			                                 ,  XS.COMPLETERATE
			                                 ,  XS.AVGACTIONDAY
			
					                      FROM XMSUMCAL 																							XS
                           		),
                        MULTI AS(
			                              SELECT 1 AS RN UNION ALL
			                              SELECT 2 AS RN UNION ALL
			                              SELECT 3 AS RN UNION ALL
			                              SELECT 4 AS RN UNION ALL
			                              SELECT 5 AS RN UNION ALL
			                              SELECT 6 AS RN 
                           		),
                 XMPIVOTMULTI AS(
                              
                              			  SELECT 
			                                    B.RN
			                                 ,	CASE WHEN RN = 1 AND MONTH = '0' THEN A.OCCUR 
			                                   	     WHEN RN = 2 AND MONTH = '0' THEN A.PROGRESS    
			                                         WHEN RN = 3 AND MONTH = '0' THEN A.COMPLETE
			                                         WHEN RN = 4 AND MONTH = '0' THEN A.PROGRESSRATE
			                                         WHEN RN = 5 AND MONTH = '0' THEN A.COMPLETERATE
			                                         WHEN RN = 6 AND MONTH = '0' THEN A.AVGACTIONDAY ELSE NULL END 									AS DATATYPE
			
			                                 ,  CASE WHEN RN = 1 AND MONTH = '1' THEN A.OCCUR 
			                                         WHEN RN = 2 AND MONTH = '1' THEN A.PROGRESS    
			                                         WHEN RN = 3 AND MONTH = '1' THEN A.COMPLETE
			                                         WHEN RN = 4 AND MONTH = '1' THEN A.PROGRESSRATE
			                                         WHEN RN = 5 AND MONTH = '1' THEN A.COMPLETERATE
			                                         WHEN RN = 6 AND MONTH = '1' THEN A.AVGACTIONDAY ELSE NULL END	 								AS MON1
			
			                                 ,  CASE WHEN RN = 1 AND MONTH = '2' THEN A.OCCUR 
			                                         WHEN RN = 2 AND MONTH = '2' THEN A.PROGRESS    
			                                         WHEN RN = 3 AND MONTH = '2' THEN A.COMPLETE
			                                         WHEN RN = 4 AND MONTH = '2' THEN A.PROGRESSRATE
			                                         WHEN RN = 5 AND MONTH = '2' THEN A.COMPLETERATE
			                                         WHEN RN = 6 AND MONTH = '2' THEN A.AVGACTIONDAY ELSE NULL END	 								AS MON2
			                           
			                                 ,  CASE WHEN RN = 1 AND MONTH = '3' THEN A.OCCUR 
			                                         WHEN RN = 2 AND MONTH = '3' THEN A.PROGRESS    
			                                         WHEN RN = 3 AND MONTH = '3' THEN A.COMPLETE
			                                         WHEN RN = 4 AND MONTH = '3' THEN A.PROGRESSRATE
			                                         WHEN RN = 5 AND MONTH = '3' THEN A.COMPLETERATE
			                                         WHEN RN = 6 AND MONTH = '3' THEN A.AVGACTIONDAY ELSE NULL END 									AS MON3
			
			                                 ,  CASE WHEN RN = 1 AND MONTH = '4' THEN A.OCCUR 
			                                         WHEN RN = 2 AND MONTH = '4' THEN A.PROGRESS    
			                                         WHEN RN = 3 AND MONTH = '4' THEN A.COMPLETE
			                                         WHEN RN = 4 AND MONTH = '4' THEN A.PROGRESSRATE
			                                         WHEN RN = 5 AND MONTH = '4' THEN A.COMPLETERATE
			                                         WHEN RN = 6 AND MONTH = '4' THEN A.AVGACTIONDAY ELSE NULL END 									AS MON4
			
			                                 ,  CASE WHEN RN = 1 AND MONTH = '5' THEN A.OCCUR 
			                                         WHEN RN = 2 AND MONTH = '5' THEN A.PROGRESS    
			                                         WHEN RN = 3 AND MONTH = '5' THEN A.COMPLETE
			                                         WHEN RN = 4 AND MONTH = '5' THEN A.PROGRESSRATE
			                                         WHEN RN = 5 AND MONTH = '5' THEN A.COMPLETERATE
			                                         WHEN RN = 6 AND MONTH = '5' THEN A.AVGACTIONDAY ELSE NULL END 									AS MON5
			
			                                 ,  CASE WHEN RN = 1 AND MONTH = '6' THEN A.OCCUR 
			                                         WHEN RN = 2 AND MONTH = '6' THEN A.PROGRESS    
			                                         WHEN RN = 3 AND MONTH = '6' THEN A.COMPLETE
			                                         WHEN RN = 4 AND MONTH = '6' THEN A.PROGRESSRATE
			                                         WHEN RN = 5 AND MONTH = '6' THEN A.COMPLETERATE
			                                         WHEN RN = 6 AND MONTH = '6' THEN A.AVGACTIONDAY ELSE NULL END 									AS MON6
			
			                                        
			                                 ,  CASE WHEN RN = 1 AND MONTH = '7' THEN A.OCCUR 
			                                         WHEN RN = 2 AND MONTH = '7' THEN A.PROGRESS    
			                                         WHEN RN = 3 AND MONTH = '7' THEN A.COMPLETE
			                                         WHEN RN = 4 AND MONTH = '7' THEN A.PROGRESSRATE
			                                         WHEN RN = 5 AND MONTH = '7' THEN A.COMPLETERATE
			                                         WHEN RN = 6 AND MONTH = '7' THEN A.AVGACTIONDAY ELSE NULL END 									AS MON7
			
			                                        
			                                 ,  CASE WHEN RN = 1 AND MONTH = '8' THEN A.OCCUR 
			                                         WHEN RN = 2 AND MONTH = '8' THEN A.PROGRESS    
			                                         WHEN RN = 3 AND MONTH = '8' THEN A.COMPLETE
			                                         WHEN RN = 4 AND MONTH = '8' THEN A.PROGRESSRATE
			                                         WHEN RN = 5 AND MONTH = '8' THEN A.COMPLETERATE
			                                         WHEN RN = 6 AND MONTH = '8' THEN A.AVGACTIONDAY ELSE NULL END 									AS MON8
			
			                                        
			                                 ,  CASE WHEN RN = 1 AND MONTH = '9' THEN A.OCCUR 
			                                         WHEN RN = 2 AND MONTH = '9' THEN A.PROGRESS    
			                                         WHEN RN = 3 AND MONTH = '9' THEN A.COMPLETE
			                                         WHEN RN = 4 AND MONTH = '9' THEN A.PROGRESSRATE
			                                         WHEN RN = 5 AND MONTH = '9' THEN A.COMPLETERATE
			                                         WHEN RN = 6 AND MONTH = '9' THEN A.AVGACTIONDAY ELSE NULL END 									AS MON9
			
			                                        
			                                 ,  CASE WHEN RN = 1 AND MONTH = '10' THEN A.OCCUR 
			                                         WHEN RN = 2 AND MONTH = '10' THEN A.PROGRESS    
			                                         WHEN RN = 3 AND MONTH = '10' THEN A.COMPLETE
			                                         WHEN RN = 4 AND MONTH = '10' THEN A.PROGRESSRATE
			                                         WHEN RN = 5 AND MONTH = '10' THEN A.COMPLETERATE
			                                         WHEN RN = 6 AND MONTH = '10' THEN A.AVGACTIONDAY ELSE NULL END 								AS MON10
			
			                                        
			                                 ,  CASE WHEN RN = 1 AND MONTH = '11' THEN A.OCCUR 
			                                         WHEN RN = 2 AND MONTH = '11' THEN A.PROGRESS    
			                                         WHEN RN = 3 AND MONTH = '11' THEN A.COMPLETE
			                                         WHEN RN = 4 AND MONTH = '11' THEN A.PROGRESSRATE
			                                         WHEN RN = 5 AND MONTH = '11' THEN A.COMPLETERATE
			                                         WHEN RN = 6 AND MONTH = '11' THEN A.AVGACTIONDAY ELSE NULL END 								AS MON11
			
			                                 ,  CASE WHEN RN = 1 AND MONTH = '12' THEN A.OCCUR 
			                                         WHEN RN = 2 AND MONTH = '12' THEN A.PROGRESS    
			                                         WHEN RN = 3 AND MONTH = '12' THEN A.COMPLETE
			                                         WHEN RN = 4 AND MONTH = '12' THEN A.PROGRESSRATE
			                                         WHEN RN = 5 AND MONTH = '12' THEN A.COMPLETERATE
			                                         WHEN RN = 6 AND MONTH = '12' THEN A.AVGACTIONDAY ELSE NULL END 								AS MON12
			
			                         		,   CASE WHEN RN = 1 AND MONTH = 'SUM' THEN A.OCCUR 
			                                         WHEN RN = 2 AND MONTH = 'SUM' THEN A.PROGRESS    
			                                         WHEN RN = 3 AND MONTH = 'SUM' THEN A.COMPLETE
			                                         WHEN RN = 4 AND MONTH = 'SUM' THEN A.PROGRESSRATE
			                                         WHEN RN = 5 AND MONTH = 'SUM' THEN A.COMPLETERATE
			                                         WHEN RN = 6 AND MONTH = 'SUM' THEN A.AVGACTIONDAY ELSE NULL END 								AS SUM
			                           
			                              FROM 
			                              XMTOPIVOT 																								A 
			                              INNER JOIN MULTI B ON 1 = 1
                           		),
 				 CPCONDITION AS (
                           				  --전제적인 조회조건 적용하여 조회 UL_CAPA
                           				  SELECT 	
                                			 	CP.PROGRESSSTATE
				                            ,	DATEPART(MM,CP.PUBLISHDATE)  																		AS PUBLISHDATE
				                            ,	DATEDIFF(DAY,CP.PUBLISHDATE,CP.ACTIONDATE) 															AS  COMPLETEDAY
                           
				                          FROM	UL_CAPA         	 																				CP 
				                          WHERE	1 = 1                   
				                          AND   CP.PROGRESSSTATE !='PublishCancel'
				                     	  AND   ISNULL(CP.CLAIMNUMBER,'') != ''
				                          AND   CONVERT(DATE,'$!{P_FROMDATE}') < CONVERT(DATE,CP.PUBLISHDATE) --현재 년도 7월~ 내년 6월까지
				                          AND   CONVERT(DATE,CP.PUBLISHDATE) <= CONVERT(DATE,'$!{P_TODATE}') 
   
                          		), 
                       CPCAL AS (
				         
				                          SELECT DISTINCT
				                                 CP.PUBLISHDATE 																						AS MONTH
				                            ,	 COUNT(*) OVER (PARTITION BY CP.PUBLISHDATE) 															AS OCCUR
				                        	,    COUNT(*) OVER (PARTITION BY CP.PUBLISHDATE)
				                              	 - COUNT (CASE WHEN CP.PROGRESSSTATE = 'ActionCompleted' THEN 1 END) OVER (PARTITION BY CP.PUBLISHDATE) AS PROGRESS
				                            ,    COUNT (CASE WHEN CP.PROGRESSSTATE = 'ActionCompleted' THEN 1 END) OVER (PARTITION BY CP.PUBLISHDATE) 	AS COMPLETE
				                            ,    SUM(CP.COMPLETEDAY) OVER  (PARTITION BY CP.PUBLISHDATE) 												AS COMPLETEDAYSUM
				
				                          FROM	 CPCONDITION 																							CP
                     			),
                    CPSUMCAL AS (
         
				                          SELECT DISTINCT
					                             'SUM' 																									AS MONTH   
					                        ,    CONVERT (VARCHAR,COUNT(*))  	AS OCCUR
					                        ,    CONVERT (VARCHAR,COUNT(*)  - COUNT (CASE WHEN CP.PROGRESSSTATE = 'ActionCompleted' THEN 1 END))   		AS PROGRESS
					                        ,    CONVERT (VARCHAR,COUNT (CASE WHEN CP.PROGRESSSTATE = 'ActionCompleted' THEN 1 END))  					AS COMPLETE
					                        ,    CASE WHEN COUNT(*) != 0
												      THEN CONVERT (VARCHAR,ROUND((COUNT(*)- COUNT (CASE WHEN CP.PROGRESSSTATE = 'ActionCompleted' THEN 1 END))/CONVERT(NUMERIC,COUNT(*)),2) *100) 
													  ELSE NULL END 																					AS PROGRESSRATE
					                        ,    CASE WHEN COUNT(*) != 0
													  THEN CONVERT (VARCHAR,ROUND(COUNT (CASE WHEN CP.PROGRESSSTATE = 'ActionCompleted' THEN 1 END)/CONVERT(NUMERIC,COUNT(*)),2) *100) 
													  ELSE NULL END 																					AS COMPLETERATE
					                        ,    CASE WHEN COUNT (CASE WHEN CP.PROGRESSSTATE = 'ActionCompleted' THEN 1 END) != 0
													  THEN CONVERT (VARCHAR,SUM(CP.COMPLETEDAY)/COUNT (CASE WHEN CP.PROGRESSSTATE = 'ActionCompleted' THEN 1 END))  
													  ELSE NULL END 																					AS AVGACTIONDAY          
				                              
				                           FROM	 CPCONDITION 																							CP                 
                  				),
                    CPTOPIVOT AS(

				                           SELECT 
			                           			 '0' MONTH
			                                 --,   'OCCUR' OCCUR
			                                 ,   'PROGRESS' PROGRESS
			                                 ,   'COMPLETE' COMPLETE
			                                 ,   'PROGRESSRATE' PROGRESSRATE
			                                 ,   'COMPLETERATE' COMPLETERATE
			                                 ,   'AVGACTIONDAY' AVGACTIONDAY
				
				                           UNION ALL
				
			                               SELECT 
				                                 CONVERT(VARCHAR,CA.MONTH) 																				AS MONTH
				                              --,  CONVERT(VARCHAR,CA.OCCUR) 																				AS OCCUR
				                              ,  CONVERT(VARCHAR,CA.PROGRESS) 																			AS PROGRESS
				                              ,  CONVERT(VARCHAR,CA.COMPLETE) 																			AS COMPLETE
				                              ,  CASE WHEN CA.OCCUR != 0
													  THEN CONVERT(VARCHAR,ROUND(CONVERT(numeric,CA.PROGRESS)/CA.OCCUR * 100,2)) 
													  ELSE NULL END 																					AS PROGRESSRATE
				                              ,  CASE WHEN CA.OCCUR != 0 
													  THEN CONVERT(VARCHAR,ROUND(CONVERT(numeric,CA.COMPLETE)/CA.OCCUR * 100,2)) 
													  ELSE NULL END						 																AS COMPLETERATE
				                              ,  CASE WHEN CA.COMPLETE != 0
													  THEN CONVERT(VARCHAR,ISNULL(COMPLETEDAYSUM/CA.COMPLETE,0))             
													  ELSE NULL END 																					AS AVGACTIONDAY
				      
			                               FROM CPCAL 																									CA
				
				                       	   UNION ALL 
				
				                       	   SELECT 
												 CS.MONTH
			                                  --,  CS.OCCUR
			                                  ,  CS.PROGRESS
			                                  ,  CS.COMPLETE
			                                  ,  CS.PROGRESSRATE
			                                  ,  CS.COMPLETERATE
			                                  ,  CS.AVGACTIONDAY
				
				                       	   FROM CPSUMCAL 																							    CS
                           ),
            CPPIVOTMULTI AS(
                              
			                               SELECT 
			                                      B.RN
			                                  ,   CASE --WHEN RN = 1 AND MONTH = '0' THEN A.OCCUR 
			                                           WHEN RN = 2 AND MONTH = '0' THEN A.PROGRESS    
			                                           WHEN RN = 3 AND MONTH = '0' THEN A.COMPLETE
			                                       	   WHEN RN = 4 AND MONTH = '0' THEN A.PROGRESSRATE
			                                           WHEN RN = 5 AND MONTH = '0' THEN A.COMPLETERATE
			                                           WHEN RN = 6 AND MONTH = '0' THEN A.AVGACTIONDAY ELSE NULL END 									AS DATATYPE
			
			                                  ,   CASE --WHEN RN = 1 AND MONTH = '1' THEN A.OCCUR 
			                                           WHEN RN = 2 AND MONTH = '1' THEN A.PROGRESS    
			                                           WHEN RN = 3 AND MONTH = '1' THEN A.COMPLETE
			                                           WHEN RN = 4 AND MONTH = '1' THEN A.PROGRESSRATE
			                                           WHEN RN = 5 AND MONTH = '1' THEN A.COMPLETERATE
			                                           WHEN RN = 6 AND MONTH = '1' THEN A.AVGACTIONDAY ELSE NULL END 									AS MON1
			
			                                  ,   CASE --WHEN RN = 1 AND MONTH = '2' THEN A.OCCUR 
			                                           WHEN RN = 2 AND MONTH = '2' THEN A.PROGRESS    
			                                           WHEN RN = 3 AND MONTH = '2' THEN A.COMPLETE
			                                           WHEN RN = 4 AND MONTH = '2' THEN A.PROGRESSRATE
			                                           WHEN RN = 5 AND MONTH = '2' THEN A.COMPLETERATE
			                                           WHEN RN = 6 AND MONTH = '2' THEN A.AVGACTIONDAY ELSE NULL END 									AS MON2
			                           
			                                  ,   CASE --WHEN RN = 1 AND MONTH = '3' THEN A.OCCUR 
			                                           WHEN RN = 2 AND MONTH = '3' THEN A.PROGRESS    
			                                           WHEN RN = 3 AND MONTH = '3' THEN A.COMPLETE
			                                           WHEN RN = 4 AND MONTH = '3' THEN A.PROGRESSRATE
			                                           WHEN RN = 5 AND MONTH = '3' THEN A.COMPLETERATE
			                                           WHEN RN = 6 AND MONTH = '3' THEN A.AVGACTIONDAY ELSE NULL END 									AS MON3
			
			                                  ,   CASE --WHEN RN = 1 AND MONTH = '4' THEN A.OCCUR 
			                                           WHEN RN = 2 AND MONTH = '4' THEN A.PROGRESS    
			                                           WHEN RN = 3 AND MONTH = '4' THEN A.COMPLETE
			                                           WHEN RN = 4 AND MONTH = '4' THEN A.PROGRESSRATE
			                                           WHEN RN = 5 AND MONTH = '4' THEN A.COMPLETERATE
			                                           WHEN RN = 6 AND MONTH = '4' THEN A.AVGACTIONDAY ELSE NULL END 									AS MON4
			
			                                  ,   CASE --WHEN RN = 1 AND MONTH = '5' THEN A.OCCUR 
			                                           WHEN RN = 2 AND MONTH = '5' THEN A.PROGRESS    
			                                           WHEN RN = 3 AND MONTH = '5' THEN A.COMPLETE
			                                           WHEN RN = 4 AND MONTH = '5' THEN A.PROGRESSRATE
			                                           WHEN RN = 5 AND MONTH = '5' THEN A.COMPLETERATE
			                                           WHEN RN = 6 AND MONTH = '5' THEN A.AVGACTIONDAY ELSE NULL END 									AS MON5
			
			                                  ,   CASE --WHEN RN = 1 AND MONTH = '6' THEN A.OCCUR 
			                                           WHEN RN = 2 AND MONTH = '6' THEN A.PROGRESS    
			                                           WHEN RN = 3 AND MONTH = '6' THEN A.COMPLETE
			                                           WHEN RN = 4 AND MONTH = '6' THEN A.PROGRESSRATE
			                                           WHEN RN = 5 AND MONTH = '6' THEN A.COMPLETERATE
			                                           WHEN RN = 6 AND MONTH = '6' THEN A.AVGACTIONDAY ELSE NULL END 									AS MON6
			        
			                                  ,   CASE --WHEN RN = 1 AND MONTH = '7' THEN A.OCCUR 
			                                           WHEN RN = 2 AND MONTH = '7' THEN A.PROGRESS    
			                                           WHEN RN = 3 AND MONTH = '7' THEN A.COMPLETE
			                                           WHEN RN = 4 AND MONTH = '7' THEN A.PROGRESSRATE
			                                           WHEN RN = 5 AND MONTH = '7' THEN A.COMPLETERATE
			                                           WHEN RN = 6 AND MONTH = '7' THEN A.AVGACTIONDAY ELSE NULL END 									AS MON7
			
											  ,   CASE --WHEN RN = 1 AND MONTH = '8' THEN A.OCCUR 
			                                           WHEN RN = 2 AND MONTH = '8' THEN A.PROGRESS    
			                                           WHEN RN = 3 AND MONTH = '8' THEN A.COMPLETE
			                                           WHEN RN = 4 AND MONTH = '8' THEN A.PROGRESSRATE
			                                           WHEN RN = 5 AND MONTH = '8' THEN A.COMPLETERATE
			                                           WHEN RN = 6 AND MONTH = '8' THEN A.AVGACTIONDAY ELSE NULL END 									AS MON8
			       
			                                  ,   CASE --WHEN RN = 1 AND MONTH = '9' THEN A.OCCUR 
			                                           WHEN RN = 2 AND MONTH = '9' THEN A.PROGRESS    
			                                           WHEN RN = 3 AND MONTH = '9' THEN A.COMPLETE
			                                           WHEN RN = 4 AND MONTH = '9' THEN A.PROGRESSRATE
			                                           WHEN RN = 5 AND MONTH = '9' THEN A.COMPLETERATE
			                                           WHEN RN = 6 AND MONTH = '9' THEN A.AVGACTIONDAY ELSE NULL END 									AS MON9
			                                        
			                                  ,   CASE --WHEN RN = 1 AND MONTH = '10' THEN A.OCCUR 
			                                           WHEN RN = 2 AND MONTH = '10' THEN A.PROGRESS    
			                                           WHEN RN = 3 AND MONTH = '10' THEN A.COMPLETE
			                                           WHEN RN = 4 AND MONTH = '10' THEN A.PROGRESSRATE
			                                           WHEN RN = 5 AND MONTH = '10' THEN A.COMPLETERATE
			                                           WHEN RN = 6 AND MONTH = '10' THEN A.AVGACTIONDAY ELSE NULL END							 		AS MON10
			
			                                        
			                                  ,   CASE --WHEN RN = 1 AND MONTH = '11' THEN A.OCCUR 
			                                           WHEN RN = 2 AND MONTH = '11' THEN A.PROGRESS    
			                                           WHEN RN = 3 AND MONTH = '11' THEN A.COMPLETE
			                                           WHEN RN = 4 AND MONTH = '11' THEN A.PROGRESSRATE
			                                           WHEN RN = 5 AND MONTH = '11' THEN A.COMPLETERATE
			                                           WHEN RN = 6 AND MONTH = '11' THEN A.AVGACTIONDAY ELSE NULL END 									AS MON11
			
			                                  ,   CASE --WHEN RN = 1 AND MONTH = '12' THEN A.OCCUR 
			                                           WHEN RN = 2 AND MONTH = '12' THEN A.PROGRESS    
			                                           WHEN RN = 3 AND MONTH = '12' THEN A.COMPLETE
			                                           WHEN RN = 4 AND MONTH = '12' THEN A.PROGRESSRATE
			                                           WHEN RN = 5 AND MONTH = '12' THEN A.COMPLETERATE
			                                           WHEN RN = 6 AND MONTH = '12' THEN A.AVGACTIONDAY ELSE NULL END 									AS MON12
			
			                         		  ,   CASE --WHEN RN = 1 AND MONTH = 'SUM' THEN A.OCCUR 
			                                           WHEN RN = 2 AND MONTH = 'SUM' THEN A.PROGRESS    
			                                           WHEN RN = 3 AND MONTH = 'SUM' THEN A.COMPLETE
			                                           WHEN RN = 4 AND MONTH = 'SUM' THEN A.PROGRESSRATE
			                                           WHEN RN = 5 AND MONTH = 'SUM' THEN A.COMPLETERATE
			                                           WHEN RN = 6 AND MONTH = 'SUM' THEN A.AVGACTIONDAY ELSE NULL END 									AS SUM
			                           
			                              FROM 
			                              CPTOPIVOT 																									A 
			                              INNER JOIN MULTI 																								B ON 1 = 1
										  WHERE RN > 1
                          			)
                          			
		                            SELECT
		                                  A.RN
		                        	  ,   CASE WHEN MAX(DATATYPE) ='OCCUR' 
		                        	  		   THEN 'CLAIM' 
		                        	  		   ELSE 'CS'
		                        	  	  END 				AS MAIN
		                              ,   MAX(DATATYPE) 	AS DATATYPE
		                              ,   ISNULL(MAX(MON1),0) 		AS MON1
		                              ,   ISNULL(MAX(MON2),0) 		AS MON2
		                              ,   ISNULL(MAX(MON3),0)		 	AS MON3
		                              ,   ISNULL(MAX(MON4),0) 		AS MON4
		                              ,   ISNULL(MAX(MON5),0) 		AS MON5
		                              ,   ISNULL(MAX(MON6),0) 		AS MON6
		                              ,   ISNULL(MAX(MON7),0) 		AS MON7
		                              ,   ISNULL(MAX(MON8),0) 		AS MON8
		                              ,   ISNULL(MAX(MON9),0) 		AS MON9
		                              ,   ISNULL(MAX(MON10),0) 		AS MON10
		                              ,   ISNULL(MAX(MON11),0) 		AS MON11
		                              ,   ISNULL(MAX(MON12),0) 		AS MON12
		                      		  ,   ISNULL(MAX(SUM),0) 			AS SUM
		                        
		                           FROM XMPIVOTMULTI 		A
		                           GROUP BY A.RN
		                                                          
                          
                  				   UNION ALL

					               SELECT

					                       A.RN
					                   ,   CASE WHEN MAX(DATATYPE) ='OCCUR' 
		                        	  		   THEN 'CLAIM' 
		                        	  		   ELSE 'QUALITY'
		                        	  	   END 				AS MAIN
					                   ,   MAX(DATATYPE) 	AS DATATYPE
		                               ,   ISNULL(MAX(MON1),0) 		AS MON1
		                               ,   ISNULL(MAX(MON2),0) 		AS MON2
		                               ,   ISNULL(MAX(MON3),0) 		AS MON3
		                               ,   ISNULL(MAX(MON4),0) 		AS MON4
		                               ,   ISNULL(MAX(MON5),0)		AS MON5
		                               ,   ISNULL(MAX(MON6),0) 		AS MON6
		                               ,   ISNULL(MAX(MON7),0) 		AS MON7
		                               ,   ISNULL(MAX(MON8),0) 		AS MON8
		                               ,   ISNULL(MAX(MON9),0) 		AS MON9
		                               ,   ISNULL(MAX(MON10),0) 		AS MON10
		                               ,   ISNULL(MAX(MON11),0) 		AS MON11
		                               ,   ISNULL(MAX(MON12),0)		AS MON12
					                   ,   ISNULL(MAX(SUM),0) 		AS SUM
					                        
		                           FROM CPPIVOTMULTI 		A
		                           GROUP BY A.RN
					                           
								   UNION ALL

								   SELECT 
										   1 RN
									  ,    'PAIDCOST' 		AS MAIN
									  ,    'ORDERPRICESUM' 	AS DATATYPE
									  ,	   ISNULL(A.MON1,0)
									  ,	   ISNULL(A.MON2,0)
									  ,	   ISNULL(A.MON3,0)
									  ,	   ISNULL(A.MON4,0)
									  ,	   ISNULL(A.MON5,0)
									  ,	   ISNULL(A.MON6,0)
									  ,    ISNULL(A.MON7,0)
									  ,	   ISNULL(A.MON8,0)
									  ,	   ISNULL(A.MON9,0)
									  ,	   ISNULL(A.MON10,0)
									  ,	   ISNULL(A.MON11,0)
									  ,	   ISNULL(A.MON12,0)
									  ,	   ISNULL(A.SUM,0)
									  
								  FROM ORDERPRICESUM 		A
						              
								  UNION ALL

								  SELECT 
									      1 RN
									  ,   'PAIDCOST' MAIN
									  ,   'SALESPRICESUM'	 	AS DATATYPE
									  ,	  ISNULL(A.MON1,0)
								 	  ,   ISNULL(A.MON2,0)
									  ,   ISNULL(A.MON3,0)
									  ,	  ISNULL(A.MON4,0)
									  ,   ISNULL(A.MON5,0)
									  ,	  ISNULL(A.MON6,0)
									  ,	  ISNULL(A.MON7,0)
									  ,	  ISNULL(A.MON8,0)
									  ,   ISNULL(A.MON9,0)
									  ,	  ISNULL(A.MON10,0)
									  ,	  ISNULL(A.MON11,0)
									  ,	  ISNULL(A.MON12,0)
									  ,	  ISNULL(A.SUM,0)
								  FROM 	  SALESPRICESUM 	A
						
								  UNION ALL
						
								  SELECT 
									      A.RN
									  ,   'FREECOST' 		AS MAIN
									  ,   A.DATATYPE
									  ,	  ISNULL(A.MON1,0)
									  ,	  ISNULL(A.MON2,0)
									  ,	  ISNULL(A.MON3,0)
									  ,	  ISNULL(A.MON4,0)
									  ,	  ISNULL(A.MON5,0)
									  ,	  ISNULL(A.MON6,0)
									  ,	  ISNULL(A.MON7,0)
									  ,	  ISNULL(A.MON8,0)
									  ,	  ISNULL(A.MON9,0)
									  ,	  ISNULL(A.MON10,0)
									  ,	  ISNULL(A.MON11,0)
									  ,	  ISNULL(A.MON12,0)
									  ,	  ISNULL(A.SUM,0)

								  FROM COSTUNPIVOT 			A
					
								  UNION ALL
				
								  SELECT 
										  1 RN
									  ,   'FREECOST' MAIN	
									  ,	  'FIXVALICOSTSUM' AS DATATYPE
									  ,	  ISNULL(SUM(CONVERT(NUMERIC,A.MON1)),0) 	AS MON1
									  ,	  ISNULL(SUM(CONVERT(NUMERIC,A.MON2)),0) 	AS MON2
									  ,	  ISNULL(SUM(CONVERT(NUMERIC,A.MON3)),0) 	AS MON3
									  ,   ISNULL(SUM(CONVERT(NUMERIC,A.MON4)),0) 	AS MON4
									  ,	  ISNULL(SUM(CONVERT(NUMERIC,A.MON5)),0) 	AS MON5
									  ,	  ISNULL(SUM(CONVERT(NUMERIC,A.MON6)),0) 	AS MON6
									  ,	  ISNULL(SUM(CONVERT(NUMERIC,A.MON7)),0) 	AS MON7
									  ,	  ISNULL(SUM(CONVERT(NUMERIC,A.MON8)),0) 	AS MON8
									  ,	  ISNULL(SUM(CONVERT(NUMERIC,A.MON9)),0) 	AS MON9
									  ,	  ISNULL(SUM(CONVERT(NUMERIC,A.MON10)),0) AS MON10
									  ,	  ISNULL(SUM(CONVERT(NUMERIC,A.MON11)),0) AS MON11
									  ,	  ISNULL(SUM(CONVERT(NUMERIC,A.MON12)),0) AS MON12
									  ,	  ISNULL(SUM(CONVERT(NUMERIC,A.SUM)),0) 	AS SUM
									  
								  FROM COSTUNPIVOT 						A
								  								  
			]]>
		</statement>
	</query>
	
	<!--
	프 로 그 램 명	: 품질관리 - 검사 - 자재 수입 검사
	설		명	: 수입검사 대상 리스트 조회
	작	성	자	: 정승원
	작	성	일	: 2020-06-03
	주요 변경 로그	: 
	-->
	<query id="SelectMaterialIQCList" version="00001">
		<statement>
			<![CDATA[
			--
			--id : SelectMaterialIQCList
			--version : 00001
			SELECT
					RI.DELIVERYNO
				,	RI.DELIVERYSEQUENCE
				,	RI.CONSUMABLEDEFID
				,	CD.PARTNUMBER
				,	CD.CONSUMABLEDEFNAME
				,	CD.STANDARD
				,	CONVERT(CHAR(10), RI.DELIVERYDATE, 23) 			AS DELIVERYDATE
				,	RI.PURCHASENO
				,	RI.VENDORNAME
				,	RI.DELIVERYCONFIRMDEPT
				,	ISNULL(U1.USERNAME, RI.DELIVERYCONFIRMUSER) 	AS DELIVERYCONFIRMUSER
				,	ISNULL(W.WAREHOUSENAME, RI.DELIVERYWAREHOUSEID) AS DELIVERYWAREHOUSEID
				,	RI.DELIVERYQTY
				,	RI.GOODQTY
				,	RI.DEFECTQTY
				,	RI.RESULTCODE
				,	ISNULL(D.DICTIONARYNAME, RI.RESULTCODE) 	AS RESULTCODENAME
				,	ISNULL(U2.USERNAME, RI.INSPECTOR) 			AS INSPECTOR
				,	CONVERT(CHAR(10), RI.INSPECTIONDATE, 23)	AS INSPECTIONDATE
				,	RI.DESCRIPTION								AS COMMENT
				--,	INF.FILEID
			--	,	INF.INSPECTIONTYPE
				--,	INF.FILEDATA
			FROM 	CT_RECEIVINGINSPECTION		RI
			LEFT JOIN SF_CONSUMABLEDEFINITION	CD	ON	RI.CONSUMABLEDEFID = CD.CONSUMABLEDEFID
													AND	CD.CONSUMABLEDEFVERSION = '*'
			LEFT JOIN SF_USER					U1	ON	RI.DELIVERYCONFIRMUSER = U1.USERID
			LEFT JOIN SF_WAREHOUSE				W	ON	RI.DELIVERYWAREHOUSEID = W.WAREHOUSEID
			LEFT JOIN SF_CODE					C	ON	RI.RESULTCODE = C.CODEID
													AND	C.CODECLASSID = 'InspectionResult'
			LEFT JOIN SF_DICTIONARY				D	ON	C.DICTIONARYID = D.DICTIONARYID
													AND	D.LANGUAGETYPE = '$!{LANGUAGETYPE}'
			LEFT JOIN SF_USER					U2	ON	RI.INSPECTOR = U2.USERID
			--LEFT JOIN SF_INSPECTIONFILE			INF	ON	CD.RECEIVINGINSPSTDFILEID = INF.FILEID
			--										AND INF.INSPECTIONTYPE = 'ReceiptInsp'
			--										AND INF.RESOURCEID = '*'
			WHERE 1 = 1
			AND	RI.VALIDSTATE = 'Valid'
			--납품일자
			#if("$!{P_DATEPERIOD_PERIODFR}" != "" && "$!{P_DATEPERIOD_PERIODTO}" != "")
			AND 	RI.DELIVERYDATE BETWEEN CONVERT(CHAR(10), '$!{P_DATEPERIOD_PERIODFR}', 21) AND CONVERT(CHAR(10), '$!{P_DATEPERIOD_PERIODTO}', 21)
			#end
			--납품번호
			#if("$!{DELIVERYNO}" != "")
			AND EXISTS (
							SELECT 	1
							FROM	ufn_selectStringToSplit('$!{DELIVERYNO}', ',')	S
							WHERE	RI.DELIVERYNO = S.VALUE
					   )
			#end
			--품목코드
			#if($!{CONSUMABLEDEFID} != "")
			AND EXISTS (
							SELECT 	1
							FROM	ufn_selectStringToSplit(N'$!{CONSUMABLEDEFID}', ',')	S
							WHERE	RI.CONSUMABLEDEFID = S.VALUE
					   )
			#end
			--검사여부
			#if("$!{P_ISINSPECTION}" != "" && "$!{P_ISINSPECTION}" != "*")
				#if("$!{P_ISINSPECTION}" == "Y")
				AND	ISNULL(RI.RESULTCODE, '') <> ''
				#else
				AND	ISNULL(RI.RESULTCODE, '') = ''
				#end
			#end
			--검사결과
			#if("$!{P_INSPECTIONRESULT}" != "" && "$!{P_INSPECTIONRESULT}" != "*")
			AND 	RI.RESULTCODE = '$!{P_INSPECTIONRESULT}' 
			#end
			AND		CD.IMPORTINSP = 'Y'			
			ORDER BY RI.DELIVERYNO ASC;
			]]>
		</statement>
	</query>
	
	<!--
	프 로 그 램 명	: 품질관리 - 검사 - 자재 수입 검사
	설		명	: 수입검사 대상 리스트 조회
	작	성	자	: 정승원
	작	성	일	: 2020-06-03
	주요 변경 로그	: 
	-->
	<query id="SelectMaterialIQCResultList" version="00001">
		<statement>
			<![CDATA[
			--
			--id : SelectMaterialIQCResultList
			--version : 00001
			SELECT
					RIR.DELIVERYSERIALNO
				,	RIR.DELIVERYNO
				,	RIR.CONSUMABLEDEFID
				,	RIR.DELIVERYSEQUENCE
				,	RIR.VALUE1				AS A
				,	RIR.VALUE2				AS B
				,	RIR.VALUE3				AS C
				,	RIR.VALUE4				AS D
				,	RIR.VALUE5				AS E
				,	RIR.VALUE6				AS F
				,	RIR.VALUE7				AS G
				,	RIR.VALUE8				AS H
				,	RIR.VALUE9				AS I
				,	RIR.VALUE10				AS J
				,	RIR.VALUE11				AS K
				,	RIR.VALUE12				AS L
				,	RIR.VALUE13				AS M
				,	RIR.VALUE14				AS N
				,	RIR.RESULTCODE
			FROM 	CT_RECEIVINGINSPECTIONITEMRESULT	RIR
			WHERE 	1 = 1
			AND 	RIR.DELIVERYNO = '$!{DELIVERYNO}'
			AND 	RIR.CONSUMABLEDEFID = '$!{CONSUMABLEDEFID}'
			AND 	RIR.DELIVERYSEQUENCE = '$!{DELIVERYSEQUENCE}'
			ORDER BY RIR.DELIVERYSEQUENCE ASC;
			]]>
		</statement>
	</query>
	
	<!--
	프 로 그 램 명	: 품질관리 - 검사 - 자재 수입 검사
	설		명	: 
	작	성	자	: 정승원
	작	성	일	: 2020-06-03
	주요 변경 로그	: 
	-->
	<query id="GetDeliveryList" version="00001">
		<statement>
			<![CDATA[
			--
			--id : GetDeliveryList
			--version : 00001
			SELECT
					RI.DELIVERYNO
				,	CD.PARTNUMBER AS CONSUMABLEDEFID
				,	CD.CONSUMABLEDEFNAME
				,	CONVERT(CHAR(10), RI.DELIVERYDATE, 25) AS DELIVERYDATE 
			FROM 	CT_RECEIVINGINSPECTION		RI
			LEFT JOIN SF_CONSUMABLEDEFINITION	CD	ON	RI.CONSUMABLEDEFID = CD.CONSUMABLEDEFID
													AND CD.CONSUMABLEDEFVERSION = '*'
			WHERE 	1 = 1
			#if("$!{DELIVERYNO}" != "")
			AND 	RI.DELIVERYNO LIKE '%$!{DELIVERYNO}%'
			#end
			#if("$!{TXTCONSUMABELDEF}" != "")
			AND 	(CD.PARTNUMBER LIKE N'%$!{TXTCONSUMABELDEF}%'
			OR		CD.CONSUMABLEDEFNAME LIKE N'%$!{TXTCONSUMABELDEF}%')
			#end
			ORDER BY RI.DELIVERYNO ASC;
			]]>
		</statement>
	</query>
	
	<!--
	프 로 그 램 명	: 품질관리 - 검사 - 자재 수입 검사
	설		명	: 
	작	성	자	: 정승원
	작	성	일	: 2020-06-03
	주요 변경 로그	: 
	-->
	<query id="GetConsumableList" version="00001">
		<statement>
			<![CDATA[
			--
			--id : GetConsumableList
			--version : 00001
			SELECT 
					CONSUMABLEDEFID
					,	PARTNUMBER
					,	CONSUMABLEDEFNAME
			FROM 	SF_CONSUMABLEDEFINITION
			WHERE 	1 = 1
			#if("$!{TXTCONSUMABELDEF}" != "")
			AND 	(PARTNUMBER LIKE N'%$!{TXTCONSUMABELDEF}%'
			OR		CONSUMABLEDEFNAME LIKE N'%$!{TXTCONSUMABELDEF}%')
			#end
			ORDER BY CONSUMABLEDEFID ASC;
			]]>
		</statement>
	</query>
	
	<!--
	프 로 그 램 명	: 품질관리 - 검사 - 자재 수입 검사
	설		명	: 검사이력 조회
	작	성	자	: 정승원
	작	성	일	: 2020-07-09
	주요 변경 로그	: 
	-->
	<query id="SelectMaterialIQCHistoryList" version="00001">
		<statement>
			<![CDATA[
			--
			--id : SelectMaterialIQCHistoryList
			--version : 00001
			SELECT
					RI.DELIVERYNO
				,	RI.DELIVERYSEQUENCE
				,	RI.CONSUMABLEDEFID
				,	CD.PARTNUMBER
				,	CD.CONSUMABLEDEFNAME
				,	CD.STANDARD
				,	CONVERT(CHAR(10), RI.DELIVERYDATE, 23) 			AS DELIVERYDATE
				,	RI.DELIVERYQTY
				,	RI.GOODQTY
				,	RI.DEFECTQTY
				,	RI.RESULTCODE
				,	ISNULL(D.DICTIONARYNAME, RI.RESULTCODE) 	AS RESULTCODENAME
				,	ISNULL(U2.USERNAME, RI.INSPECTOR) 			AS INSPECTOR
				,	CONVERT(CHAR(10), RI.INSPECTIONDATE, 23)	AS INSPECTIONDATE
				,	RIR.DELIVERYSERIALNO
				,	RIR.VALUE1							AS A
				,	RIR.VALUE2							AS B
				,	RIR.VALUE3							AS C
				,	RIR.VALUE4							AS D
				,	RIR.VALUE5							AS E
				,	RIR.VALUE6							AS F
				,	RIR.VALUE7							AS G
				,	RIR.VALUE8							AS H
				,	RIR.VALUE9							AS I
				,	RIR.VALUE10							AS J
				,	RIR.VALUE11							AS K
				,	RIR.VALUE12							AS L
				,	RIR.VALUE13							AS M
				,	RIR.VALUE14							AS N
			FROM 	CT_RECEIVINGINSPECTION				RI
			INNER JOIN CT_RECEIVINGINSPECTIONITEMRESULT	RIR	ON	RI.CONSUMABLEDEFID = RIR.CONSUMABLEDEFID
															AND RI.DELIVERYNO = RIR.DELIVERYNO
															AND RI.DELIVERYSEQUENCE = RIR.DELIVERYSEQUENCE
			LEFT JOIN SF_CONSUMABLEDEFINITION			CD	ON	RI.CONSUMABLEDEFID = CD.CONSUMABLEDEFID
															AND	CD.CONSUMABLEDEFVERSION = '*'
			LEFT JOIN SF_CODE							C	ON	RI.RESULTCODE = C.CODEID
															AND	C.CODECLASSID = 'InspectionResult'
			LEFT JOIN SF_DICTIONARY						D	ON	C.DICTIONARYID = D.DICTIONARYID
															AND	D.LANGUAGETYPE = '$!{LANGUAGETYPE}'
			LEFT JOIN SF_USER							U2	ON	RI.INSPECTOR = U2.USERID
			WHERE 1 = 1
			AND	RI.VALIDSTATE = 'Valid'
			AND ISNULL(RI.RESULTCODE, '') <> ''
			--납품일자
			#if("$!{P_DATEPERIOD_PERIODFR}" != "" && "$!{P_DATEPERIOD_PERIODTO}" != "")
			AND 	RI.DELIVERYDATE BETWEEN CONVERT(CHAR(10), '$!{P_DATEPERIOD_PERIODFR}', 21) AND CONVERT(CHAR(10), '$!{P_DATEPERIOD_PERIODTO}', 21)
			#end
			--납품번호
			#if("$!{DELIVERYNO}" != "")
			AND EXISTS (
							SELECT 	1
							FROM	ufn_selectStringToSplit('$!{DELIVERYNO}', ',')	S
							WHERE	RI.DELIVERYNO = S.VALUE
					   )
			#end
			--품목코드
			#if($!{CONSUMABLEDEFID} != "")
			AND EXISTS (
							SELECT 	1
							FROM	ufn_selectStringToSplit(N'$!{CONSUMABLEDEFID}', ',')	S
							WHERE	RI.CONSUMABLEDEFID = S.VALUE
					   )
			#end
			--검사결과
			#if("$!{P_INSPECTIONRESULT}" != "" && "$!{P_INSPECTIONRESULT}" != "*")
			AND 	RI.RESULTCODE = '$!{P_INSPECTIONRESULT}' 
			#end
			ORDER BY RI.DELIVERYNO ASC;
			]]>
		</statement>
	</query>
	
	<!--
	프 로 그 램 명	: 품질관리 - 검사 - 출하 검사
	설		명	: 출하 검사 대상 LOT 조회
	작	성	자	: 정승원
	작	성	일	: 2020-06-10
	주요 변경 로그	: 
	-->
	<query id="SelectProductOqcTarget" version="00001">
		<statement>
			<![CDATA[
			--
			--id : SelectProductOqcTarget
			--version : 00001
			SELECT
					MAX(ISNULL(OI.INSPECTIONDEGREE + 1, 1)) DEGREE --현재 진행중인 차수로 보여주기 위함
				,	L.LOTID
				,	L.PROCESSSEGMENTID
				,	L.PRODUCTDEFID
				,	PD.PRODUCTDEFNAME
				,	L.QTY
				,	INF.FILENAME
				,	INF.FILEDATA
			FROM 	SF_LOT					L
			LEFT JOIN SF_PRODUCTDEFINITION	PD	ON	L.PRODUCTDEFID = PD.PRODUCTDEFID
												AND	L.PRODUCTDEFVERSION = PD.PRODUCTDEFVERSION
			LEFT JOIN SF_INSPECTIONFILE		INF	ON	PD.SHIPPINGINSPSTDFILEID = INF.FILEID
												AND	INF.INSPECTIONTYPE = 'OutGoingInsp'
												AND	INF.RESOURCEID = '*'
			LEFT JOIN CT_OUTGOINGINSPECTION	OI	ON 	L.LOTID = OI.LOTID
												AND L.PROCESSSEGMENTID = OI.PROCESSSEGMENTID									
			WHERE 1 = 1
			AND L.LOTID = '$!{LOTID}'
			AND L.LOTSTATE = 'Finished'
			AND ISNULL(L.ISHOLD, 'N') = 'N'
			GROUP BY L.LOTID
				,	 L.PROCESSSEGMENTID
				,	 L.PRODUCTDEFID
				,	 PD.PRODUCTDEFNAME
				,	 L.QTY
				,	 INF.FILENAME
				,	 INF.FILEDATA
			]]>
		</statement>
	</query>
	
	<!--
	프 로 그 램 명	: 품질관리 - 검사 - 출하 검사
	설		명	: 출하 검사 대상 LOT 조회
	작	성	자	: 정승원
	작	성	일	: 2020-06-10
	주요 변경 로그	: 2020-07-16 유태근 / 품목코드 변경
	-->
	<query id="SelectSearchProductOQC" version="00001">
		<statement>
			<![CDATA[
			--
			--id : SelectSearchProductOQC
			--version : 00001
			SELECT 
					X.*
			FROM 
			(
				SELECT 
						ROW_NUMBER() OVER (PARTITION BY OI.LOTID, OI.PROCESSSEGMENTID ORDER BY OI.INSPECTIONDEGREE DESC)	RN
					,	OI.INSPECTIONDEGREE
					,	OI.INSPECTIONDATE
					--,	CL.CONSUMABLEDEFID									PRODUCTDEFID
					,	PD.PARTNUMBER										PRODUCTDEFID
					,   ISNULL(PD.PARTNUMBER,CL.CONSUMABLEDEFID)            PARTNUMBER 
					,	PD.PRODUCTDEFNAME
					,	PD.STANDARD
					,	OI.LOTID
					,	OI.PROCESSSEGMENTID
					,	ISNULL(DC.DICTIONARYNAME, PS.PROCESSSEGMENTNAME) 	PROCESSSEGMENT
					,	CL.AREAID
					,	PD.TEAMID
					,	ISNULL(DC2.DICTIONARYNAME, PD.TEAMID)				TEAM
					,	CL.CONSUMABLELOTQTY									QTY
					,	ISNULL(U1.USERNAME, OI.INSPECTOR) 					INSPECTOR
					,	ISNULL(U2.USERNAME, OI.INSPECTOR2)  				INSPECTOR2
					,	CASE WHEN CL.CONSUMABLESTATE = 'Shipped' THEN 'Y'
						ELSE NULL
						END													ISCONFIRM
					,	OI.VALUE1					A
					,	OI.VALUE2					B
					,	OI.VALUE3					C
					,	OI.VALUE4					D
					,	OI.VALUE5					E
					,	OI.VALUE6					F
					,	OI.VALUE7					G
					,	OI.VALUE8					H
				FROM	CT_OUTGOINGINSPECTION 		OI
				INNER JOIN SF_CONSUMABLELOT			CL	ON	OI.LOTID = CL.CONSUMABLELOTID
				INNER JOIN SF_PRODUCTDEFINITION		PD	ON	CL.CONSUMABLEDEFID = PD.PRODUCTDEFID
														AND	CL.CONSUMABLEDEFVERSION = PD.PRODUCTDEFVERSION
				LEFT JOIN SF_PROCESSSEGMENT			PS	ON	OI.PROCESSSEGMENTID = PS.PROCESSSEGMENTID
														AND	PS.PROCESSSEGMENTVERSION = '*'
				LEFT JOIN SF_DICTIONARY				DC	ON	PS.DICTIONARYID = DC.DICTIONARYID
														AND	DC.LANGUAGETYPE = '$!{LANGUAGETYPE}'
				LEFT JOIN CT_TEAM					T	ON	PD.TEAMID = T.TEAMID
				LEFT JOIN SF_DICTIONARY				DC2	ON	T.DICTIONARYID = DC2.DICTIONARYID
														AND DC2.LANGUAGETYPE = '$!{LANGUAGETYPE}'
				LEFT JOIN SF_USER					U1	ON	OI.INSPECTOR = U1.USERID
				LEFT JOIN SF_USER					U2	ON	OI.INSPECTOR2 = U2.USERID
				WHERE 1 = 1
				--검사일자
				#if("$!{P_DATEPERIOD_PERIODFR}" != "" && "$!{P_DATEPERIOD_PERIODTO}" != "")
				AND	OI.INSPECTIONDATE BETWEEN '$!{P_DATEPERIOD_PERIODFR}' AND '$!{P_DATEPERIOD_PERIODTO}'
				#end
				--작업장
				#if("$!{P_AREACODE}" != "" && "$!{P_AREACODE}" != "*")
				AND CL.AREAID = '$!{P_AREACODE}'
				#end
				--기종
				#if("$!{P_MODEL}" != "" && "$!{P_MODEL}" != "*")
				AND PD.MODELID = '$!{P_MODEL}'
				#end
				--품목코드
				#if("$!{P_PRODUCTDEFID}" != "")
				AND EXISTS (
								SELECT 	1
								FROM	ufn_selectStringToSplit('$!{P_PRODUCTDEFID}', ',')	S
								WHERE	PD.PARTNUMBER = S.VALUE
						   )
				#end
				--LOTID
				#if("$!{P_LOTID}" != "")
				AND EXISTS (
								SELECT 	1
								FROM	ufn_selectStringToSplit('$!{P_LOTID}', ',')	S
								WHERE	OI.LOTID = S.VALUE
						   )
				#end
			)X
			WHERE  X.RN = 1
			ORDER BY X.PRODUCTDEFID, X.LOTID ASC;
			]]>
		</statement>
	</query>
	
	<!--
	프 로 그 램 명	: 품질관리 - 검사 - 출하 검사
	설		명	: 출하 검사 대상 LOT 조회
	작	성	자	: 정승원
	작	성	일	: 2020-06-10
	주요 변경 로그	: 
	-->
	<query id="GetOutGoingLot" version="00001">
		<statement>
			<![CDATA[
			--
			--id : GetOutGoingLot
			--version : 00001

			SELECT 
					MAX(OI.INSPECTIONDEGREE)	DEGREE
				,	CL.CONSUMABLEDEFID			PRODUCTDEFID
				,	PD.PRODUCTDEFNAME
				,	OI.LOTID
				,	OI.PROCESSSEGMENTID
				,	ISNULL(DC.DICTIONARYNAME, PS.PROCESSSEGMENTNAME) 	PROCESSSEGMENT
			FROM	CT_OUTGOINGINSPECTION 		OI
			INNER JOIN SF_CONSUMABLELOT			CL	ON	OI.LOTID = CL.CONSUMABLELOTID
			INNER JOIN SF_PRODUCTDEFINITION		PD	ON	CL.CONSUMABLEDEFID = PD.PRODUCTDEFID
													AND	CL.CONSUMABLEDEFVERSION = PD.PRODUCTDEFVERSION
			LEFT JOIN SF_PROCESSSEGMENT			PS	ON	OI.PROCESSSEGMENTID = PS.PROCESSSEGMENTID
													AND	PS.PROCESSSEGMENTVERSION = '*'
			LEFT JOIN SF_DICTIONARY				DC	ON	PS.DICTIONARYID = DC.DICTIONARYID
													AND	DC.LANGUAGETYPE = '$!{LANGUAGETYPE}'										
			WHERE 1 = 1
			--팝업 조회조건 TXTLOTID
			#if("$!{TXTLOTID}" != "")
			AND OI.LOTID LIKE '%$!{TXTLOTID}%'
			#end
			--팝업 조회조건 TXTPRODUCTDEFNAME
			#if("$!{TXTPRODUCTDEFNAME}" != "")
			AND (PD.PRODUCTDEFID LIKE '%$!{TXTPRODUCTDEFNAME}%'
			OR	 PD.PRODUCTDEFNAME LIKE '%$!{TXTPRODUCTDEFNAME}%')
			#end
			--팝업 조회조건 TXTPROCESSSEGMENT
			#if("$!{TXTPROCESSSEGMENT}" != "")
			AND (PS.PROCESSSEGMENTID LIKE '%$!{TXTPROCESSSEGMENT}%'
			OR	 PS.PROCESSSEGMENTNAME LIKE '%$!{TXTPROCESSSEGMENT}%'
			OR	 DC.DICTIONARYNAME LIKE '%$!{TXTPROCESSSEGMENT}%')
			#end
			GROUP BY CL.CONSUMABLEDEFID
				,	 PD.PRODUCTDEFNAME
				,	 PD.STANDARD
				,	 OI.LOTID
				,	 OI.PROCESSSEGMENTID
				,	 DC.DICTIONARYNAME
				,	 PS.PROCESSSEGMENTNAME
			ORDER BY OI.LOTID ASC;
			]]>
		</statement>
	</query>
	
	<!--
	 프 로 그 램 명   : 품질관리 - 불량통지서 - 불량통지서등록
	 설             명   : 불량품 팝업 조회
	 작     성     자   : 강유라
	 작     성     일   : 2020-06-15
	 주요 변경 로그  : 2020-07-16 유태근 / 품목코드 변경 
 					2020-08-24 모세찬 | 상품코드 추가에 따른 쿼리변경
	-->
   <query id="GetConsumableDefListDefect" version="00001">
      <statement>
         <![CDATA[
         --
         --id : GetConsumableDefListDefect
         --version : 00001
			SELECT	*
			FROM
			(
				SELECT             	
					CS.CONSUMABLEDEFID      							AS CONSUMABLEDEFSEQ         
				,	CS.PARTNUMBER										AS CONSUMABLEDEFID	            
				,   CS.CONSUMABLEDEFVERSION
				,   ISNULL(CSD.DICTIONARYNAME, CS.CONSUMABLEDEFNAME)   	AS CONSUMABLEDEFNAME
				,	CS.CONSUMABLETYPE
				,   CCD.DICTIONARYNAME                            		AS CONSUMABLETYPENAME
				,   CS.DESCRIPTION   
				FROM 	SF_CONSUMABLEDEFINITION                            	CS
				LEFT OUTER JOIN SF_DICTIONARY                         		CSD ON  CS.DICTIONARYID = CSD.DICTIONARYID
			                                                         		AND CSD.LANGUAGETYPE ='Ko-Kr'      
				LEFT OUTER JOIN SF_CODE                             		CC  ON  CS.CONSUMABLETYPE = CC.CODEID
			                                                         		AND CC.CODECLASSID ='CondDefectConsum'
				LEFT OUTER JOIN SF_DICTIONARY                         		CCD ON  CC.DICTIONARYID = CCD.DICTIONARYID
					                                                  		AND CCD.LANGUAGETYPE ='Ko-Kr'      
				UNION
				SELECT
						UG.GOODSDEFID									AS CONSUMABLEDEFSEQ
						,UG.PARTNUMBER									AS CONSUMABLEDEFID
						,UG.GOODSDEFVERSION								AS CONSUMABLEDEFVERSION
						,UG.GOODSDEFNAME								AS CONSUMABLEDEFNAME
						,UG.GOODSDEFTYPE								AS CONSUMABLETYPE
						,CCD.DICTIONARYNAME								AS CONSUMABLETYPENAME
						,UG.DESCRIPTION	
				FROM	UL_GOODSDEFINITION									UG
				LEFT OUTER JOIN	SF_CODE										CC	ON	UG.GOODSDEFTYPE = CC.CODEID
																			AND CC.CODECLASSID = 'CondDefectConsum'
				LEFT OUTER JOIN SF_DICTIONARY                         		CCD ON  CC.DICTIONARYID = CCD.DICTIONARYID
			                                                         		AND CCD.LANGUAGETYPE ='Ko-Kr'      
			) temp
			WHERE    1 = 1 
				#if("$!{P_PRODUCTDEFTYPE}" != "" && "$!{P_PRODUCTDEFTYPE}" != "*")
				AND 	temp.CONSUMABLETYPE = '$!{P_PRODUCTDEFTYPE}'
				#end
			         
				#if("$!{P_PRODUCTDEFTXT}" != "")
				AND (temp.CONSUMABLEDEFID LIKE '%$!{P_PRODUCTDEFTXT}%'
				OR    temp.CONSUMABLEDEFNAME LIKE '%$!{P_PRODUCTDEFTXT}%')
				#end
         ]]>
      </statement>
   </query>
   
   
   	<!--
	  프 로 그 램 명   : 품질관리 - 수리품관리 - 시정예방조치 관리대장
	  설             명   : 시정예방조치 관리정보의 진행정보에 들어갈 발행번호하나에 해당하는 Max Sequence를 구한다.
	  작     성     자   : 유태근
	  작     성     일   : 2020-06-16
	  주요 변경 로그  :  
	-->
   <query id="GetCapaDetailMaxSequence" version="00001">
      <statement>
         <![CDATA[
         --
         --id : GetCapaDetailMaxSequence
         --version : 00001
         SELECT 
				CASE WHEN COUNT(*) = 0
				     THEN 0
					 ELSE COUNT(*) END			AS MAXSEQUENCE
		 FROM	UL_CAPADTL
		 WHERE	DOCID = '$!{DOCID}'
         ]]>
      </statement>
   </query>
   
	<!--
	프 로 그 램 명   : 품질관리 > 불량관리 > 불량통지서 관리
	설             명   : 불량통지서 관리화면의 진행 현황 조회 
	작     성     자   : 강유라
	작     성     일   : 2020-06-26
	주요 변경 로그  : 2020-06-29 유태근 / 조회조건 상관없이 전체갯수를 조회하도록 수정 
	-->
   <query id="SelectDefectProcessStateCount" version="00001">
      <statement>
         <![CDATA[
         --
         --id : SelectDefectProcessStateCount
         --version : 00001
        SELECT
				COUNT(CASE WHEN PROGRESSSTATE = 'Registration' THEN 1 END) 				AS REGISTRATION			
			,	COUNT(CASE WHEN PROGRESSSTATE = 'Receipt' THEN 1 END) 					AS RECEIPT
			,	COUNT(CASE WHEN PROGRESSSTATE = 'SendNotice' THEN 1 END) 				AS SENDNOTICE
			,	COUNT(CASE WHEN PROGRESSSTATE = 'MeasuresCompleted' THEN 1 END) 			AS ACTIONCOMPLETED
				
		FROM UL_DEFECT
		WHERE -- 발행기간 조회조건
				PUBLISHDATE BETWEEN CONVERT(DATE, '$!{P_DATEPERIOD_PERIODFR}')
									  AND	   CONVERT(DATE, '$!{P_DATEPERIOD_PERIODTO}')
				
				; 																		
         ]]>
      </statement>
   </query>
   
    <!--
	프 로 그 램 명   : 품질관리 > 수리품관리 > 시정예방조치서 발행대장
	설             명   : 시정예방조치서 발행대장의 진행 현황 조회
	작     성     자   : 유태근
	작     성     일   : 2020-06-29
	주요 변경 로그  :  
	-->
	<query id="GetClaimProgressStateCount" version="00001">
		<statement>
			<![CDATA[
        	--
        	--id : GetClaimProgressStateCount
        	--version : 00001
			SELECT	
					COUNT(CASE WHEN PROGRESSSTATE = 'CorrectiveActionPublish' THEN 1 END)	AS CURRENTIVEACTIONPUBLISHCOUNT
				,	COUNT(CASE WHEN PROGRESSSTATE = 'ClaimRequest' THEN 1 END)				AS CLAIMREQUESTCOUNT
				,	COUNT(CASE WHEN PROGRESSSTATE = 'ClaimReceipt' THEN 1 END)				AS CLAIMRECEIPTCOUNT
				,	COUNT(CASE WHEN PROGRESSSTATE = 'ResponseCompleted' THEN 1 END)			AS RESPONSECOMPLETEDCOUNT
				,	COUNT(CASE WHEN PROGRESSSTATE = 'ActionCompleted' THEN 1 END)			AS ACTIONCOMPLETEDCOUNT
			FROM	UL_CAPA 
			WHERE-- 발행일자 조회조건
						PUBLISHDATE BETWEEN CONVERT(DATE, '$!{P_DATEPERIOD_PERIODFR}')
									   AND	   CONVERT(DATE, '$!{P_DATEPERIOD_PERIODTO}')
			;
         	]]>
		</statement>
	</query>
   
   <!--
	프 로 그 램 명   : 품질관리 > 수리품관리 > X번관리대장
	설             명   : 진행현황 COUNT 
	작     성     자   : 정승원
	작     성     일   : 2020-06-29
	주요 변경 로그  :  
	-->
	<query id="GetXmanageProgressStateCount" version="00001">
		<statement>
			<![CDATA[
        	--
        	--id : GetXmanageProgressStateCount
        	--version : 00001
			SELECT 
					COUNT(CASE WHEN PROGRESSSTATE = 'Request' THEN 1 END)  REQUESTCNT
				,	COUNT(CASE WHEN PROGRESSSTATE = 'Working' THEN 1 END)  WORKINGCNT
			FROM UL_XMANAGE
			WHERE --발행일자
				#if("$!{P_DATEPERIOD_PERIODFR}" != "" && "$!{P_DATEPERIOD_PERIODTO}" != "")
						PUBLISHDATE BETWEEN CONVERT(CHAR(10), '$!{P_DATEPERIOD_PERIODFR}', 5)
									  AND	  DATEADD(DAY, 1, CONVERT(CHAR(10), '$!{P_DATEPERIOD_PERIODTO}', 5))
				#end
				;
         	]]>
		</statement>
	</query>
	
	<!--
	프 로 그 램 명   : 품질관리 > 수리품관리 > 시정예방조치서 발행대장
	설             명   : 부서 데이터 조회
	작     성     자   : 유태근
	작     성     일   : 2020-07-02
	주요 변경 로그  :  
	-->
	<query id="GetDepartment" version="00001">
		<statement>
			<![CDATA[
        	--
        	--id : GetDepartment
        	--version : 00001
			SELECT 
					DEPARTMENTID
				,	DEPARTMENTNAME
			FROM	CT_DEPARTMENT
			WHERE	VALIDSTATE = 'Valid'
         	]]>
		</statement>
	</query>
	
	<!--
	프 로 그 램 명   : 품질관리 > 불량관리 > 불량통지서 등록
	설           명   : 단가 데이터 ERP 조회
	작     성     자   : scmo
	작     성     일   : 2021-05-11
	주요 변경 로그  :  
	-->
	<query id="GetUnitPriceList" version="00001">
		<statement>
			<![CDATA[
        	--
        	--id : GetUnitPriceList
        	--version : 00001
			SELECT 	*
			FROM	[UCKERP].[$!{DBLINKNAME}].[dbo].[UCK_IF_VIEW_TPUBASEBuyPriceItem]
			WHERE	1=1
					AND ItemSeq = '$!{ITEMSEQ}'
					AND CustSeq = '$!{CUSTSEQ}'
					--AND StartDate >= '$!{BDATE}'
					AND IsPrice = 1
         	]]>
		</statement>
	</query>
	
	<!--
	프 로 그 램 명   : 품질관리 > 수리품관리 > X번 관리대장
	설           명     : X번관리대장의 제조번호(LOTID) 선택 팝업 쿼리
	작     성     자   : 주시은
	작     성     일   : 2022-05-10
	주요 변경 로그  :  
	-->
	<query id="GetLotIdForXManage" version="00001">
		<statement>
			<![CDATA[
        	--id : GetLotIdForXManage
        	--version : 00001
			SELECT 
						L.LOTID
					,	ISNULL(D.DICTIONARYNAME, PD.PRODUCTDEFTYPE) PRODUCTDEFTYPE
					,	L.PRODUCTDEFID
					,	PD.PRODUCTDEFNAME
					,	ISNULL(D2.DICTIONARYNAME, PS.PROCESSSEGMENTNAME) PROCESSSEGMENTNAME
					,	L.QTY
				FROM 	SF_LOT					L
				INNER JOIN SF_PRODUCTDEFINITION PD	ON	L.PRODUCTDEFID = PD.PRODUCTDEFID
													AND L.PRODUCTDEFVERSION = PD.PRODUCTDEFVERSION
				INNER JOIN SF_PROCESSSEGMENT 	PS 	ON 	L.PROCESSSEGMENTID = PS.PROCESSSEGMENTID
													AND L.PROCESSSEGMENTVERSION = PS.PROCESSSEGMENTVERSION
				LEFT JOIN SF_CODE 				C	ON 	PD.PRODUCTDEFTYPE = C.CODEID 
													AND C.CODECLASSID = 'ProductDefType'
				LEFT JOIN SF_DICTIONARY 		D	ON 	C.DICTIONARYID = D.DICTIONARYID 
													AND D.LANGUAGETYPE = '$!{LANGUAGETYPE}'
				LEFT JOIN SF_DICTIONARY 		D2 	ON	PS.DICTIONARYID = D2.DICTIONARYID
													AND D2.LANGUAGETYPE = '$!{LANGUAGETYPE}'
				WHERE	1=1
						AND	L.PROCESSSTATE <> 'Run'
				#if("$!{TXTPRODUCTDEFIDNAME}" != "")
						AND (L.PRODUCTDEFID LIKE '%$!{TXTPRODUCTDEFIDNAME}%'
						OR	 PD.PRODUCTDEFNAME LIKE '%$!{TXTPRODUCTDEFIDNAME}%')
				#end
				#if("$!{TXTLOTID}" != "")
						AND L.LOTID LIKE '%$!{TXTLOTID}%'
				#end
				ORDER BY L.LOTID
         	]]>
		</statement>
	</query>
	
	<!--
	프 로 그 램 명   : 품질관리 > 수리품관리 > 시정예방조치관리대장
	설           명     : 시정예방조치관리대장 취소 시 해당 claim건의 x번 관리대장 진행상태가 취소인지 확인
	작     성     자   : 주시은
	작     성     일   : 2022-05-11
	주요 변경 로그  :  
	-->
	<query id="GetXManagerProgressState" version="00001">
		<statement>
			<![CDATA[
        	--id : GetXManagerProgressState
        	--version : 00001
			SELECT	
					XM.PROGRESSSTATE
				,	CA.DOCID
			FROM	UL_CAPA			CA
			LEFT JOIN UL_XMANAGE	XM	ON	CA.XNUMBER = XM.XNUMBER
			WHERE	1=1
					AND CA.DOCID = '$!{DOCID}'
         	]]>
		</statement>
	</query>
</list>